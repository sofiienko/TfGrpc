// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/tpu/dynamic_padding.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Tpu {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/tpu/dynamic_padding.proto</summary>
  public static partial class DynamicPaddingReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/tpu/dynamic_padding.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DynamicPaddingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJ0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvdHB1L2R5bmFtaWNfcGFkZGlu",
            "Zy5wcm90bxIOdGVuc29yZmxvdy50cHUiTwoKUGFkZGluZ01hcBIRCglhcmdf",
            "aW5kZXgYASABKAUSEwoLc2hhcGVfaW5kZXgYAiABKAUSGQoRcGFkZGluZ19h",
            "cmdfaW5kZXgYAyABKAVCA/gBAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.PaddingMap), global::Tensorflow.Tpu.PaddingMap.Parser, new[]{ "ArgIndex", "ShapeIndex", "PaddingArgIndex" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A mapping between the dynamic shape dimension of an input and the arg that
  /// represents the real shape.
  /// </summary>
  public sealed partial class PaddingMap : pb::IMessage<PaddingMap> {
    private static readonly pb::MessageParser<PaddingMap> _parser = new pb::MessageParser<PaddingMap>(() => new PaddingMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaddingMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.DynamicPaddingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingMap(PaddingMap other) : this() {
      argIndex_ = other.argIndex_;
      shapeIndex_ = other.shapeIndex_;
      paddingArgIndex_ = other.paddingArgIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaddingMap Clone() {
      return new PaddingMap(this);
    }

    /// <summary>Field number for the "arg_index" field.</summary>
    public const int ArgIndexFieldNumber = 1;
    private int argIndex_;
    /// <summary>
    /// Input arg index with dynamic shapes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArgIndex {
      get { return argIndex_; }
      set {
        argIndex_ = value;
      }
    }

    /// <summary>Field number for the "shape_index" field.</summary>
    public const int ShapeIndexFieldNumber = 2;
    private int shapeIndex_;
    /// <summary>
    /// The dynamic shape dimension index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShapeIndex {
      get { return shapeIndex_; }
      set {
        shapeIndex_ = value;
      }
    }

    /// <summary>Field number for the "padding_arg_index" field.</summary>
    public const int PaddingArgIndexFieldNumber = 3;
    private int paddingArgIndex_;
    /// <summary>
    /// The arg index that dynamic dimension maps to, which represents the value
    /// of the real shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PaddingArgIndex {
      get { return paddingArgIndex_; }
      set {
        paddingArgIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaddingMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaddingMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArgIndex != other.ArgIndex) return false;
      if (ShapeIndex != other.ShapeIndex) return false;
      if (PaddingArgIndex != other.PaddingArgIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArgIndex != 0) hash ^= ArgIndex.GetHashCode();
      if (ShapeIndex != 0) hash ^= ShapeIndex.GetHashCode();
      if (PaddingArgIndex != 0) hash ^= PaddingArgIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArgIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ArgIndex);
      }
      if (ShapeIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShapeIndex);
      }
      if (PaddingArgIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PaddingArgIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArgIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArgIndex);
      }
      if (ShapeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShapeIndex);
      }
      if (PaddingArgIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PaddingArgIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaddingMap other) {
      if (other == null) {
        return;
      }
      if (other.ArgIndex != 0) {
        ArgIndex = other.ArgIndex;
      }
      if (other.ShapeIndex != 0) {
        ShapeIndex = other.ShapeIndex;
      }
      if (other.PaddingArgIndex != 0) {
        PaddingArgIndex = other.PaddingArgIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ArgIndex = input.ReadInt32();
            break;
          }
          case 16: {
            ShapeIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PaddingArgIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
