// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/compiler/xla/xla.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xla {

  /// <summary>Holder for reflection information generated from tensorflow/compiler/xla/xla.proto</summary>
  public static partial class XlaReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/compiler/xla/xla.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF0ZW5zb3JmbG93L2NvbXBpbGVyL3hsYS94bGEucHJvdG8SA3hsYRopdGVu",
            "c29yZmxvdy9jb21waWxlci94bGEvc2VydmljZS9obG8ucHJvdG8aJnRlbnNv",
            "cmZsb3cvY29tcGlsZXIveGxhL3hsYV9kYXRhLnByb3RvIsQCChlIbG9SZWR1",
            "Y2VQcmVjaXNpb25PcHRpb25zEjkKCGxvY2F0aW9uGAEgASgOMicueGxhLkhs",
            "b1JlZHVjZVByZWNpc2lvbk9wdGlvbnMuTG9jYXRpb24SFQoNZXhwb25lbnRf",
            "Yml0cxgCIAEoDRIVCg1tYW50aXNzYV9iaXRzGAMgASgNEhkKEW9wY29kZXNf",
            "dG9fc3VmZml4GAQgAygNEiMKG29wbmFtZV9zdWJzdHJpbmdzX3RvX3N1ZmZp",
            "eBgFIAMoCSJ+CghMb2NhdGlvbhINCglPUF9JTlBVVFMQABIOCgpPUF9PVVRQ",
            "VVRTEAESFgoSVU5GVVNFRF9PUF9PVVRQVVRTEAISHAoYRlVTSU9OX0lOUFVU",
            "U19CWV9DT05URU5UEAMSHQoZRlVTSU9OX09VVFBVVFNfQllfQ09OVEVOVBAE",
            "Iv4QCgxEZWJ1Z09wdGlvbnMSHwoXeGxhX2hsb19ncmFwaF9hZGRyZXNzZXMY",
            "AiABKAgSFwoPeGxhX2hsb19wcm9maWxlGAkgASgIEh4KFnhsYV9kaXNhYmxl",
            "X2hsb19wYXNzZXMYHiADKAkSIgoaeGxhX2VuYWJsZV9obG9fcGFzc2VzX29u",
            "bHkYfCADKAkSIgoaeGxhX2Rpc2FibGVfYWxsX2hsb19wYXNzZXMYaCABKAgS",
            "JgoeeGxhX2JhY2tlbmRfb3B0aW1pemF0aW9uX2xldmVsGB8gASgFEiIKGnhs",
            "YV9lbWJlZF9pcl9pbl9leGVjdXRhYmxlGCEgASgIEiwKJHhsYV9lbGltaW5h",
            "dGVfaGxvX2ltcGxpY2l0X2Jyb2FkY2FzdBgjIAEoCBIiChp4bGFfY3B1X211",
            "bHRpX3RocmVhZF9laWdlbhg8IAEoCBIdChV4bGFfZ3B1X2N1ZGFfZGF0YV9k",
            "aXIYPSABKAkSEwoLeGxhX2dwdV9mdHoYPiABKAgSJwofeGxhX2dwdV9kaXNh",
            "YmxlX211bHRpX3N0cmVhbWluZxg/IAEoCBIsCiR4bGFfbGx2bV9lbmFibGVf",
            "YWxpYXNfc2NvcGVfbWV0YWRhdGEYRiABKAgSKAogeGxhX2xsdm1fZW5hYmxl",
            "X25vYWxpYXNfbWV0YWRhdGEYRyABKAgSLwoneGxhX2xsdm1fZW5hYmxlX2lu",
            "dmFyaWFudF9sb2FkX21ldGFkYXRhGEggASgIEikKIXhsYV9sbHZtX2Rpc2Fi",
            "bGVfZXhwZW5zaXZlX3Bhc3NlcxhJIAEoCBJEChxobG9fcmVkdWNlX3ByZWNp",
            "c2lvbl9vcHRpb25zGFAgAygLMh4ueGxhLkhsb1JlZHVjZVByZWNpc2lvbk9w",
            "dGlvbnMSIwobeGxhX3Rlc3RfYWxsX291dHB1dF9sYXlvdXRzGFogASgIEiIK",
            "GnhsYV90ZXN0X2FsbF9pbnB1dF9sYXlvdXRzGFsgASgIEiQKHHhsYV9obG9f",
            "Z3JhcGhfc2hhcmRpbmdfY29sb3IYXCABKAgSIwobeGxhX2dwdV91c2VfY3Vk",
            "bm5fYmF0Y2hub3JtGF4gASgIEhsKE3hsYV9jcHVfdXNlX21rbF9kbm4YYSAB",
            "KAgSKAogeGxhX2dwdV9tYXhfa2VybmVsX3Vucm9sbF9mYWN0b3IYYiABKAUS",
            "IAoYeGxhX2NwdV9lbmFibGVfZmFzdF9tYXRoGGMgASgIEiQKHHhsYV9jcHVf",
            "ZmFzdF9tYXRoX2hvbm9yX25hbnMYeCABKAgSJAoceGxhX2NwdV9mYXN0X21h",
            "dGhfaG9ub3JfaW5mcxh5IAEoCBIoCiB4bGFfY3B1X2Zhc3RfbWF0aF9ob25v",
            "cl9kaXZpc2lvbhh+IAEoCBIqCiF4bGFfY3B1X2Zhc3RfbWF0aF9ob25vcl9m",
            "dW5jdGlvbnMYgQEgASgIEiMKG3hsYV9ncHVfZW5hYmxlX2Zhc3RfbWluX21h",
            "eBhkIAEoCBIiChp4bGFfYWxsb3dfZXhjZXNzX3ByZWNpc2lvbhh6IAEoCBIu",
            "CiZ4bGFfZ3B1X2NyYXNoX29uX3ZlcmlmaWNhdGlvbl9mYWlsdXJlcxhlIAEo",
            "CBIgChh4bGFfZ3B1X2Rpc2FibGVfYXV0b3R1bmUYeyABKAgSLAokeGxhX2Zv",
            "cmNlX2hvc3RfcGxhdGZvcm1fZGV2aWNlX2NvdW50GGYgASgFEiwKJHhsYV9n",
            "cHVfZGlzYWJsZV9ncHVhc21fb3B0aW1pemF0aW9ucxhnIAEoCBInCh94bGFf",
            "aGxvX2V2YWx1YXRvcl91c2VfZmFzdF9wYXRoGGogASgIEioKInhsYV9hbGxv",
            "d19zY2FsYXJfaW5kZXhfZHluYW1pY19vcHMYayABKAgSRgoYeGxhX3N0ZXBf",
            "bWFya2VyX2xvY2F0aW9uGGwgASgOMiQueGxhLkRlYnVnT3B0aW9ucy5TdGVw",
            "TWFya2VyTG9jYXRpb24SEwoLeGxhX2R1bXBfdG8YbSABKAkSHgoWeGxhX2R1",
            "bXBfaGxvX21vZHVsZV9yZRhuIAEoCRIcChR4bGFfZHVtcF9obG9fcGFzc19y",
            "ZRhvIAEoCRIcChR4bGFfZHVtcF9obG9fYXNfdGV4dBhwIAEoCBIdChV4bGFf",
            "ZHVtcF9obG9fYXNfcHJvdG8YcSABKAgSGwoTeGxhX2R1bXBfaGxvX2FzX2Rv",
            "dBhyIAEoCBIbChN4bGFfZHVtcF9obG9fYXNfdXJsGHMgASgIEhwKFHhsYV9k",
            "dW1wX2hsb19hc19odG1sGHQgASgIEh4KFnhsYV9kdW1wX2hsb19zbmFwc2hv",
            "dHMYdiABKAgSHwoXeGxhX2dwdV9mb3JjZV9jb252X25jaHcYfSABKAgSGAoQ",
            "eGxhX2dwdV9wdHhfZmlsZRh/IAMoCRIpCiB4bGFfZ3B1X2FsZ29yaXRobV9i",
            "bGFja2xpc3RfcGF0aBiAASABKAkSUQoZeGxhX2JhY2tlbmRfZXh0cmFfb3B0",
            "aW9ucxj0AyADKAsyLS54bGEuRGVidWdPcHRpb25zLlhsYUJhY2tlbmRFeHRy",
            "YU9wdGlvbnNFbnRyeRo9ChtYbGFCYWNrZW5kRXh0cmFPcHRpb25zRW50cnkS",
            "CwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKRAQoSU3RlcE1hcmtl",
            "ckxvY2F0aW9uEhYKElNURVBfTUFSS19BVF9FTlRSWRAAEiUKIVNURVBfTUFS",
            "S19BVF9UT1BfTEVWRUxfV0hJTEVfTE9PUBABEigKJFNURVBfTUFSS19BVF9T",
            "RUNPTkRfTEVWRUxfV0hJTEVfTE9PUBADEhIKDlNURVBfTUFSS19OT05FEAJK",
            "BAhdEF5KBAh1EHZKBAgFEAYirwIKEEV4ZWN1dGlvbk9wdGlvbnMSMQoYc2hh",
            "cGVfd2l0aF9vdXRwdXRfbGF5b3V0GAIgASgLMg8ueGxhLlNoYXBlUHJvdG8S",
            "DAoEc2VlZBgDIAEoBBIoCg1kZWJ1Z19vcHRpb25zGAQgASgLMhEueGxhLkRl",
            "YnVnT3B0aW9ucxIpCg5kZXZpY2VfaGFuZGxlcxgFIAMoCzIRLnhsYS5EZXZp",
            "Y2VIYW5kbGUSFAoMbnVtX3JlcGxpY2FzGAYgASgFEjUKEWRldmljZV9hc3Np",
            "Z25tZW50GAcgASgLMhoueGxhLkRldmljZUFzc2lnbm1lbnRQcm90bxIgChhh",
            "bGlhc19wYXNzdGhyb3VnaF9wYXJhbXMYCCABKAgSFgoObnVtX3BhcnRpdGlv",
            "bnMYCSABKAUiLwoXR2V0RGV2aWNlSGFuZGxlc1JlcXVlc3QSFAoMZGV2aWNl",
            "X2NvdW50GAEgASgDIkUKGEdldERldmljZUhhbmRsZXNSZXNwb25zZRIpCg5k",
            "ZXZpY2VfaGFuZGxlcxgBIAMoCzIRLnhsYS5EZXZpY2VIYW5kbGUiagoXVHJh",
            "bnNmZXJUb0NsaWVudFJlcXVlc3QSIwoEZGF0YRgBIAEoCzIVLnhsYS5HbG9i",
            "YWxEYXRhSGFuZGxlEioKEXNoYXBlX3dpdGhfbGF5b3V0GAIgASgLMg8ueGxh",
            "LlNoYXBlUHJvdG8iPgoYVHJhbnNmZXJUb0NsaWVudFJlc3BvbnNlEiIKB2xp",
            "dGVyYWwYASABKAsyES54bGEuTGl0ZXJhbFByb3RvImcKF1RyYW5zZmVyVG9T",
            "ZXJ2ZXJSZXF1ZXN0EiIKB2xpdGVyYWwYASABKAsyES54bGEuTGl0ZXJhbFBy",
            "b3RvEigKDWRldmljZV9oYW5kbGUYAiABKAsyES54bGEuRGV2aWNlSGFuZGxl",
            "Ij8KGFRyYW5zZmVyVG9TZXJ2ZXJSZXNwb25zZRIjCgRkYXRhGAEgASgLMhUu",
            "eGxhLkdsb2JhbERhdGFIYW5kbGUiewoXVHJhbnNmZXJUb0luZmVlZFJlcXVl",
            "c3QSIgoHbGl0ZXJhbBgBIAEoCzIRLnhsYS5MaXRlcmFsUHJvdG8SEgoKcmVw",
            "bGljYV9pZBgCIAEoAxIoCg1kZXZpY2VfaGFuZGxlGAMgASgLMhEueGxhLkRl",
            "dmljZUhhbmRsZSIaChhUcmFuc2ZlclRvSW5mZWVkUmVzcG9uc2UihgEKGlRy",
            "YW5zZmVyRnJvbU91dGZlZWRSZXF1ZXN0EioKEXNoYXBlX3dpdGhfbGF5b3V0",
            "GAEgASgLMg8ueGxhLlNoYXBlUHJvdG8SEgoKcmVwbGljYV9pZBgCIAEoAxIo",
            "Cg1kZXZpY2VfaGFuZGxlGAMgASgLMhEueGxhLkRldmljZUhhbmRsZSJBChtU",
            "cmFuc2ZlckZyb21PdXRmZWVkUmVzcG9uc2USIgoHbGl0ZXJhbBgBIAEoCzIR",
            "LnhsYS5MaXRlcmFsUHJvdG8iPgoSUmVzZXREZXZpY2VSZXF1ZXN0EigKDWRl",
            "dmljZV9oYW5kbGUYASABKAsyES54bGEuRGV2aWNlSGFuZGxlIhUKE1Jlc2V0",
            "RGV2aWNlUmVzcG9uc2UicgocQ29tcHV0YXRpb25HcmFwaFN0YXRzUmVxdWVz",
            "dBIoCgtjb21wdXRhdGlvbhgBIAEoCzITLnhsYS5IbG9Nb2R1bGVQcm90bxIo",
            "Cg1kZWJ1Z19vcHRpb25zGAIgASgLMhEueGxhLkRlYnVnT3B0aW9ucyJAChhD",
            "b21wdXRhdGlvblN0YXRzUmVzcG9uc2USJAoFc3RhdHMYASABKAsyFS54bGEu",
            "Q29tcHV0YXRpb25TdGF0cyJSChpDcmVhdGVDaGFubmVsSGFuZGxlUmVxdWVz",
            "dBI0CgxjaGFubmVsX3R5cGUYASABKA4yHi54bGEuQ2hhbm5lbEhhbmRsZS5D",
            "aGFubmVsVHlwZSJCChtDcmVhdGVDaGFubmVsSGFuZGxlUmVzcG9uc2USIwoH",
            "Y2hhbm5lbBgBIAEoCzISLnhsYS5DaGFubmVsSGFuZGxlIjgKEVVucmVnaXN0",
            "ZXJSZXF1ZXN0EiMKBGRhdGEYASADKAsyFS54bGEuR2xvYmFsRGF0YUhhbmRs",
            "ZSIUChJVbnJlZ2lzdGVyUmVzcG9uc2UingEKDkNvbXBpbGVSZXF1ZXN0EigK",
            "C2NvbXB1dGF0aW9uGAEgASgLMhMueGxhLkhsb01vZHVsZVByb3RvEjAKEWV4",
            "ZWN1dGlvbl9vcHRpb25zGAIgASgLMhUueGxhLkV4ZWN1dGlvbk9wdGlvbnMS",
            "MAoXaW5wdXRfc2hhcGVfd2l0aF9sYXlvdXQYAyADKAsyDy54bGEuU2hhcGVQ",
            "cm90byI3Cg9Db21waWxlUmVzcG9uc2USJAoGaGFuZGxlGAEgASgLMhQueGxh",
            "LkV4ZWN1dGlvbkhhbmRsZSJgCg5FeGVjdXRlUmVxdWVzdBIkCgZoYW5kbGUY",
            "ASABKAsyFC54bGEuRXhlY3V0aW9uSGFuZGxlEigKCWFyZ3VtZW50cxgCIAMo",
            "CzIVLnhsYS5HbG9iYWxEYXRhSGFuZGxlIpsBChNFeGVjdXRlR3JhcGhSZXF1",
            "ZXN0EigKC2NvbXB1dGF0aW9uGAEgASgLMhMueGxhLkhsb01vZHVsZVByb3Rv",
            "EigKCWFyZ3VtZW50cxgCIAMoCzIVLnhsYS5HbG9iYWxEYXRhSGFuZGxlEjAK",
            "EWV4ZWN1dGlvbl9vcHRpb25zGAMgASgLMhUueGxhLkV4ZWN1dGlvbk9wdGlv",
            "bnMiSQobRXhlY3V0ZUdyYXBoUGFyYWxsZWxSZXF1ZXN0EioKCHJlcXVlc3Rz",
            "GAEgAygLMhgueGxhLkV4ZWN1dGVHcmFwaFJlcXVlc3QiYAoPRXhlY3V0ZVJl",
            "c3BvbnNlEiUKBm91dHB1dBgBIAEoCzIVLnhsYS5HbG9iYWxEYXRhSGFuZGxl",
            "EiYKB3Byb2ZpbGUYAiABKAsyFS54bGEuRXhlY3V0aW9uUHJvZmlsZSJCChdF",
            "eGVjdXRlUGFyYWxsZWxSZXNwb25zZRInCglyZXNwb25zZXMYASADKAsyFC54",
            "bGEuRXhlY3V0ZVJlc3BvbnNlIkIKF1dhaXRGb3JFeGVjdXRpb25SZXF1ZXN0",
            "EicKCWV4ZWN1dGlvbhgBIAEoCzIULnhsYS5FeGVjdXRpb25IYW5kbGUiaQoY",
            "V2FpdEZvckV4ZWN1dGlvblJlc3BvbnNlEiUKBm91dHB1dBgBIAEoCzIVLnhs",
            "YS5HbG9iYWxEYXRhSGFuZGxlEiYKB3Byb2ZpbGUYAiABKAsyFS54bGEuRXhl",
            "Y3V0aW9uUHJvZmlsZSJwChtDb21wdXRlQ29uc3RhbnRHcmFwaFJlcXVlc3QS",
            "KAoLY29tcHV0YXRpb24YASABKAsyEy54bGEuSGxvTW9kdWxlUHJvdG8SJwoN",
            "b3V0cHV0X2xheW91dBgCIAEoCzIQLnhsYS5MYXlvdXRQcm90byI9ChdDb21w",
            "dXRlQ29uc3RhbnRSZXNwb25zZRIiCgdsaXRlcmFsGAEgASgLMhEueGxhLkxp",
            "dGVyYWxQcm90byJGChdEZWNvbnN0cnVjdFR1cGxlUmVxdWVzdBIrCgx0dXBs",
            "ZV9oYW5kbGUYAiABKAsyFS54bGEuR2xvYmFsRGF0YUhhbmRsZSJKChhEZWNv",
            "bnN0cnVjdFR1cGxlUmVzcG9uc2USLgoPZWxlbWVudF9oYW5kbGVzGAEgAygL",
            "MhUueGxhLkdsb2JhbERhdGFIYW5kbGUimwEKD0xvYWREYXRhUmVxdWVzdBIc",
            "ChRjb2x1bW5pb190YWJsZXRfcGF0aBgBIAEoCRIWCg5jb2x1bW5pb19maWVs",
            "ZBgCIAEoCRImCg1lbGVtZW50X3NoYXBlGAMgASgLMg8ueGxhLlNoYXBlUHJv",
            "dG8SDgoGb2Zmc2V0GAQgASgDEg0KBWxpbWl0GAUgASgDEgsKA3ppcBgGIAEo",
            "CCKeAQoQTG9hZERhdGFSZXNwb25zZRIjCgRkYXRhGAEgASgLMhUueGxhLkds",
            "b2JhbERhdGFIYW5kbGUSIwoKZGF0YV9zaGFwZRgCIAEoCzIPLnhsYS5TaGFw",
            "ZVByb3RvEhYKDmF2YWlsYWJsZV9yb3dzGAMgASgDEhMKC3Jvd3NfbG9hZGVk",
            "GAQgASgDEhMKC25hbm9zZWNvbmRzGAUgASgDIjYKD0dldFNoYXBlUmVxdWVz",
            "dBIjCgRkYXRhGAEgASgLMhUueGxhLkdsb2JhbERhdGFIYW5kbGUiMgoQR2V0",
            "U2hhcGVSZXNwb25zZRIeCgVzaGFwZRgBIAEoCzIPLnhsYS5TaGFwZVByb3Rv",
            "IjQKDVVucGFja1JlcXVlc3QSIwoEZGF0YRgBIAEoCzIVLnhsYS5HbG9iYWxE",
            "YXRhSGFuZGxlIjoKDlVucGFja1Jlc3BvbnNlEigKCXRpZWRfZGF0YRgBIAMo",
            "CzIVLnhsYS5HbG9iYWxEYXRhSGFuZGxlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xla.HloReflection.Descriptor, global::Xla.XlaDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.HloReducePrecisionOptions), global::Xla.HloReducePrecisionOptions.Parser, new[]{ "Location", "ExponentBits", "MantissaBits", "OpcodesToSuffix", "OpnameSubstringsToSuffix" }, null, new[]{ typeof(global::Xla.HloReducePrecisionOptions.Types.Location) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.DebugOptions), global::Xla.DebugOptions.Parser, new[]{ "XlaHloGraphAddresses", "XlaHloProfile", "XlaDisableHloPasses", "XlaEnableHloPassesOnly", "XlaDisableAllHloPasses", "XlaBackendOptimizationLevel", "XlaEmbedIrInExecutable", "XlaEliminateHloImplicitBroadcast", "XlaCpuMultiThreadEigen", "XlaGpuCudaDataDir", "XlaGpuFtz", "XlaGpuDisableMultiStreaming", "XlaLlvmEnableAliasScopeMetadata", "XlaLlvmEnableNoaliasMetadata", "XlaLlvmEnableInvariantLoadMetadata", "XlaLlvmDisableExpensivePasses", "HloReducePrecisionOptions", "XlaTestAllOutputLayouts", "XlaTestAllInputLayouts", "XlaHloGraphShardingColor", "XlaGpuUseCudnnBatchnorm", "XlaCpuUseMklDnn", "XlaGpuMaxKernelUnrollFactor", "XlaCpuEnableFastMath", "XlaCpuFastMathHonorNans", "XlaCpuFastMathHonorInfs", "XlaCpuFastMathHonorDivision", "XlaCpuFastMathHonorFunctions", "XlaGpuEnableFastMinMax", "XlaAllowExcessPrecision", "XlaGpuCrashOnVerificationFailures", "XlaGpuDisableAutotune", "XlaForceHostPlatformDeviceCount", "XlaGpuDisableGpuasmOptimizations", "XlaHloEvaluatorUseFastPath", "XlaAllowScalarIndexDynamicOps", "XlaStepMarkerLocation", "XlaDumpTo", "XlaDumpHloModuleRe", "XlaDumpHloPassRe", "XlaDumpHloAsText", "XlaDumpHloAsProto", "XlaDumpHloAsDot", "XlaDumpHloAsUrl", "XlaDumpHloAsHtml", "XlaDumpHloSnapshots", "XlaGpuForceConvNchw", "XlaGpuPtxFile", "XlaGpuAlgorithmBlacklistPath", "XlaBackendExtraOptions" }, null, new[]{ typeof(global::Xla.DebugOptions.Types.StepMarkerLocation) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ExecutionOptions), global::Xla.ExecutionOptions.Parser, new[]{ "ShapeWithOutputLayout", "Seed", "DebugOptions", "DeviceHandles", "NumReplicas", "DeviceAssignment", "AliasPassthroughParams", "NumPartitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.GetDeviceHandlesRequest), global::Xla.GetDeviceHandlesRequest.Parser, new[]{ "DeviceCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.GetDeviceHandlesResponse), global::Xla.GetDeviceHandlesResponse.Parser, new[]{ "DeviceHandles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.TransferToClientRequest), global::Xla.TransferToClientRequest.Parser, new[]{ "Data", "ShapeWithLayout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.TransferToClientResponse), global::Xla.TransferToClientResponse.Parser, new[]{ "Literal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.TransferToServerRequest), global::Xla.TransferToServerRequest.Parser, new[]{ "Literal", "DeviceHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.TransferToServerResponse), global::Xla.TransferToServerResponse.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.TransferToInfeedRequest), global::Xla.TransferToInfeedRequest.Parser, new[]{ "Literal", "ReplicaId", "DeviceHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.TransferToInfeedResponse), global::Xla.TransferToInfeedResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.TransferFromOutfeedRequest), global::Xla.TransferFromOutfeedRequest.Parser, new[]{ "ShapeWithLayout", "ReplicaId", "DeviceHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.TransferFromOutfeedResponse), global::Xla.TransferFromOutfeedResponse.Parser, new[]{ "Literal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ResetDeviceRequest), global::Xla.ResetDeviceRequest.Parser, new[]{ "DeviceHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ResetDeviceResponse), global::Xla.ResetDeviceResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ComputationGraphStatsRequest), global::Xla.ComputationGraphStatsRequest.Parser, new[]{ "Computation", "DebugOptions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ComputationStatsResponse), global::Xla.ComputationStatsResponse.Parser, new[]{ "Stats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.CreateChannelHandleRequest), global::Xla.CreateChannelHandleRequest.Parser, new[]{ "ChannelType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.CreateChannelHandleResponse), global::Xla.CreateChannelHandleResponse.Parser, new[]{ "Channel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.UnregisterRequest), global::Xla.UnregisterRequest.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.UnregisterResponse), global::Xla.UnregisterResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.CompileRequest), global::Xla.CompileRequest.Parser, new[]{ "Computation", "ExecutionOptions", "InputShapeWithLayout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.CompileResponse), global::Xla.CompileResponse.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ExecuteRequest), global::Xla.ExecuteRequest.Parser, new[]{ "Handle", "Arguments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ExecuteGraphRequest), global::Xla.ExecuteGraphRequest.Parser, new[]{ "Computation", "Arguments", "ExecutionOptions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ExecuteGraphParallelRequest), global::Xla.ExecuteGraphParallelRequest.Parser, new[]{ "Requests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ExecuteResponse), global::Xla.ExecuteResponse.Parser, new[]{ "Output", "Profile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ExecuteParallelResponse), global::Xla.ExecuteParallelResponse.Parser, new[]{ "Responses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.WaitForExecutionRequest), global::Xla.WaitForExecutionRequest.Parser, new[]{ "Execution" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.WaitForExecutionResponse), global::Xla.WaitForExecutionResponse.Parser, new[]{ "Output", "Profile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ComputeConstantGraphRequest), global::Xla.ComputeConstantGraphRequest.Parser, new[]{ "Computation", "OutputLayout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.ComputeConstantResponse), global::Xla.ComputeConstantResponse.Parser, new[]{ "Literal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.DeconstructTupleRequest), global::Xla.DeconstructTupleRequest.Parser, new[]{ "TupleHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.DeconstructTupleResponse), global::Xla.DeconstructTupleResponse.Parser, new[]{ "ElementHandles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.LoadDataRequest), global::Xla.LoadDataRequest.Parser, new[]{ "ColumnioTabletPath", "ColumnioField", "ElementShape", "Offset", "Limit", "Zip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.LoadDataResponse), global::Xla.LoadDataResponse.Parser, new[]{ "Data", "DataShape", "AvailableRows", "RowsLoaded", "Nanoseconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.GetShapeRequest), global::Xla.GetShapeRequest.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.GetShapeResponse), global::Xla.GetShapeResponse.Parser, new[]{ "Shape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.UnpackRequest), global::Xla.UnpackRequest.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.UnpackResponse), global::Xla.UnpackResponse.Parser, new[]{ "TiedData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Options for the HLO insert-reduce-precision-operations pass.
  /// </summary>
  public sealed partial class HloReducePrecisionOptions : pb::IMessage<HloReducePrecisionOptions> {
    private static readonly pb::MessageParser<HloReducePrecisionOptions> _parser = new pb::MessageParser<HloReducePrecisionOptions>(() => new HloReducePrecisionOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HloReducePrecisionOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HloReducePrecisionOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HloReducePrecisionOptions(HloReducePrecisionOptions other) : this() {
      location_ = other.location_;
      exponentBits_ = other.exponentBits_;
      mantissaBits_ = other.mantissaBits_;
      opcodesToSuffix_ = other.opcodesToSuffix_.Clone();
      opnameSubstringsToSuffix_ = other.opnameSubstringsToSuffix_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HloReducePrecisionOptions Clone() {
      return new HloReducePrecisionOptions(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Xla.HloReducePrecisionOptions.Types.Location location_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.HloReducePrecisionOptions.Types.Location Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "exponent_bits" field.</summary>
    public const int ExponentBitsFieldNumber = 2;
    private uint exponentBits_;
    /// <summary>
    /// Exponent and mantissa bit counts for the reduced precision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExponentBits {
      get { return exponentBits_; }
      set {
        exponentBits_ = value;
      }
    }

    /// <summary>Field number for the "mantissa_bits" field.</summary>
    public const int MantissaBitsFieldNumber = 3;
    private uint mantissaBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MantissaBits {
      get { return mantissaBits_; }
      set {
        mantissaBits_ = value;
      }
    }

    /// <summary>Field number for the "opcodes_to_suffix" field.</summary>
    public const int OpcodesToSuffixFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_opcodesToSuffix_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> opcodesToSuffix_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Operations matching these opcodes should be suffixed with reduce-precision
    /// operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OpcodesToSuffix {
      get { return opcodesToSuffix_; }
    }

    /// <summary>Field number for the "opname_substrings_to_suffix" field.</summary>
    public const int OpnameSubstringsToSuffixFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_opnameSubstringsToSuffix_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> opnameSubstringsToSuffix_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Operations with names containing these substrings should be suffixed with
    /// reduce-precision operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OpnameSubstringsToSuffix {
      get { return opnameSubstringsToSuffix_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HloReducePrecisionOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HloReducePrecisionOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Location != other.Location) return false;
      if (ExponentBits != other.ExponentBits) return false;
      if (MantissaBits != other.MantissaBits) return false;
      if(!opcodesToSuffix_.Equals(other.opcodesToSuffix_)) return false;
      if(!opnameSubstringsToSuffix_.Equals(other.opnameSubstringsToSuffix_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Location != 0) hash ^= Location.GetHashCode();
      if (ExponentBits != 0) hash ^= ExponentBits.GetHashCode();
      if (MantissaBits != 0) hash ^= MantissaBits.GetHashCode();
      hash ^= opcodesToSuffix_.GetHashCode();
      hash ^= opnameSubstringsToSuffix_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Location != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Location);
      }
      if (ExponentBits != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExponentBits);
      }
      if (MantissaBits != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MantissaBits);
      }
      opcodesToSuffix_.WriteTo(output, _repeated_opcodesToSuffix_codec);
      opnameSubstringsToSuffix_.WriteTo(output, _repeated_opnameSubstringsToSuffix_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Location);
      }
      if (ExponentBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExponentBits);
      }
      if (MantissaBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MantissaBits);
      }
      size += opcodesToSuffix_.CalculateSize(_repeated_opcodesToSuffix_codec);
      size += opnameSubstringsToSuffix_.CalculateSize(_repeated_opnameSubstringsToSuffix_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HloReducePrecisionOptions other) {
      if (other == null) {
        return;
      }
      if (other.Location != 0) {
        Location = other.Location;
      }
      if (other.ExponentBits != 0) {
        ExponentBits = other.ExponentBits;
      }
      if (other.MantissaBits != 0) {
        MantissaBits = other.MantissaBits;
      }
      opcodesToSuffix_.Add(other.opcodesToSuffix_);
      opnameSubstringsToSuffix_.Add(other.opnameSubstringsToSuffix_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Location = (global::Xla.HloReducePrecisionOptions.Types.Location) input.ReadEnum();
            break;
          }
          case 16: {
            ExponentBits = input.ReadUInt32();
            break;
          }
          case 24: {
            MantissaBits = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            opcodesToSuffix_.AddEntriesFrom(input, _repeated_opcodesToSuffix_codec);
            break;
          }
          case 42: {
            opnameSubstringsToSuffix_.AddEntriesFrom(input, _repeated_opnameSubstringsToSuffix_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HloReducePrecisionOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Where and when the reduce-precision operations will be added.
      /// </summary>
      public enum Location {
        /// <summary>
        /// Add reduce-precision operations to the inputs of selected instructions.
        /// This is done before any optimization occurs.
        /// </summary>
        [pbr::OriginalName("OP_INPUTS")] OpInputs = 0,
        /// <summary>
        /// Add reduce-precision operations to the outputs of selected instructions.
        /// This is done before any optimization occurs.
        /// </summary>
        [pbr::OriginalName("OP_OUTPUTS")] OpOutputs = 1,
        /// <summary>
        /// After operation-fusion occurs, add reduce-precision operations to the
        /// outputs of any selected instructions that have not been fused into
        /// fusion instructions.
        /// </summary>
        [pbr::OriginalName("UNFUSED_OP_OUTPUTS")] UnfusedOpOutputs = 2,
        /// <summary>
        /// After operation-fusion occurs, add reduce-precision operations to the
        /// outputs of any fusion instructions that contain operations matching the
        /// selection criteria.
        /// </summary>
        [pbr::OriginalName("FUSION_INPUTS_BY_CONTENT")] FusionInputsByContent = 3,
        /// <summary>
        /// After operation-fusion occurs, add reduce-precision operations to the
        /// outputs of any fusion instructions that contain operations matching the
        /// selection criteria.
        /// </summary>
        [pbr::OriginalName("FUSION_OUTPUTS_BY_CONTENT")] FusionOutputsByContent = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Debugging options for XLA. These options may change at any time - there are
  /// no guarantees about backward or forward compatibility for these fields.
  /// </summary>
  public sealed partial class DebugOptions : pb::IMessage<DebugOptions> {
    private static readonly pb::MessageParser<DebugOptions> _parser = new pb::MessageParser<DebugOptions>(() => new DebugOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugOptions(DebugOptions other) : this() {
      xlaHloGraphAddresses_ = other.xlaHloGraphAddresses_;
      xlaHloProfile_ = other.xlaHloProfile_;
      xlaDisableHloPasses_ = other.xlaDisableHloPasses_.Clone();
      xlaEnableHloPassesOnly_ = other.xlaEnableHloPassesOnly_.Clone();
      xlaDisableAllHloPasses_ = other.xlaDisableAllHloPasses_;
      xlaBackendOptimizationLevel_ = other.xlaBackendOptimizationLevel_;
      xlaEmbedIrInExecutable_ = other.xlaEmbedIrInExecutable_;
      xlaEliminateHloImplicitBroadcast_ = other.xlaEliminateHloImplicitBroadcast_;
      xlaCpuMultiThreadEigen_ = other.xlaCpuMultiThreadEigen_;
      xlaGpuCudaDataDir_ = other.xlaGpuCudaDataDir_;
      xlaGpuFtz_ = other.xlaGpuFtz_;
      xlaGpuDisableMultiStreaming_ = other.xlaGpuDisableMultiStreaming_;
      xlaLlvmEnableAliasScopeMetadata_ = other.xlaLlvmEnableAliasScopeMetadata_;
      xlaLlvmEnableNoaliasMetadata_ = other.xlaLlvmEnableNoaliasMetadata_;
      xlaLlvmEnableInvariantLoadMetadata_ = other.xlaLlvmEnableInvariantLoadMetadata_;
      xlaLlvmDisableExpensivePasses_ = other.xlaLlvmDisableExpensivePasses_;
      hloReducePrecisionOptions_ = other.hloReducePrecisionOptions_.Clone();
      xlaTestAllOutputLayouts_ = other.xlaTestAllOutputLayouts_;
      xlaTestAllInputLayouts_ = other.xlaTestAllInputLayouts_;
      xlaHloGraphShardingColor_ = other.xlaHloGraphShardingColor_;
      xlaGpuUseCudnnBatchnorm_ = other.xlaGpuUseCudnnBatchnorm_;
      xlaCpuUseMklDnn_ = other.xlaCpuUseMklDnn_;
      xlaGpuMaxKernelUnrollFactor_ = other.xlaGpuMaxKernelUnrollFactor_;
      xlaCpuEnableFastMath_ = other.xlaCpuEnableFastMath_;
      xlaCpuFastMathHonorNans_ = other.xlaCpuFastMathHonorNans_;
      xlaCpuFastMathHonorInfs_ = other.xlaCpuFastMathHonorInfs_;
      xlaCpuFastMathHonorDivision_ = other.xlaCpuFastMathHonorDivision_;
      xlaCpuFastMathHonorFunctions_ = other.xlaCpuFastMathHonorFunctions_;
      xlaGpuEnableFastMinMax_ = other.xlaGpuEnableFastMinMax_;
      xlaAllowExcessPrecision_ = other.xlaAllowExcessPrecision_;
      xlaGpuCrashOnVerificationFailures_ = other.xlaGpuCrashOnVerificationFailures_;
      xlaGpuDisableAutotune_ = other.xlaGpuDisableAutotune_;
      xlaForceHostPlatformDeviceCount_ = other.xlaForceHostPlatformDeviceCount_;
      xlaGpuDisableGpuasmOptimizations_ = other.xlaGpuDisableGpuasmOptimizations_;
      xlaHloEvaluatorUseFastPath_ = other.xlaHloEvaluatorUseFastPath_;
      xlaAllowScalarIndexDynamicOps_ = other.xlaAllowScalarIndexDynamicOps_;
      xlaStepMarkerLocation_ = other.xlaStepMarkerLocation_;
      xlaDumpTo_ = other.xlaDumpTo_;
      xlaDumpHloModuleRe_ = other.xlaDumpHloModuleRe_;
      xlaDumpHloPassRe_ = other.xlaDumpHloPassRe_;
      xlaDumpHloAsText_ = other.xlaDumpHloAsText_;
      xlaDumpHloAsProto_ = other.xlaDumpHloAsProto_;
      xlaDumpHloAsDot_ = other.xlaDumpHloAsDot_;
      xlaDumpHloAsUrl_ = other.xlaDumpHloAsUrl_;
      xlaDumpHloAsHtml_ = other.xlaDumpHloAsHtml_;
      xlaDumpHloSnapshots_ = other.xlaDumpHloSnapshots_;
      xlaGpuForceConvNchw_ = other.xlaGpuForceConvNchw_;
      xlaGpuPtxFile_ = other.xlaGpuPtxFile_.Clone();
      xlaGpuAlgorithmBlacklistPath_ = other.xlaGpuAlgorithmBlacklistPath_;
      xlaBackendExtraOptions_ = other.xlaBackendExtraOptions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugOptions Clone() {
      return new DebugOptions(this);
    }

    /// <summary>Field number for the "xla_hlo_graph_addresses" field.</summary>
    public const int XlaHloGraphAddressesFieldNumber = 2;
    private bool xlaHloGraphAddresses_;
    /// <summary>
    /// Show addresses of HLO ops in graph dump.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaHloGraphAddresses {
      get { return xlaHloGraphAddresses_; }
      set {
        xlaHloGraphAddresses_ = value;
      }
    }

    /// <summary>Field number for the "xla_hlo_profile" field.</summary>
    public const int XlaHloProfileFieldNumber = 9;
    private bool xlaHloProfile_;
    /// <summary>
    /// Instrument the computation to collect per-HLO cycle counts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaHloProfile {
      get { return xlaHloProfile_; }
      set {
        xlaHloProfile_ = value;
      }
    }

    /// <summary>Field number for the "xla_disable_hlo_passes" field.</summary>
    public const int XlaDisableHloPassesFieldNumber = 30;
    private static readonly pb::FieldCodec<string> _repeated_xlaDisableHloPasses_codec
        = pb::FieldCodec.ForString(242);
    private readonly pbc::RepeatedField<string> xlaDisableHloPasses_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of HLO passes to disable/enable. These names must exactly match the
    /// pass names as specified by the HloPassInterface::name() method.
    ///
    /// At least one of xla_disable_hlo_passes and xla_enable_hlo_passes_only must
    /// be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> XlaDisableHloPasses {
      get { return xlaDisableHloPasses_; }
    }

    /// <summary>Field number for the "xla_enable_hlo_passes_only" field.</summary>
    public const int XlaEnableHloPassesOnlyFieldNumber = 124;
    private static readonly pb::FieldCodec<string> _repeated_xlaEnableHloPassesOnly_codec
        = pb::FieldCodec.ForString(994);
    private readonly pbc::RepeatedField<string> xlaEnableHloPassesOnly_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> XlaEnableHloPassesOnly {
      get { return xlaEnableHloPassesOnly_; }
    }

    /// <summary>Field number for the "xla_disable_all_hlo_passes" field.</summary>
    public const int XlaDisableAllHloPassesFieldNumber = 104;
    private bool xlaDisableAllHloPasses_;
    /// <summary>
    /// Disables all HLO passes.  Notes that some passes are necessary for
    /// correctness and the invariants that must be satisfied by "fully optimized"
    /// HLO are different for different devices and may change over time.  The only
    /// "guarantee", such as it is, is that if you compile XLA and dump the
    /// optimized HLO for some graph, you should be able to run it again on the
    /// same device with the same build of XLA.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaDisableAllHloPasses {
      get { return xlaDisableAllHloPasses_; }
      set {
        xlaDisableAllHloPasses_ = value;
      }
    }

    /// <summary>Field number for the "xla_backend_optimization_level" field.</summary>
    public const int XlaBackendOptimizationLevelFieldNumber = 31;
    private int xlaBackendOptimizationLevel_;
    /// <summary>
    /// Numerical optimization level for the XLA compiler backend; the specific
    /// interpretation of this value is left to the backends.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XlaBackendOptimizationLevel {
      get { return xlaBackendOptimizationLevel_; }
      set {
        xlaBackendOptimizationLevel_ = value;
      }
    }

    /// <summary>Field number for the "xla_embed_ir_in_executable" field.</summary>
    public const int XlaEmbedIrInExecutableFieldNumber = 33;
    private bool xlaEmbedIrInExecutable_;
    /// <summary>
    /// Embed the compiler IR as a string in the executable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaEmbedIrInExecutable {
      get { return xlaEmbedIrInExecutable_; }
      set {
        xlaEmbedIrInExecutable_ = value;
      }
    }

    /// <summary>Field number for the "xla_eliminate_hlo_implicit_broadcast" field.</summary>
    public const int XlaEliminateHloImplicitBroadcastFieldNumber = 35;
    private bool xlaEliminateHloImplicitBroadcast_;
    /// <summary>
    /// Eliminate implicit broadcasts when lowering user computations to HLO
    /// instructions; use explicit broadcast instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaEliminateHloImplicitBroadcast {
      get { return xlaEliminateHloImplicitBroadcast_; }
      set {
        xlaEliminateHloImplicitBroadcast_ = value;
      }
    }

    /// <summary>Field number for the "xla_cpu_multi_thread_eigen" field.</summary>
    public const int XlaCpuMultiThreadEigenFieldNumber = 60;
    private bool xlaCpuMultiThreadEigen_;
    /// <summary>
    /// When generating calls to Eigen in the CPU backend, use multi-threaded Eigen
    /// mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaCpuMultiThreadEigen {
      get { return xlaCpuMultiThreadEigen_; }
      set {
        xlaCpuMultiThreadEigen_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_cuda_data_dir" field.</summary>
    public const int XlaGpuCudaDataDirFieldNumber = 61;
    private string xlaGpuCudaDataDir_ = "";
    /// <summary>
    /// Path to directory with cuda/ptx tools and libraries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XlaGpuCudaDataDir {
      get { return xlaGpuCudaDataDir_; }
      set {
        xlaGpuCudaDataDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xla_gpu_ftz" field.</summary>
    public const int XlaGpuFtzFieldNumber = 62;
    private bool xlaGpuFtz_;
    /// <summary>
    /// Enable flush-to-zero semantics in the GPU backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaGpuFtz {
      get { return xlaGpuFtz_; }
      set {
        xlaGpuFtz_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_disable_multi_streaming" field.</summary>
    public const int XlaGpuDisableMultiStreamingFieldNumber = 63;
    private bool xlaGpuDisableMultiStreaming_;
    /// <summary>
    /// Disable multi-streaming in the GPU backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaGpuDisableMultiStreaming {
      get { return xlaGpuDisableMultiStreaming_; }
      set {
        xlaGpuDisableMultiStreaming_ = value;
      }
    }

    /// <summary>Field number for the "xla_llvm_enable_alias_scope_metadata" field.</summary>
    public const int XlaLlvmEnableAliasScopeMetadataFieldNumber = 70;
    private bool xlaLlvmEnableAliasScopeMetadata_;
    /// <summary>
    /// If true, in LLVM-based backends, emit !alias.scope metadata in
    /// generated IR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaLlvmEnableAliasScopeMetadata {
      get { return xlaLlvmEnableAliasScopeMetadata_; }
      set {
        xlaLlvmEnableAliasScopeMetadata_ = value;
      }
    }

    /// <summary>Field number for the "xla_llvm_enable_noalias_metadata" field.</summary>
    public const int XlaLlvmEnableNoaliasMetadataFieldNumber = 71;
    private bool xlaLlvmEnableNoaliasMetadata_;
    /// <summary>
    /// If true, in LLVM-based backends, emit !noalias metadata in the
    /// generated IR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaLlvmEnableNoaliasMetadata {
      get { return xlaLlvmEnableNoaliasMetadata_; }
      set {
        xlaLlvmEnableNoaliasMetadata_ = value;
      }
    }

    /// <summary>Field number for the "xla_llvm_enable_invariant_load_metadata" field.</summary>
    public const int XlaLlvmEnableInvariantLoadMetadataFieldNumber = 72;
    private bool xlaLlvmEnableInvariantLoadMetadata_;
    /// <summary>
    /// If true, in LLVM-based backends, emit !invariant.load metadata in
    /// the generated IR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaLlvmEnableInvariantLoadMetadata {
      get { return xlaLlvmEnableInvariantLoadMetadata_; }
      set {
        xlaLlvmEnableInvariantLoadMetadata_ = value;
      }
    }

    /// <summary>Field number for the "xla_llvm_disable_expensive_passes" field.</summary>
    public const int XlaLlvmDisableExpensivePassesFieldNumber = 73;
    private bool xlaLlvmDisableExpensivePasses_;
    /// <summary>
    /// If true, a set of expensive LLVM optimization passes will not be run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaLlvmDisableExpensivePasses {
      get { return xlaLlvmDisableExpensivePasses_; }
      set {
        xlaLlvmDisableExpensivePasses_ = value;
      }
    }

    /// <summary>Field number for the "hlo_reduce_precision_options" field.</summary>
    public const int HloReducePrecisionOptionsFieldNumber = 80;
    private static readonly pb::FieldCodec<global::Xla.HloReducePrecisionOptions> _repeated_hloReducePrecisionOptions_codec
        = pb::FieldCodec.ForMessage(642, global::Xla.HloReducePrecisionOptions.Parser);
    private readonly pbc::RepeatedField<global::Xla.HloReducePrecisionOptions> hloReducePrecisionOptions_ = new pbc::RepeatedField<global::Xla.HloReducePrecisionOptions>();
    /// <summary>
    /// Options for inserting reduce-precision operations for numerical
    /// experimentation.  This is a repeated field, as we may want to have
    /// multiple passes with different parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.HloReducePrecisionOptions> HloReducePrecisionOptions {
      get { return hloReducePrecisionOptions_; }
    }

    /// <summary>Field number for the "xla_test_all_output_layouts" field.</summary>
    public const int XlaTestAllOutputLayoutsFieldNumber = 90;
    private bool xlaTestAllOutputLayouts_;
    /// <summary>
    /// This is used by ClientLibraryTestBase::ComputeAndCompare*. If true, the
    /// computation will run n! times with all permunations of layouts for the
    /// output shape in rank n. For example, with a 3D shape, all permutations of
    /// the set {0, 1, 2} are tried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaTestAllOutputLayouts {
      get { return xlaTestAllOutputLayouts_; }
      set {
        xlaTestAllOutputLayouts_ = value;
      }
    }

    /// <summary>Field number for the "xla_test_all_input_layouts" field.</summary>
    public const int XlaTestAllInputLayoutsFieldNumber = 91;
    private bool xlaTestAllInputLayouts_;
    /// <summary>
    /// This is used by ClientLibraryTestBase::ComputeAndCompare*. If true, the
    /// computation will run for all permunations of layouts of all input
    /// arguments. For example, with 2 input arguments in 2D and 4D shapes, the
    /// computation will run 2! * 4! times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaTestAllInputLayouts {
      get { return xlaTestAllInputLayouts_; }
      set {
        xlaTestAllInputLayouts_ = value;
      }
    }

    /// <summary>Field number for the "xla_hlo_graph_sharding_color" field.</summary>
    public const int XlaHloGraphShardingColorFieldNumber = 92;
    private bool xlaHloGraphShardingColor_;
    /// <summary>
    /// Assign colors based on sharding information when generating the Graphviz
    /// HLO graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaHloGraphShardingColor {
      get { return xlaHloGraphShardingColor_; }
      set {
        xlaHloGraphShardingColor_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_use_cudnn_batchnorm" field.</summary>
    public const int XlaGpuUseCudnnBatchnormFieldNumber = 94;
    private bool xlaGpuUseCudnnBatchnorm_;
    /// <summary>
    /// If true, the GPU backend is free to use cudnn for HLO batch normalization
    /// ops.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaGpuUseCudnnBatchnorm {
      get { return xlaGpuUseCudnnBatchnorm_; }
      set {
        xlaGpuUseCudnnBatchnorm_ = value;
      }
    }

    /// <summary>Field number for the "xla_cpu_use_mkl_dnn" field.</summary>
    public const int XlaCpuUseMklDnnFieldNumber = 97;
    private bool xlaCpuUseMklDnn_;
    /// <summary>
    /// Generate calls to MKL-DNN in the CPU backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaCpuUseMklDnn {
      get { return xlaCpuUseMklDnn_; }
      set {
        xlaCpuUseMklDnn_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_max_kernel_unroll_factor" field.</summary>
    public const int XlaGpuMaxKernelUnrollFactorFieldNumber = 98;
    private int xlaGpuMaxKernelUnrollFactor_;
    /// <summary>
    /// Maximum kernel unroll factor for the GPU backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XlaGpuMaxKernelUnrollFactor {
      get { return xlaGpuMaxKernelUnrollFactor_; }
      set {
        xlaGpuMaxKernelUnrollFactor_ = value;
      }
    }

    /// <summary>Field number for the "xla_cpu_enable_fast_math" field.</summary>
    public const int XlaCpuEnableFastMathFieldNumber = 99;
    private bool xlaCpuEnableFastMath_;
    /// <summary>
    /// When true, "unsafe" mathematical optimizations are enabled. These
    /// transformations include but are not limited to:
    ///
    ///  - Reducing the precision of operations (e.g. using an approximate sin
    ///    function, or transforming x/y into x * (1/y)).
    ///  - Assuming that operations never produce or consume NaN or +/- Inf (this
    ///    behavior can be adjusted using xla_cpu_fast_math_allow_{nans|infs}).
    ///  - Assuming that +0 and -0 are indistinguishable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaCpuEnableFastMath {
      get { return xlaCpuEnableFastMath_; }
      set {
        xlaCpuEnableFastMath_ = value;
      }
    }

    /// <summary>Field number for the "xla_cpu_fast_math_honor_nans" field.</summary>
    public const int XlaCpuFastMathHonorNansFieldNumber = 120;
    private bool xlaCpuFastMathHonorNans_;
    /// <summary>
    /// When xla_cpu_enable_fast_math is true then this controls whether we allow
    /// operations to produce NaNs.  Ignored when xla_cpu_enable_fast_math is
    /// false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaCpuFastMathHonorNans {
      get { return xlaCpuFastMathHonorNans_; }
      set {
        xlaCpuFastMathHonorNans_ = value;
      }
    }

    /// <summary>Field number for the "xla_cpu_fast_math_honor_infs" field.</summary>
    public const int XlaCpuFastMathHonorInfsFieldNumber = 121;
    private bool xlaCpuFastMathHonorInfs_;
    /// <summary>
    /// When xla_cpu_enable_fast_math is true then this controls whether we allow
    /// operations to produce infinites. Ignored when xla_cpu_enable_fast_math is
    /// false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaCpuFastMathHonorInfs {
      get { return xlaCpuFastMathHonorInfs_; }
      set {
        xlaCpuFastMathHonorInfs_ = value;
      }
    }

    /// <summary>Field number for the "xla_cpu_fast_math_honor_division" field.</summary>
    public const int XlaCpuFastMathHonorDivisionFieldNumber = 126;
    private bool xlaCpuFastMathHonorDivision_;
    /// <summary>
    /// When xla_cpu_enable_fast_math is true then this controls whether we forbid
    /// to use the reciprocal of an argument instead of division. Ignored when
    /// xla_cpu_enable_fast_math is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaCpuFastMathHonorDivision {
      get { return xlaCpuFastMathHonorDivision_; }
      set {
        xlaCpuFastMathHonorDivision_ = value;
      }
    }

    /// <summary>Field number for the "xla_cpu_fast_math_honor_functions" field.</summary>
    public const int XlaCpuFastMathHonorFunctionsFieldNumber = 129;
    private bool xlaCpuFastMathHonorFunctions_;
    /// <summary>
    /// When xla_cpu_enable_fast_math is true then this controls whether we forbid
    /// to approximate calculations for functions. Ignored when
    /// xla_cpu_enable_fast_math is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaCpuFastMathHonorFunctions {
      get { return xlaCpuFastMathHonorFunctions_; }
      set {
        xlaCpuFastMathHonorFunctions_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_enable_fast_min_max" field.</summary>
    public const int XlaGpuEnableFastMinMaxFieldNumber = 100;
    private bool xlaGpuEnableFastMinMax_;
    /// <summary>
    /// When true we lower the Minimum and Maximum hlos in the GPU backend such
    /// that Min(NotNaN, NaN) = Min(NaN, NotNaN) = NotNaN.  In other words, if flag
    /// this is true we don't propagate NaNs through Min and Max.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaGpuEnableFastMinMax {
      get { return xlaGpuEnableFastMinMax_; }
      set {
        xlaGpuEnableFastMinMax_ = value;
      }
    }

    /// <summary>Field number for the "xla_allow_excess_precision" field.</summary>
    public const int XlaAllowExcessPrecisionFieldNumber = 122;
    private bool xlaAllowExcessPrecision_;
    /// <summary>
    /// Allows xla to increase the output precision of floating point operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaAllowExcessPrecision {
      get { return xlaAllowExcessPrecision_; }
      set {
        xlaAllowExcessPrecision_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_crash_on_verification_failures" field.</summary>
    public const int XlaGpuCrashOnVerificationFailuresFieldNumber = 101;
    private bool xlaGpuCrashOnVerificationFailures_;
    /// <summary>
    /// Crashes the program when any kind of verification fails, instead of just
    /// logging the failures. One example is cross checking of convolution results
    /// among different algorithms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaGpuCrashOnVerificationFailures {
      get { return xlaGpuCrashOnVerificationFailures_; }
      set {
        xlaGpuCrashOnVerificationFailures_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_disable_autotune" field.</summary>
    public const int XlaGpuDisableAutotuneFieldNumber = 123;
    private bool xlaGpuDisableAutotune_;
    /// <summary>
    /// Disable GEMM and Convolution auto-tuning.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaGpuDisableAutotune {
      get { return xlaGpuDisableAutotune_; }
      set {
        xlaGpuDisableAutotune_ = value;
      }
    }

    /// <summary>Field number for the "xla_force_host_platform_device_count" field.</summary>
    public const int XlaForceHostPlatformDeviceCountFieldNumber = 102;
    private int xlaForceHostPlatformDeviceCount_;
    /// <summary>
    /// Force the host platform to pretend that there are these many host
    /// "devices".  All these devices are backed by the same threadpool.  Defaults
    /// to 1.
    ///
    /// Setting this to anything other than 1 can increase overhead from context
    /// switching but we let the user override this behavior to help run tests on
    /// the host that run models in parallel across multiple devices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int XlaForceHostPlatformDeviceCount {
      get { return xlaForceHostPlatformDeviceCount_; }
      set {
        xlaForceHostPlatformDeviceCount_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_disable_gpuasm_optimizations" field.</summary>
    public const int XlaGpuDisableGpuasmOptimizationsFieldNumber = 103;
    private bool xlaGpuDisableGpuasmOptimizations_;
    /// <summary>
    /// If set to true XLA:GPU invokes `ptxas` with -O0 (default is -O3).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaGpuDisableGpuasmOptimizations {
      get { return xlaGpuDisableGpuasmOptimizations_; }
      set {
        xlaGpuDisableGpuasmOptimizations_ = value;
      }
    }

    /// <summary>Field number for the "xla_hlo_evaluator_use_fast_path" field.</summary>
    public const int XlaHloEvaluatorUseFastPathFieldNumber = 106;
    private bool xlaHloEvaluatorUseFastPath_;
    /// <summary>
    /// Enable fast math with eigen in the HLO evaluator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaHloEvaluatorUseFastPath {
      get { return xlaHloEvaluatorUseFastPath_; }
      set {
        xlaHloEvaluatorUseFastPath_ = value;
      }
    }

    /// <summary>Field number for the "xla_allow_scalar_index_dynamic_ops" field.</summary>
    public const int XlaAllowScalarIndexDynamicOpsFieldNumber = 107;
    private bool xlaAllowScalarIndexDynamicOps_;
    /// <summary>
    /// Temporary option to allow support for both the R1 and the scalar index
    /// versions of DynamicSlice and DynamicUpdateSlice. Only used for testing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaAllowScalarIndexDynamicOps {
      get { return xlaAllowScalarIndexDynamicOps_; }
      set {
        xlaAllowScalarIndexDynamicOps_ = value;
      }
    }

    /// <summary>Field number for the "xla_step_marker_location" field.</summary>
    public const int XlaStepMarkerLocationFieldNumber = 108;
    private global::Xla.DebugOptions.Types.StepMarkerLocation xlaStepMarkerLocation_ = 0;
    /// <summary>
    /// Option to emit a target-specific marker to indicate the start of a training
    /// step. The location of the marker (if any) is determined by the option
    /// value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DebugOptions.Types.StepMarkerLocation XlaStepMarkerLocation {
      get { return xlaStepMarkerLocation_; }
      set {
        xlaStepMarkerLocation_ = value;
      }
    }

    /// <summary>Field number for the "xla_dump_to" field.</summary>
    public const int XlaDumpToFieldNumber = 109;
    private string xlaDumpTo_ = "";
    /// <summary>
    /// Directory to dump into.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XlaDumpTo {
      get { return xlaDumpTo_; }
      set {
        xlaDumpTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xla_dump_hlo_module_re" field.</summary>
    public const int XlaDumpHloModuleReFieldNumber = 110;
    private string xlaDumpHloModuleRe_ = "";
    /// <summary>
    /// If specified, will only dump modules which match this regexp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XlaDumpHloModuleRe {
      get { return xlaDumpHloModuleRe_; }
      set {
        xlaDumpHloModuleRe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xla_dump_hlo_pass_re" field.</summary>
    public const int XlaDumpHloPassReFieldNumber = 111;
    private string xlaDumpHloPassRe_ = "";
    /// <summary>
    /// If this flag is specified, will also HLO before and after passes that match
    /// this regular expression.  Set to .* to dump before/after all passes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XlaDumpHloPassRe {
      get { return xlaDumpHloPassRe_; }
      set {
        xlaDumpHloPassRe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xla_dump_hlo_as_text" field.</summary>
    public const int XlaDumpHloAsTextFieldNumber = 112;
    private bool xlaDumpHloAsText_;
    /// <summary>
    /// Specifies the format that HLO is dumped in.  Multiple of these may be
    /// specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaDumpHloAsText {
      get { return xlaDumpHloAsText_; }
      set {
        xlaDumpHloAsText_ = value;
      }
    }

    /// <summary>Field number for the "xla_dump_hlo_as_proto" field.</summary>
    public const int XlaDumpHloAsProtoFieldNumber = 113;
    private bool xlaDumpHloAsProto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaDumpHloAsProto {
      get { return xlaDumpHloAsProto_; }
      set {
        xlaDumpHloAsProto_ = value;
      }
    }

    /// <summary>Field number for the "xla_dump_hlo_as_dot" field.</summary>
    public const int XlaDumpHloAsDotFieldNumber = 114;
    private bool xlaDumpHloAsDot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaDumpHloAsDot {
      get { return xlaDumpHloAsDot_; }
      set {
        xlaDumpHloAsDot_ = value;
      }
    }

    /// <summary>Field number for the "xla_dump_hlo_as_url" field.</summary>
    public const int XlaDumpHloAsUrlFieldNumber = 115;
    private bool xlaDumpHloAsUrl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaDumpHloAsUrl {
      get { return xlaDumpHloAsUrl_; }
      set {
        xlaDumpHloAsUrl_ = value;
      }
    }

    /// <summary>Field number for the "xla_dump_hlo_as_html" field.</summary>
    public const int XlaDumpHloAsHtmlFieldNumber = 116;
    private bool xlaDumpHloAsHtml_;
    /// <summary>
    /// Dump HLO graphs as an HTML (DOT -> SVG inlined in HTML)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaDumpHloAsHtml {
      get { return xlaDumpHloAsHtml_; }
      set {
        xlaDumpHloAsHtml_ = value;
      }
    }

    /// <summary>Field number for the "xla_dump_hlo_snapshots" field.</summary>
    public const int XlaDumpHloSnapshotsFieldNumber = 118;
    private bool xlaDumpHloSnapshots_;
    /// <summary>
    /// If true, every time an HLO module is run, we will dump an HloSnapshot
    /// (essentially, a serialized module plus its inputs) to the --xla_dump_to
    /// directory.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaDumpHloSnapshots {
      get { return xlaDumpHloSnapshots_; }
      set {
        xlaDumpHloSnapshots_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_force_conv_nchw" field.</summary>
    public const int XlaGpuForceConvNchwFieldNumber = 125;
    private bool xlaGpuForceConvNchw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XlaGpuForceConvNchw {
      get { return xlaGpuForceConvNchw_; }
      set {
        xlaGpuForceConvNchw_ = value;
      }
    }

    /// <summary>Field number for the "xla_gpu_ptx_file" field.</summary>
    public const int XlaGpuPtxFileFieldNumber = 127;
    private static readonly pb::FieldCodec<string> _repeated_xlaGpuPtxFile_codec
        = pb::FieldCodec.ForString(1018);
    private readonly pbc::RepeatedField<string> xlaGpuPtxFile_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Paths to files with ptx code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> XlaGpuPtxFile {
      get { return xlaGpuPtxFile_; }
    }

    /// <summary>Field number for the "xla_gpu_algorithm_blacklist_path" field.</summary>
    public const int XlaGpuAlgorithmBlacklistPathFieldNumber = 128;
    private string xlaGpuAlgorithmBlacklistPath_ = "";
    /// <summary>
    /// Blacklist for cuDNN convolutions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XlaGpuAlgorithmBlacklistPath {
      get { return xlaGpuAlgorithmBlacklistPath_; }
      set {
        xlaGpuAlgorithmBlacklistPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xla_backend_extra_options" field.</summary>
    public const int XlaBackendExtraOptionsFieldNumber = 500;
    private static readonly pbc::MapField<string, string>.Codec _map_xlaBackendExtraOptions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 4002);
    private readonly pbc::MapField<string, string> xlaBackendExtraOptions_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra options to pass to the compilation backend (e.g. LLVM); specific
    /// interpretation of these values is left to the backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> XlaBackendExtraOptions {
      get { return xlaBackendExtraOptions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XlaHloGraphAddresses != other.XlaHloGraphAddresses) return false;
      if (XlaHloProfile != other.XlaHloProfile) return false;
      if(!xlaDisableHloPasses_.Equals(other.xlaDisableHloPasses_)) return false;
      if(!xlaEnableHloPassesOnly_.Equals(other.xlaEnableHloPassesOnly_)) return false;
      if (XlaDisableAllHloPasses != other.XlaDisableAllHloPasses) return false;
      if (XlaBackendOptimizationLevel != other.XlaBackendOptimizationLevel) return false;
      if (XlaEmbedIrInExecutable != other.XlaEmbedIrInExecutable) return false;
      if (XlaEliminateHloImplicitBroadcast != other.XlaEliminateHloImplicitBroadcast) return false;
      if (XlaCpuMultiThreadEigen != other.XlaCpuMultiThreadEigen) return false;
      if (XlaGpuCudaDataDir != other.XlaGpuCudaDataDir) return false;
      if (XlaGpuFtz != other.XlaGpuFtz) return false;
      if (XlaGpuDisableMultiStreaming != other.XlaGpuDisableMultiStreaming) return false;
      if (XlaLlvmEnableAliasScopeMetadata != other.XlaLlvmEnableAliasScopeMetadata) return false;
      if (XlaLlvmEnableNoaliasMetadata != other.XlaLlvmEnableNoaliasMetadata) return false;
      if (XlaLlvmEnableInvariantLoadMetadata != other.XlaLlvmEnableInvariantLoadMetadata) return false;
      if (XlaLlvmDisableExpensivePasses != other.XlaLlvmDisableExpensivePasses) return false;
      if(!hloReducePrecisionOptions_.Equals(other.hloReducePrecisionOptions_)) return false;
      if (XlaTestAllOutputLayouts != other.XlaTestAllOutputLayouts) return false;
      if (XlaTestAllInputLayouts != other.XlaTestAllInputLayouts) return false;
      if (XlaHloGraphShardingColor != other.XlaHloGraphShardingColor) return false;
      if (XlaGpuUseCudnnBatchnorm != other.XlaGpuUseCudnnBatchnorm) return false;
      if (XlaCpuUseMklDnn != other.XlaCpuUseMklDnn) return false;
      if (XlaGpuMaxKernelUnrollFactor != other.XlaGpuMaxKernelUnrollFactor) return false;
      if (XlaCpuEnableFastMath != other.XlaCpuEnableFastMath) return false;
      if (XlaCpuFastMathHonorNans != other.XlaCpuFastMathHonorNans) return false;
      if (XlaCpuFastMathHonorInfs != other.XlaCpuFastMathHonorInfs) return false;
      if (XlaCpuFastMathHonorDivision != other.XlaCpuFastMathHonorDivision) return false;
      if (XlaCpuFastMathHonorFunctions != other.XlaCpuFastMathHonorFunctions) return false;
      if (XlaGpuEnableFastMinMax != other.XlaGpuEnableFastMinMax) return false;
      if (XlaAllowExcessPrecision != other.XlaAllowExcessPrecision) return false;
      if (XlaGpuCrashOnVerificationFailures != other.XlaGpuCrashOnVerificationFailures) return false;
      if (XlaGpuDisableAutotune != other.XlaGpuDisableAutotune) return false;
      if (XlaForceHostPlatformDeviceCount != other.XlaForceHostPlatformDeviceCount) return false;
      if (XlaGpuDisableGpuasmOptimizations != other.XlaGpuDisableGpuasmOptimizations) return false;
      if (XlaHloEvaluatorUseFastPath != other.XlaHloEvaluatorUseFastPath) return false;
      if (XlaAllowScalarIndexDynamicOps != other.XlaAllowScalarIndexDynamicOps) return false;
      if (XlaStepMarkerLocation != other.XlaStepMarkerLocation) return false;
      if (XlaDumpTo != other.XlaDumpTo) return false;
      if (XlaDumpHloModuleRe != other.XlaDumpHloModuleRe) return false;
      if (XlaDumpHloPassRe != other.XlaDumpHloPassRe) return false;
      if (XlaDumpHloAsText != other.XlaDumpHloAsText) return false;
      if (XlaDumpHloAsProto != other.XlaDumpHloAsProto) return false;
      if (XlaDumpHloAsDot != other.XlaDumpHloAsDot) return false;
      if (XlaDumpHloAsUrl != other.XlaDumpHloAsUrl) return false;
      if (XlaDumpHloAsHtml != other.XlaDumpHloAsHtml) return false;
      if (XlaDumpHloSnapshots != other.XlaDumpHloSnapshots) return false;
      if (XlaGpuForceConvNchw != other.XlaGpuForceConvNchw) return false;
      if(!xlaGpuPtxFile_.Equals(other.xlaGpuPtxFile_)) return false;
      if (XlaGpuAlgorithmBlacklistPath != other.XlaGpuAlgorithmBlacklistPath) return false;
      if (!XlaBackendExtraOptions.Equals(other.XlaBackendExtraOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XlaHloGraphAddresses != false) hash ^= XlaHloGraphAddresses.GetHashCode();
      if (XlaHloProfile != false) hash ^= XlaHloProfile.GetHashCode();
      hash ^= xlaDisableHloPasses_.GetHashCode();
      hash ^= xlaEnableHloPassesOnly_.GetHashCode();
      if (XlaDisableAllHloPasses != false) hash ^= XlaDisableAllHloPasses.GetHashCode();
      if (XlaBackendOptimizationLevel != 0) hash ^= XlaBackendOptimizationLevel.GetHashCode();
      if (XlaEmbedIrInExecutable != false) hash ^= XlaEmbedIrInExecutable.GetHashCode();
      if (XlaEliminateHloImplicitBroadcast != false) hash ^= XlaEliminateHloImplicitBroadcast.GetHashCode();
      if (XlaCpuMultiThreadEigen != false) hash ^= XlaCpuMultiThreadEigen.GetHashCode();
      if (XlaGpuCudaDataDir.Length != 0) hash ^= XlaGpuCudaDataDir.GetHashCode();
      if (XlaGpuFtz != false) hash ^= XlaGpuFtz.GetHashCode();
      if (XlaGpuDisableMultiStreaming != false) hash ^= XlaGpuDisableMultiStreaming.GetHashCode();
      if (XlaLlvmEnableAliasScopeMetadata != false) hash ^= XlaLlvmEnableAliasScopeMetadata.GetHashCode();
      if (XlaLlvmEnableNoaliasMetadata != false) hash ^= XlaLlvmEnableNoaliasMetadata.GetHashCode();
      if (XlaLlvmEnableInvariantLoadMetadata != false) hash ^= XlaLlvmEnableInvariantLoadMetadata.GetHashCode();
      if (XlaLlvmDisableExpensivePasses != false) hash ^= XlaLlvmDisableExpensivePasses.GetHashCode();
      hash ^= hloReducePrecisionOptions_.GetHashCode();
      if (XlaTestAllOutputLayouts != false) hash ^= XlaTestAllOutputLayouts.GetHashCode();
      if (XlaTestAllInputLayouts != false) hash ^= XlaTestAllInputLayouts.GetHashCode();
      if (XlaHloGraphShardingColor != false) hash ^= XlaHloGraphShardingColor.GetHashCode();
      if (XlaGpuUseCudnnBatchnorm != false) hash ^= XlaGpuUseCudnnBatchnorm.GetHashCode();
      if (XlaCpuUseMklDnn != false) hash ^= XlaCpuUseMklDnn.GetHashCode();
      if (XlaGpuMaxKernelUnrollFactor != 0) hash ^= XlaGpuMaxKernelUnrollFactor.GetHashCode();
      if (XlaCpuEnableFastMath != false) hash ^= XlaCpuEnableFastMath.GetHashCode();
      if (XlaCpuFastMathHonorNans != false) hash ^= XlaCpuFastMathHonorNans.GetHashCode();
      if (XlaCpuFastMathHonorInfs != false) hash ^= XlaCpuFastMathHonorInfs.GetHashCode();
      if (XlaCpuFastMathHonorDivision != false) hash ^= XlaCpuFastMathHonorDivision.GetHashCode();
      if (XlaCpuFastMathHonorFunctions != false) hash ^= XlaCpuFastMathHonorFunctions.GetHashCode();
      if (XlaGpuEnableFastMinMax != false) hash ^= XlaGpuEnableFastMinMax.GetHashCode();
      if (XlaAllowExcessPrecision != false) hash ^= XlaAllowExcessPrecision.GetHashCode();
      if (XlaGpuCrashOnVerificationFailures != false) hash ^= XlaGpuCrashOnVerificationFailures.GetHashCode();
      if (XlaGpuDisableAutotune != false) hash ^= XlaGpuDisableAutotune.GetHashCode();
      if (XlaForceHostPlatformDeviceCount != 0) hash ^= XlaForceHostPlatformDeviceCount.GetHashCode();
      if (XlaGpuDisableGpuasmOptimizations != false) hash ^= XlaGpuDisableGpuasmOptimizations.GetHashCode();
      if (XlaHloEvaluatorUseFastPath != false) hash ^= XlaHloEvaluatorUseFastPath.GetHashCode();
      if (XlaAllowScalarIndexDynamicOps != false) hash ^= XlaAllowScalarIndexDynamicOps.GetHashCode();
      if (XlaStepMarkerLocation != 0) hash ^= XlaStepMarkerLocation.GetHashCode();
      if (XlaDumpTo.Length != 0) hash ^= XlaDumpTo.GetHashCode();
      if (XlaDumpHloModuleRe.Length != 0) hash ^= XlaDumpHloModuleRe.GetHashCode();
      if (XlaDumpHloPassRe.Length != 0) hash ^= XlaDumpHloPassRe.GetHashCode();
      if (XlaDumpHloAsText != false) hash ^= XlaDumpHloAsText.GetHashCode();
      if (XlaDumpHloAsProto != false) hash ^= XlaDumpHloAsProto.GetHashCode();
      if (XlaDumpHloAsDot != false) hash ^= XlaDumpHloAsDot.GetHashCode();
      if (XlaDumpHloAsUrl != false) hash ^= XlaDumpHloAsUrl.GetHashCode();
      if (XlaDumpHloAsHtml != false) hash ^= XlaDumpHloAsHtml.GetHashCode();
      if (XlaDumpHloSnapshots != false) hash ^= XlaDumpHloSnapshots.GetHashCode();
      if (XlaGpuForceConvNchw != false) hash ^= XlaGpuForceConvNchw.GetHashCode();
      hash ^= xlaGpuPtxFile_.GetHashCode();
      if (XlaGpuAlgorithmBlacklistPath.Length != 0) hash ^= XlaGpuAlgorithmBlacklistPath.GetHashCode();
      hash ^= XlaBackendExtraOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XlaHloGraphAddresses != false) {
        output.WriteRawTag(16);
        output.WriteBool(XlaHloGraphAddresses);
      }
      if (XlaHloProfile != false) {
        output.WriteRawTag(72);
        output.WriteBool(XlaHloProfile);
      }
      xlaDisableHloPasses_.WriteTo(output, _repeated_xlaDisableHloPasses_codec);
      if (XlaBackendOptimizationLevel != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(XlaBackendOptimizationLevel);
      }
      if (XlaEmbedIrInExecutable != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(XlaEmbedIrInExecutable);
      }
      if (XlaEliminateHloImplicitBroadcast != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(XlaEliminateHloImplicitBroadcast);
      }
      if (XlaCpuMultiThreadEigen != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(XlaCpuMultiThreadEigen);
      }
      if (XlaGpuCudaDataDir.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(XlaGpuCudaDataDir);
      }
      if (XlaGpuFtz != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(XlaGpuFtz);
      }
      if (XlaGpuDisableMultiStreaming != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(XlaGpuDisableMultiStreaming);
      }
      if (XlaLlvmEnableAliasScopeMetadata != false) {
        output.WriteRawTag(176, 4);
        output.WriteBool(XlaLlvmEnableAliasScopeMetadata);
      }
      if (XlaLlvmEnableNoaliasMetadata != false) {
        output.WriteRawTag(184, 4);
        output.WriteBool(XlaLlvmEnableNoaliasMetadata);
      }
      if (XlaLlvmEnableInvariantLoadMetadata != false) {
        output.WriteRawTag(192, 4);
        output.WriteBool(XlaLlvmEnableInvariantLoadMetadata);
      }
      if (XlaLlvmDisableExpensivePasses != false) {
        output.WriteRawTag(200, 4);
        output.WriteBool(XlaLlvmDisableExpensivePasses);
      }
      hloReducePrecisionOptions_.WriteTo(output, _repeated_hloReducePrecisionOptions_codec);
      if (XlaTestAllOutputLayouts != false) {
        output.WriteRawTag(208, 5);
        output.WriteBool(XlaTestAllOutputLayouts);
      }
      if (XlaTestAllInputLayouts != false) {
        output.WriteRawTag(216, 5);
        output.WriteBool(XlaTestAllInputLayouts);
      }
      if (XlaHloGraphShardingColor != false) {
        output.WriteRawTag(224, 5);
        output.WriteBool(XlaHloGraphShardingColor);
      }
      if (XlaGpuUseCudnnBatchnorm != false) {
        output.WriteRawTag(240, 5);
        output.WriteBool(XlaGpuUseCudnnBatchnorm);
      }
      if (XlaCpuUseMklDnn != false) {
        output.WriteRawTag(136, 6);
        output.WriteBool(XlaCpuUseMklDnn);
      }
      if (XlaGpuMaxKernelUnrollFactor != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(XlaGpuMaxKernelUnrollFactor);
      }
      if (XlaCpuEnableFastMath != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(XlaCpuEnableFastMath);
      }
      if (XlaGpuEnableFastMinMax != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(XlaGpuEnableFastMinMax);
      }
      if (XlaGpuCrashOnVerificationFailures != false) {
        output.WriteRawTag(168, 6);
        output.WriteBool(XlaGpuCrashOnVerificationFailures);
      }
      if (XlaForceHostPlatformDeviceCount != 0) {
        output.WriteRawTag(176, 6);
        output.WriteInt32(XlaForceHostPlatformDeviceCount);
      }
      if (XlaGpuDisableGpuasmOptimizations != false) {
        output.WriteRawTag(184, 6);
        output.WriteBool(XlaGpuDisableGpuasmOptimizations);
      }
      if (XlaDisableAllHloPasses != false) {
        output.WriteRawTag(192, 6);
        output.WriteBool(XlaDisableAllHloPasses);
      }
      if (XlaHloEvaluatorUseFastPath != false) {
        output.WriteRawTag(208, 6);
        output.WriteBool(XlaHloEvaluatorUseFastPath);
      }
      if (XlaAllowScalarIndexDynamicOps != false) {
        output.WriteRawTag(216, 6);
        output.WriteBool(XlaAllowScalarIndexDynamicOps);
      }
      if (XlaStepMarkerLocation != 0) {
        output.WriteRawTag(224, 6);
        output.WriteEnum((int) XlaStepMarkerLocation);
      }
      if (XlaDumpTo.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(XlaDumpTo);
      }
      if (XlaDumpHloModuleRe.Length != 0) {
        output.WriteRawTag(242, 6);
        output.WriteString(XlaDumpHloModuleRe);
      }
      if (XlaDumpHloPassRe.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(XlaDumpHloPassRe);
      }
      if (XlaDumpHloAsText != false) {
        output.WriteRawTag(128, 7);
        output.WriteBool(XlaDumpHloAsText);
      }
      if (XlaDumpHloAsProto != false) {
        output.WriteRawTag(136, 7);
        output.WriteBool(XlaDumpHloAsProto);
      }
      if (XlaDumpHloAsDot != false) {
        output.WriteRawTag(144, 7);
        output.WriteBool(XlaDumpHloAsDot);
      }
      if (XlaDumpHloAsUrl != false) {
        output.WriteRawTag(152, 7);
        output.WriteBool(XlaDumpHloAsUrl);
      }
      if (XlaDumpHloAsHtml != false) {
        output.WriteRawTag(160, 7);
        output.WriteBool(XlaDumpHloAsHtml);
      }
      if (XlaDumpHloSnapshots != false) {
        output.WriteRawTag(176, 7);
        output.WriteBool(XlaDumpHloSnapshots);
      }
      if (XlaCpuFastMathHonorNans != false) {
        output.WriteRawTag(192, 7);
        output.WriteBool(XlaCpuFastMathHonorNans);
      }
      if (XlaCpuFastMathHonorInfs != false) {
        output.WriteRawTag(200, 7);
        output.WriteBool(XlaCpuFastMathHonorInfs);
      }
      if (XlaAllowExcessPrecision != false) {
        output.WriteRawTag(208, 7);
        output.WriteBool(XlaAllowExcessPrecision);
      }
      if (XlaGpuDisableAutotune != false) {
        output.WriteRawTag(216, 7);
        output.WriteBool(XlaGpuDisableAutotune);
      }
      xlaEnableHloPassesOnly_.WriteTo(output, _repeated_xlaEnableHloPassesOnly_codec);
      if (XlaGpuForceConvNchw != false) {
        output.WriteRawTag(232, 7);
        output.WriteBool(XlaGpuForceConvNchw);
      }
      if (XlaCpuFastMathHonorDivision != false) {
        output.WriteRawTag(240, 7);
        output.WriteBool(XlaCpuFastMathHonorDivision);
      }
      xlaGpuPtxFile_.WriteTo(output, _repeated_xlaGpuPtxFile_codec);
      if (XlaGpuAlgorithmBlacklistPath.Length != 0) {
        output.WriteRawTag(130, 8);
        output.WriteString(XlaGpuAlgorithmBlacklistPath);
      }
      if (XlaCpuFastMathHonorFunctions != false) {
        output.WriteRawTag(136, 8);
        output.WriteBool(XlaCpuFastMathHonorFunctions);
      }
      xlaBackendExtraOptions_.WriteTo(output, _map_xlaBackendExtraOptions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XlaHloGraphAddresses != false) {
        size += 1 + 1;
      }
      if (XlaHloProfile != false) {
        size += 1 + 1;
      }
      size += xlaDisableHloPasses_.CalculateSize(_repeated_xlaDisableHloPasses_codec);
      size += xlaEnableHloPassesOnly_.CalculateSize(_repeated_xlaEnableHloPassesOnly_codec);
      if (XlaDisableAllHloPasses != false) {
        size += 2 + 1;
      }
      if (XlaBackendOptimizationLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(XlaBackendOptimizationLevel);
      }
      if (XlaEmbedIrInExecutable != false) {
        size += 2 + 1;
      }
      if (XlaEliminateHloImplicitBroadcast != false) {
        size += 2 + 1;
      }
      if (XlaCpuMultiThreadEigen != false) {
        size += 2 + 1;
      }
      if (XlaGpuCudaDataDir.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(XlaGpuCudaDataDir);
      }
      if (XlaGpuFtz != false) {
        size += 2 + 1;
      }
      if (XlaGpuDisableMultiStreaming != false) {
        size += 2 + 1;
      }
      if (XlaLlvmEnableAliasScopeMetadata != false) {
        size += 2 + 1;
      }
      if (XlaLlvmEnableNoaliasMetadata != false) {
        size += 2 + 1;
      }
      if (XlaLlvmEnableInvariantLoadMetadata != false) {
        size += 2 + 1;
      }
      if (XlaLlvmDisableExpensivePasses != false) {
        size += 2 + 1;
      }
      size += hloReducePrecisionOptions_.CalculateSize(_repeated_hloReducePrecisionOptions_codec);
      if (XlaTestAllOutputLayouts != false) {
        size += 2 + 1;
      }
      if (XlaTestAllInputLayouts != false) {
        size += 2 + 1;
      }
      if (XlaHloGraphShardingColor != false) {
        size += 2 + 1;
      }
      if (XlaGpuUseCudnnBatchnorm != false) {
        size += 2 + 1;
      }
      if (XlaCpuUseMklDnn != false) {
        size += 2 + 1;
      }
      if (XlaGpuMaxKernelUnrollFactor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(XlaGpuMaxKernelUnrollFactor);
      }
      if (XlaCpuEnableFastMath != false) {
        size += 2 + 1;
      }
      if (XlaCpuFastMathHonorNans != false) {
        size += 2 + 1;
      }
      if (XlaCpuFastMathHonorInfs != false) {
        size += 2 + 1;
      }
      if (XlaCpuFastMathHonorDivision != false) {
        size += 2 + 1;
      }
      if (XlaCpuFastMathHonorFunctions != false) {
        size += 2 + 1;
      }
      if (XlaGpuEnableFastMinMax != false) {
        size += 2 + 1;
      }
      if (XlaAllowExcessPrecision != false) {
        size += 2 + 1;
      }
      if (XlaGpuCrashOnVerificationFailures != false) {
        size += 2 + 1;
      }
      if (XlaGpuDisableAutotune != false) {
        size += 2 + 1;
      }
      if (XlaForceHostPlatformDeviceCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(XlaForceHostPlatformDeviceCount);
      }
      if (XlaGpuDisableGpuasmOptimizations != false) {
        size += 2 + 1;
      }
      if (XlaHloEvaluatorUseFastPath != false) {
        size += 2 + 1;
      }
      if (XlaAllowScalarIndexDynamicOps != false) {
        size += 2 + 1;
      }
      if (XlaStepMarkerLocation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) XlaStepMarkerLocation);
      }
      if (XlaDumpTo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(XlaDumpTo);
      }
      if (XlaDumpHloModuleRe.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(XlaDumpHloModuleRe);
      }
      if (XlaDumpHloPassRe.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(XlaDumpHloPassRe);
      }
      if (XlaDumpHloAsText != false) {
        size += 2 + 1;
      }
      if (XlaDumpHloAsProto != false) {
        size += 2 + 1;
      }
      if (XlaDumpHloAsDot != false) {
        size += 2 + 1;
      }
      if (XlaDumpHloAsUrl != false) {
        size += 2 + 1;
      }
      if (XlaDumpHloAsHtml != false) {
        size += 2 + 1;
      }
      if (XlaDumpHloSnapshots != false) {
        size += 2 + 1;
      }
      if (XlaGpuForceConvNchw != false) {
        size += 2 + 1;
      }
      size += xlaGpuPtxFile_.CalculateSize(_repeated_xlaGpuPtxFile_codec);
      if (XlaGpuAlgorithmBlacklistPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(XlaGpuAlgorithmBlacklistPath);
      }
      size += xlaBackendExtraOptions_.CalculateSize(_map_xlaBackendExtraOptions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugOptions other) {
      if (other == null) {
        return;
      }
      if (other.XlaHloGraphAddresses != false) {
        XlaHloGraphAddresses = other.XlaHloGraphAddresses;
      }
      if (other.XlaHloProfile != false) {
        XlaHloProfile = other.XlaHloProfile;
      }
      xlaDisableHloPasses_.Add(other.xlaDisableHloPasses_);
      xlaEnableHloPassesOnly_.Add(other.xlaEnableHloPassesOnly_);
      if (other.XlaDisableAllHloPasses != false) {
        XlaDisableAllHloPasses = other.XlaDisableAllHloPasses;
      }
      if (other.XlaBackendOptimizationLevel != 0) {
        XlaBackendOptimizationLevel = other.XlaBackendOptimizationLevel;
      }
      if (other.XlaEmbedIrInExecutable != false) {
        XlaEmbedIrInExecutable = other.XlaEmbedIrInExecutable;
      }
      if (other.XlaEliminateHloImplicitBroadcast != false) {
        XlaEliminateHloImplicitBroadcast = other.XlaEliminateHloImplicitBroadcast;
      }
      if (other.XlaCpuMultiThreadEigen != false) {
        XlaCpuMultiThreadEigen = other.XlaCpuMultiThreadEigen;
      }
      if (other.XlaGpuCudaDataDir.Length != 0) {
        XlaGpuCudaDataDir = other.XlaGpuCudaDataDir;
      }
      if (other.XlaGpuFtz != false) {
        XlaGpuFtz = other.XlaGpuFtz;
      }
      if (other.XlaGpuDisableMultiStreaming != false) {
        XlaGpuDisableMultiStreaming = other.XlaGpuDisableMultiStreaming;
      }
      if (other.XlaLlvmEnableAliasScopeMetadata != false) {
        XlaLlvmEnableAliasScopeMetadata = other.XlaLlvmEnableAliasScopeMetadata;
      }
      if (other.XlaLlvmEnableNoaliasMetadata != false) {
        XlaLlvmEnableNoaliasMetadata = other.XlaLlvmEnableNoaliasMetadata;
      }
      if (other.XlaLlvmEnableInvariantLoadMetadata != false) {
        XlaLlvmEnableInvariantLoadMetadata = other.XlaLlvmEnableInvariantLoadMetadata;
      }
      if (other.XlaLlvmDisableExpensivePasses != false) {
        XlaLlvmDisableExpensivePasses = other.XlaLlvmDisableExpensivePasses;
      }
      hloReducePrecisionOptions_.Add(other.hloReducePrecisionOptions_);
      if (other.XlaTestAllOutputLayouts != false) {
        XlaTestAllOutputLayouts = other.XlaTestAllOutputLayouts;
      }
      if (other.XlaTestAllInputLayouts != false) {
        XlaTestAllInputLayouts = other.XlaTestAllInputLayouts;
      }
      if (other.XlaHloGraphShardingColor != false) {
        XlaHloGraphShardingColor = other.XlaHloGraphShardingColor;
      }
      if (other.XlaGpuUseCudnnBatchnorm != false) {
        XlaGpuUseCudnnBatchnorm = other.XlaGpuUseCudnnBatchnorm;
      }
      if (other.XlaCpuUseMklDnn != false) {
        XlaCpuUseMklDnn = other.XlaCpuUseMklDnn;
      }
      if (other.XlaGpuMaxKernelUnrollFactor != 0) {
        XlaGpuMaxKernelUnrollFactor = other.XlaGpuMaxKernelUnrollFactor;
      }
      if (other.XlaCpuEnableFastMath != false) {
        XlaCpuEnableFastMath = other.XlaCpuEnableFastMath;
      }
      if (other.XlaCpuFastMathHonorNans != false) {
        XlaCpuFastMathHonorNans = other.XlaCpuFastMathHonorNans;
      }
      if (other.XlaCpuFastMathHonorInfs != false) {
        XlaCpuFastMathHonorInfs = other.XlaCpuFastMathHonorInfs;
      }
      if (other.XlaCpuFastMathHonorDivision != false) {
        XlaCpuFastMathHonorDivision = other.XlaCpuFastMathHonorDivision;
      }
      if (other.XlaCpuFastMathHonorFunctions != false) {
        XlaCpuFastMathHonorFunctions = other.XlaCpuFastMathHonorFunctions;
      }
      if (other.XlaGpuEnableFastMinMax != false) {
        XlaGpuEnableFastMinMax = other.XlaGpuEnableFastMinMax;
      }
      if (other.XlaAllowExcessPrecision != false) {
        XlaAllowExcessPrecision = other.XlaAllowExcessPrecision;
      }
      if (other.XlaGpuCrashOnVerificationFailures != false) {
        XlaGpuCrashOnVerificationFailures = other.XlaGpuCrashOnVerificationFailures;
      }
      if (other.XlaGpuDisableAutotune != false) {
        XlaGpuDisableAutotune = other.XlaGpuDisableAutotune;
      }
      if (other.XlaForceHostPlatformDeviceCount != 0) {
        XlaForceHostPlatformDeviceCount = other.XlaForceHostPlatformDeviceCount;
      }
      if (other.XlaGpuDisableGpuasmOptimizations != false) {
        XlaGpuDisableGpuasmOptimizations = other.XlaGpuDisableGpuasmOptimizations;
      }
      if (other.XlaHloEvaluatorUseFastPath != false) {
        XlaHloEvaluatorUseFastPath = other.XlaHloEvaluatorUseFastPath;
      }
      if (other.XlaAllowScalarIndexDynamicOps != false) {
        XlaAllowScalarIndexDynamicOps = other.XlaAllowScalarIndexDynamicOps;
      }
      if (other.XlaStepMarkerLocation != 0) {
        XlaStepMarkerLocation = other.XlaStepMarkerLocation;
      }
      if (other.XlaDumpTo.Length != 0) {
        XlaDumpTo = other.XlaDumpTo;
      }
      if (other.XlaDumpHloModuleRe.Length != 0) {
        XlaDumpHloModuleRe = other.XlaDumpHloModuleRe;
      }
      if (other.XlaDumpHloPassRe.Length != 0) {
        XlaDumpHloPassRe = other.XlaDumpHloPassRe;
      }
      if (other.XlaDumpHloAsText != false) {
        XlaDumpHloAsText = other.XlaDumpHloAsText;
      }
      if (other.XlaDumpHloAsProto != false) {
        XlaDumpHloAsProto = other.XlaDumpHloAsProto;
      }
      if (other.XlaDumpHloAsDot != false) {
        XlaDumpHloAsDot = other.XlaDumpHloAsDot;
      }
      if (other.XlaDumpHloAsUrl != false) {
        XlaDumpHloAsUrl = other.XlaDumpHloAsUrl;
      }
      if (other.XlaDumpHloAsHtml != false) {
        XlaDumpHloAsHtml = other.XlaDumpHloAsHtml;
      }
      if (other.XlaDumpHloSnapshots != false) {
        XlaDumpHloSnapshots = other.XlaDumpHloSnapshots;
      }
      if (other.XlaGpuForceConvNchw != false) {
        XlaGpuForceConvNchw = other.XlaGpuForceConvNchw;
      }
      xlaGpuPtxFile_.Add(other.xlaGpuPtxFile_);
      if (other.XlaGpuAlgorithmBlacklistPath.Length != 0) {
        XlaGpuAlgorithmBlacklistPath = other.XlaGpuAlgorithmBlacklistPath;
      }
      xlaBackendExtraOptions_.Add(other.xlaBackendExtraOptions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            XlaHloGraphAddresses = input.ReadBool();
            break;
          }
          case 72: {
            XlaHloProfile = input.ReadBool();
            break;
          }
          case 242: {
            xlaDisableHloPasses_.AddEntriesFrom(input, _repeated_xlaDisableHloPasses_codec);
            break;
          }
          case 248: {
            XlaBackendOptimizationLevel = input.ReadInt32();
            break;
          }
          case 264: {
            XlaEmbedIrInExecutable = input.ReadBool();
            break;
          }
          case 280: {
            XlaEliminateHloImplicitBroadcast = input.ReadBool();
            break;
          }
          case 480: {
            XlaCpuMultiThreadEigen = input.ReadBool();
            break;
          }
          case 490: {
            XlaGpuCudaDataDir = input.ReadString();
            break;
          }
          case 496: {
            XlaGpuFtz = input.ReadBool();
            break;
          }
          case 504: {
            XlaGpuDisableMultiStreaming = input.ReadBool();
            break;
          }
          case 560: {
            XlaLlvmEnableAliasScopeMetadata = input.ReadBool();
            break;
          }
          case 568: {
            XlaLlvmEnableNoaliasMetadata = input.ReadBool();
            break;
          }
          case 576: {
            XlaLlvmEnableInvariantLoadMetadata = input.ReadBool();
            break;
          }
          case 584: {
            XlaLlvmDisableExpensivePasses = input.ReadBool();
            break;
          }
          case 642: {
            hloReducePrecisionOptions_.AddEntriesFrom(input, _repeated_hloReducePrecisionOptions_codec);
            break;
          }
          case 720: {
            XlaTestAllOutputLayouts = input.ReadBool();
            break;
          }
          case 728: {
            XlaTestAllInputLayouts = input.ReadBool();
            break;
          }
          case 736: {
            XlaHloGraphShardingColor = input.ReadBool();
            break;
          }
          case 752: {
            XlaGpuUseCudnnBatchnorm = input.ReadBool();
            break;
          }
          case 776: {
            XlaCpuUseMklDnn = input.ReadBool();
            break;
          }
          case 784: {
            XlaGpuMaxKernelUnrollFactor = input.ReadInt32();
            break;
          }
          case 792: {
            XlaCpuEnableFastMath = input.ReadBool();
            break;
          }
          case 800: {
            XlaGpuEnableFastMinMax = input.ReadBool();
            break;
          }
          case 808: {
            XlaGpuCrashOnVerificationFailures = input.ReadBool();
            break;
          }
          case 816: {
            XlaForceHostPlatformDeviceCount = input.ReadInt32();
            break;
          }
          case 824: {
            XlaGpuDisableGpuasmOptimizations = input.ReadBool();
            break;
          }
          case 832: {
            XlaDisableAllHloPasses = input.ReadBool();
            break;
          }
          case 848: {
            XlaHloEvaluatorUseFastPath = input.ReadBool();
            break;
          }
          case 856: {
            XlaAllowScalarIndexDynamicOps = input.ReadBool();
            break;
          }
          case 864: {
            XlaStepMarkerLocation = (global::Xla.DebugOptions.Types.StepMarkerLocation) input.ReadEnum();
            break;
          }
          case 874: {
            XlaDumpTo = input.ReadString();
            break;
          }
          case 882: {
            XlaDumpHloModuleRe = input.ReadString();
            break;
          }
          case 890: {
            XlaDumpHloPassRe = input.ReadString();
            break;
          }
          case 896: {
            XlaDumpHloAsText = input.ReadBool();
            break;
          }
          case 904: {
            XlaDumpHloAsProto = input.ReadBool();
            break;
          }
          case 912: {
            XlaDumpHloAsDot = input.ReadBool();
            break;
          }
          case 920: {
            XlaDumpHloAsUrl = input.ReadBool();
            break;
          }
          case 928: {
            XlaDumpHloAsHtml = input.ReadBool();
            break;
          }
          case 944: {
            XlaDumpHloSnapshots = input.ReadBool();
            break;
          }
          case 960: {
            XlaCpuFastMathHonorNans = input.ReadBool();
            break;
          }
          case 968: {
            XlaCpuFastMathHonorInfs = input.ReadBool();
            break;
          }
          case 976: {
            XlaAllowExcessPrecision = input.ReadBool();
            break;
          }
          case 984: {
            XlaGpuDisableAutotune = input.ReadBool();
            break;
          }
          case 994: {
            xlaEnableHloPassesOnly_.AddEntriesFrom(input, _repeated_xlaEnableHloPassesOnly_codec);
            break;
          }
          case 1000: {
            XlaGpuForceConvNchw = input.ReadBool();
            break;
          }
          case 1008: {
            XlaCpuFastMathHonorDivision = input.ReadBool();
            break;
          }
          case 1018: {
            xlaGpuPtxFile_.AddEntriesFrom(input, _repeated_xlaGpuPtxFile_codec);
            break;
          }
          case 1026: {
            XlaGpuAlgorithmBlacklistPath = input.ReadString();
            break;
          }
          case 1032: {
            XlaCpuFastMathHonorFunctions = input.ReadBool();
            break;
          }
          case 4002: {
            xlaBackendExtraOptions_.AddEntriesFrom(input, _map_xlaBackendExtraOptions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DebugOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StepMarkerLocation {
        /// <summary>
        /// Generate a step marker at the program entry. This handles the case where
        /// each step is done by one or multiple program execution(s). Only the first
        /// program will be tagged for generating a step marker at the program entry.
        /// This is the default.
        /// </summary>
        [pbr::OriginalName("STEP_MARK_AT_ENTRY")] StepMarkAtEntry = 0,
        /// <summary>
        /// Generate a step marker at each iteration of the top level while loop,
        /// which is assumed to be a training loop.
        /// </summary>
        [pbr::OriginalName("STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP")] StepMarkAtTopLevelWhileLoop = 1,
        /// <summary>
        /// Generate a step marker at each iteration of the second level while loops,
        /// which is assumed to be a training or eval loop.
        /// </summary>
        [pbr::OriginalName("STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP")] StepMarkAtSecondLevelWhileLoop = 3,
        /// <summary>
        /// No step marker generated.
        /// </summary>
        [pbr::OriginalName("STEP_MARK_NONE")] StepMarkNone = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// These settings control how XLA compiles and/or runs code.  Not all settings
  /// will have an effect on every platform.
  ///
  /// When adding new fields, keep in mind that boolean fields default to false.
  /// </summary>
  public sealed partial class ExecutionOptions : pb::IMessage<ExecutionOptions> {
    private static readonly pb::MessageParser<ExecutionOptions> _parser = new pb::MessageParser<ExecutionOptions>(() => new ExecutionOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutionOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionOptions(ExecutionOptions other) : this() {
      shapeWithOutputLayout_ = other.shapeWithOutputLayout_ != null ? other.shapeWithOutputLayout_.Clone() : null;
      seed_ = other.seed_;
      debugOptions_ = other.debugOptions_ != null ? other.debugOptions_.Clone() : null;
      deviceHandles_ = other.deviceHandles_.Clone();
      numReplicas_ = other.numReplicas_;
      deviceAssignment_ = other.deviceAssignment_ != null ? other.deviceAssignment_.Clone() : null;
      aliasPassthroughParams_ = other.aliasPassthroughParams_;
      numPartitions_ = other.numPartitions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionOptions Clone() {
      return new ExecutionOptions(this);
    }

    /// <summary>Field number for the "shape_with_output_layout" field.</summary>
    public const int ShapeWithOutputLayoutFieldNumber = 2;
    private global::Xla.ShapeProto shapeWithOutputLayout_;
    /// <summary>
    /// This optional field's layout is used as a hint when storing the output of
    /// this computation.  Subsequent transfers of this output array to the client
    /// may be faster when using this layout.
    ///
    /// We use a Shape here to accommodate computations that return a tuple.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ShapeProto ShapeWithOutputLayout {
      get { return shapeWithOutputLayout_; }
      set {
        shapeWithOutputLayout_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 3;
    private ulong seed_;
    /// <summary>
    /// Used to seed random-number generators used in this computation.  If this is
    /// 0, we generate a seed ourselves.
    ///
    /// TODO(b/32083678): Changing the seed unnecessarily forces a recompilation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "debug_options" field.</summary>
    public const int DebugOptionsFieldNumber = 4;
    private global::Xla.DebugOptions debugOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DebugOptions DebugOptions {
      get { return debugOptions_; }
      set {
        debugOptions_ = value;
      }
    }

    /// <summary>Field number for the "device_handles" field.</summary>
    public const int DeviceHandlesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Xla.DeviceHandle> _repeated_deviceHandles_codec
        = pb::FieldCodec.ForMessage(42, global::Xla.DeviceHandle.Parser);
    private readonly pbc::RepeatedField<global::Xla.DeviceHandle> deviceHandles_ = new pbc::RepeatedField<global::Xla.DeviceHandle>();
    /// <summary>
    /// This optional field specifies a particular set of devices to run the
    /// computation on. The computation will be partitioned across these devices.
    /// If not provided, the default device will be chosen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.DeviceHandle> DeviceHandles {
      get { return deviceHandles_; }
    }

    /// <summary>Field number for the "num_replicas" field.</summary>
    public const int NumReplicasFieldNumber = 6;
    private int numReplicas_;
    /// <summary>
    /// Number of replicas of the computation to run. If zero, uses the default
    /// number of replicas for the XLA service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumReplicas {
      get { return numReplicas_; }
      set {
        numReplicas_ = value;
      }
    }

    /// <summary>Field number for the "device_assignment" field.</summary>
    public const int DeviceAssignmentFieldNumber = 7;
    private global::Xla.DeviceAssignmentProto deviceAssignment_;
    /// <summary>
    /// This optional field specifies the device assignment if known at compile
    /// time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DeviceAssignmentProto DeviceAssignment {
      get { return deviceAssignment_; }
      set {
        deviceAssignment_ = value;
      }
    }

    /// <summary>Field number for the "alias_passthrough_params" field.</summary>
    public const int AliasPassthroughParamsFieldNumber = 8;
    private bool aliasPassthroughParams_;
    /// <summary>
    /// Alias input and output buffers for parameters that are passed-through XLA
    /// modules without being changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AliasPassthroughParams {
      get { return aliasPassthroughParams_; }
      set {
        aliasPassthroughParams_ = value;
      }
    }

    /// <summary>Field number for the "num_partitions" field.</summary>
    public const int NumPartitionsFieldNumber = 9;
    private int numPartitions_;
    /// <summary>
    /// Number of partitions of the computation to run (model parallelism).
    /// If zero, uses the default number of partitions for the XLA service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumPartitions {
      get { return numPartitions_; }
      set {
        numPartitions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutionOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutionOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ShapeWithOutputLayout, other.ShapeWithOutputLayout)) return false;
      if (Seed != other.Seed) return false;
      if (!object.Equals(DebugOptions, other.DebugOptions)) return false;
      if(!deviceHandles_.Equals(other.deviceHandles_)) return false;
      if (NumReplicas != other.NumReplicas) return false;
      if (!object.Equals(DeviceAssignment, other.DeviceAssignment)) return false;
      if (AliasPassthroughParams != other.AliasPassthroughParams) return false;
      if (NumPartitions != other.NumPartitions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shapeWithOutputLayout_ != null) hash ^= ShapeWithOutputLayout.GetHashCode();
      if (Seed != 0UL) hash ^= Seed.GetHashCode();
      if (debugOptions_ != null) hash ^= DebugOptions.GetHashCode();
      hash ^= deviceHandles_.GetHashCode();
      if (NumReplicas != 0) hash ^= NumReplicas.GetHashCode();
      if (deviceAssignment_ != null) hash ^= DeviceAssignment.GetHashCode();
      if (AliasPassthroughParams != false) hash ^= AliasPassthroughParams.GetHashCode();
      if (NumPartitions != 0) hash ^= NumPartitions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shapeWithOutputLayout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ShapeWithOutputLayout);
      }
      if (Seed != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Seed);
      }
      if (debugOptions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DebugOptions);
      }
      deviceHandles_.WriteTo(output, _repeated_deviceHandles_codec);
      if (NumReplicas != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumReplicas);
      }
      if (deviceAssignment_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DeviceAssignment);
      }
      if (AliasPassthroughParams != false) {
        output.WriteRawTag(64);
        output.WriteBool(AliasPassthroughParams);
      }
      if (NumPartitions != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NumPartitions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shapeWithOutputLayout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShapeWithOutputLayout);
      }
      if (Seed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Seed);
      }
      if (debugOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugOptions);
      }
      size += deviceHandles_.CalculateSize(_repeated_deviceHandles_codec);
      if (NumReplicas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumReplicas);
      }
      if (deviceAssignment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceAssignment);
      }
      if (AliasPassthroughParams != false) {
        size += 1 + 1;
      }
      if (NumPartitions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPartitions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutionOptions other) {
      if (other == null) {
        return;
      }
      if (other.shapeWithOutputLayout_ != null) {
        if (shapeWithOutputLayout_ == null) {
          ShapeWithOutputLayout = new global::Xla.ShapeProto();
        }
        ShapeWithOutputLayout.MergeFrom(other.ShapeWithOutputLayout);
      }
      if (other.Seed != 0UL) {
        Seed = other.Seed;
      }
      if (other.debugOptions_ != null) {
        if (debugOptions_ == null) {
          DebugOptions = new global::Xla.DebugOptions();
        }
        DebugOptions.MergeFrom(other.DebugOptions);
      }
      deviceHandles_.Add(other.deviceHandles_);
      if (other.NumReplicas != 0) {
        NumReplicas = other.NumReplicas;
      }
      if (other.deviceAssignment_ != null) {
        if (deviceAssignment_ == null) {
          DeviceAssignment = new global::Xla.DeviceAssignmentProto();
        }
        DeviceAssignment.MergeFrom(other.DeviceAssignment);
      }
      if (other.AliasPassthroughParams != false) {
        AliasPassthroughParams = other.AliasPassthroughParams;
      }
      if (other.NumPartitions != 0) {
        NumPartitions = other.NumPartitions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (shapeWithOutputLayout_ == null) {
              ShapeWithOutputLayout = new global::Xla.ShapeProto();
            }
            input.ReadMessage(ShapeWithOutputLayout);
            break;
          }
          case 24: {
            Seed = input.ReadUInt64();
            break;
          }
          case 34: {
            if (debugOptions_ == null) {
              DebugOptions = new global::Xla.DebugOptions();
            }
            input.ReadMessage(DebugOptions);
            break;
          }
          case 42: {
            deviceHandles_.AddEntriesFrom(input, _repeated_deviceHandles_codec);
            break;
          }
          case 48: {
            NumReplicas = input.ReadInt32();
            break;
          }
          case 58: {
            if (deviceAssignment_ == null) {
              DeviceAssignment = new global::Xla.DeviceAssignmentProto();
            }
            input.ReadMessage(DeviceAssignment);
            break;
          }
          case 64: {
            AliasPassthroughParams = input.ReadBool();
            break;
          }
          case 72: {
            NumPartitions = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeviceHandlesRequest : pb::IMessage<GetDeviceHandlesRequest> {
    private static readonly pb::MessageParser<GetDeviceHandlesRequest> _parser = new pb::MessageParser<GetDeviceHandlesRequest>(() => new GetDeviceHandlesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeviceHandlesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceHandlesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceHandlesRequest(GetDeviceHandlesRequest other) : this() {
      deviceCount_ = other.deviceCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceHandlesRequest Clone() {
      return new GetDeviceHandlesRequest(this);
    }

    /// <summary>Field number for the "device_count" field.</summary>
    public const int DeviceCountFieldNumber = 1;
    private long deviceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeviceCount {
      get { return deviceCount_; }
      set {
        deviceCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeviceHandlesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeviceHandlesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceCount != other.DeviceCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceCount != 0L) hash ^= DeviceCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeviceCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeviceCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeviceHandlesRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeviceCount != 0L) {
        DeviceCount = other.DeviceCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeviceCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDeviceHandlesResponse : pb::IMessage<GetDeviceHandlesResponse> {
    private static readonly pb::MessageParser<GetDeviceHandlesResponse> _parser = new pb::MessageParser<GetDeviceHandlesResponse>(() => new GetDeviceHandlesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDeviceHandlesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceHandlesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceHandlesResponse(GetDeviceHandlesResponse other) : this() {
      deviceHandles_ = other.deviceHandles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDeviceHandlesResponse Clone() {
      return new GetDeviceHandlesResponse(this);
    }

    /// <summary>Field number for the "device_handles" field.</summary>
    public const int DeviceHandlesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xla.DeviceHandle> _repeated_deviceHandles_codec
        = pb::FieldCodec.ForMessage(10, global::Xla.DeviceHandle.Parser);
    private readonly pbc::RepeatedField<global::Xla.DeviceHandle> deviceHandles_ = new pbc::RepeatedField<global::Xla.DeviceHandle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.DeviceHandle> DeviceHandles {
      get { return deviceHandles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDeviceHandlesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDeviceHandlesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceHandles_.Equals(other.deviceHandles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceHandles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceHandles_.WriteTo(output, _repeated_deviceHandles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceHandles_.CalculateSize(_repeated_deviceHandles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDeviceHandlesResponse other) {
      if (other == null) {
        return;
      }
      deviceHandles_.Add(other.deviceHandles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceHandles_.AddEntriesFrom(input, _repeated_deviceHandles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferToClientRequest : pb::IMessage<TransferToClientRequest> {
    private static readonly pb::MessageParser<TransferToClientRequest> _parser = new pb::MessageParser<TransferToClientRequest>(() => new TransferToClientRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferToClientRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToClientRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToClientRequest(TransferToClientRequest other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      shapeWithLayout_ = other.shapeWithLayout_ != null ? other.shapeWithLayout_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToClientRequest Clone() {
      return new TransferToClientRequest(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Xla.GlobalDataHandle data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.GlobalDataHandle Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "shape_with_layout" field.</summary>
    public const int ShapeWithLayoutFieldNumber = 2;
    private global::Xla.ShapeProto shapeWithLayout_;
    /// <summary>
    /// This optional field directs the service to return the literal in this
    /// layout. A shape is used to hold the layout to accommodate tuples.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ShapeProto ShapeWithLayout {
      get { return shapeWithLayout_; }
      set {
        shapeWithLayout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferToClientRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferToClientRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(ShapeWithLayout, other.ShapeWithLayout)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (shapeWithLayout_ != null) hash ^= ShapeWithLayout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (shapeWithLayout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ShapeWithLayout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (shapeWithLayout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShapeWithLayout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferToClientRequest other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Xla.GlobalDataHandle();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.shapeWithLayout_ != null) {
        if (shapeWithLayout_ == null) {
          ShapeWithLayout = new global::Xla.ShapeProto();
        }
        ShapeWithLayout.MergeFrom(other.ShapeWithLayout);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              Data = new global::Xla.GlobalDataHandle();
            }
            input.ReadMessage(Data);
            break;
          }
          case 18: {
            if (shapeWithLayout_ == null) {
              ShapeWithLayout = new global::Xla.ShapeProto();
            }
            input.ReadMessage(ShapeWithLayout);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferToClientResponse : pb::IMessage<TransferToClientResponse> {
    private static readonly pb::MessageParser<TransferToClientResponse> _parser = new pb::MessageParser<TransferToClientResponse>(() => new TransferToClientResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferToClientResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToClientResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToClientResponse(TransferToClientResponse other) : this() {
      literal_ = other.literal_ != null ? other.literal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToClientResponse Clone() {
      return new TransferToClientResponse(this);
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 1;
    private global::Xla.LiteralProto literal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.LiteralProto Literal {
      get { return literal_; }
      set {
        literal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferToClientResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferToClientResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Literal, other.Literal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (literal_ != null) hash ^= Literal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (literal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (literal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Literal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferToClientResponse other) {
      if (other == null) {
        return;
      }
      if (other.literal_ != null) {
        if (literal_ == null) {
          Literal = new global::Xla.LiteralProto();
        }
        Literal.MergeFrom(other.Literal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (literal_ == null) {
              Literal = new global::Xla.LiteralProto();
            }
            input.ReadMessage(Literal);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferToServerRequest : pb::IMessage<TransferToServerRequest> {
    private static readonly pb::MessageParser<TransferToServerRequest> _parser = new pb::MessageParser<TransferToServerRequest>(() => new TransferToServerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferToServerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToServerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToServerRequest(TransferToServerRequest other) : this() {
      literal_ = other.literal_ != null ? other.literal_.Clone() : null;
      deviceHandle_ = other.deviceHandle_ != null ? other.deviceHandle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToServerRequest Clone() {
      return new TransferToServerRequest(this);
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 1;
    private global::Xla.LiteralProto literal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.LiteralProto Literal {
      get { return literal_; }
      set {
        literal_ = value;
      }
    }

    /// <summary>Field number for the "device_handle" field.</summary>
    public const int DeviceHandleFieldNumber = 2;
    private global::Xla.DeviceHandle deviceHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DeviceHandle DeviceHandle {
      get { return deviceHandle_; }
      set {
        deviceHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferToServerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferToServerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Literal, other.Literal)) return false;
      if (!object.Equals(DeviceHandle, other.DeviceHandle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (literal_ != null) hash ^= Literal.GetHashCode();
      if (deviceHandle_ != null) hash ^= DeviceHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (literal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (deviceHandle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (literal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Literal);
      }
      if (deviceHandle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferToServerRequest other) {
      if (other == null) {
        return;
      }
      if (other.literal_ != null) {
        if (literal_ == null) {
          Literal = new global::Xla.LiteralProto();
        }
        Literal.MergeFrom(other.Literal);
      }
      if (other.deviceHandle_ != null) {
        if (deviceHandle_ == null) {
          DeviceHandle = new global::Xla.DeviceHandle();
        }
        DeviceHandle.MergeFrom(other.DeviceHandle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (literal_ == null) {
              Literal = new global::Xla.LiteralProto();
            }
            input.ReadMessage(Literal);
            break;
          }
          case 18: {
            if (deviceHandle_ == null) {
              DeviceHandle = new global::Xla.DeviceHandle();
            }
            input.ReadMessage(DeviceHandle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferToServerResponse : pb::IMessage<TransferToServerResponse> {
    private static readonly pb::MessageParser<TransferToServerResponse> _parser = new pb::MessageParser<TransferToServerResponse>(() => new TransferToServerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferToServerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToServerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToServerResponse(TransferToServerResponse other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToServerResponse Clone() {
      return new TransferToServerResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Xla.GlobalDataHandle data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.GlobalDataHandle Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferToServerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferToServerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferToServerResponse other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Xla.GlobalDataHandle();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              Data = new global::Xla.GlobalDataHandle();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferToInfeedRequest : pb::IMessage<TransferToInfeedRequest> {
    private static readonly pb::MessageParser<TransferToInfeedRequest> _parser = new pb::MessageParser<TransferToInfeedRequest>(() => new TransferToInfeedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferToInfeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToInfeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToInfeedRequest(TransferToInfeedRequest other) : this() {
      literal_ = other.literal_ != null ? other.literal_.Clone() : null;
      replicaId_ = other.replicaId_;
      deviceHandle_ = other.deviceHandle_ != null ? other.deviceHandle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToInfeedRequest Clone() {
      return new TransferToInfeedRequest(this);
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 1;
    private global::Xla.LiteralProto literal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.LiteralProto Literal {
      get { return literal_; }
      set {
        literal_ = value;
      }
    }

    /// <summary>Field number for the "replica_id" field.</summary>
    public const int ReplicaIdFieldNumber = 2;
    private long replicaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = value;
      }
    }

    /// <summary>Field number for the "device_handle" field.</summary>
    public const int DeviceHandleFieldNumber = 3;
    private global::Xla.DeviceHandle deviceHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DeviceHandle DeviceHandle {
      get { return deviceHandle_; }
      set {
        deviceHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferToInfeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferToInfeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Literal, other.Literal)) return false;
      if (ReplicaId != other.ReplicaId) return false;
      if (!object.Equals(DeviceHandle, other.DeviceHandle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (literal_ != null) hash ^= Literal.GetHashCode();
      if (ReplicaId != 0L) hash ^= ReplicaId.GetHashCode();
      if (deviceHandle_ != null) hash ^= DeviceHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (literal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (ReplicaId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReplicaId);
      }
      if (deviceHandle_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeviceHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (literal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Literal);
      }
      if (ReplicaId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReplicaId);
      }
      if (deviceHandle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferToInfeedRequest other) {
      if (other == null) {
        return;
      }
      if (other.literal_ != null) {
        if (literal_ == null) {
          Literal = new global::Xla.LiteralProto();
        }
        Literal.MergeFrom(other.Literal);
      }
      if (other.ReplicaId != 0L) {
        ReplicaId = other.ReplicaId;
      }
      if (other.deviceHandle_ != null) {
        if (deviceHandle_ == null) {
          DeviceHandle = new global::Xla.DeviceHandle();
        }
        DeviceHandle.MergeFrom(other.DeviceHandle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (literal_ == null) {
              Literal = new global::Xla.LiteralProto();
            }
            input.ReadMessage(Literal);
            break;
          }
          case 16: {
            ReplicaId = input.ReadInt64();
            break;
          }
          case 26: {
            if (deviceHandle_ == null) {
              DeviceHandle = new global::Xla.DeviceHandle();
            }
            input.ReadMessage(DeviceHandle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferToInfeedResponse : pb::IMessage<TransferToInfeedResponse> {
    private static readonly pb::MessageParser<TransferToInfeedResponse> _parser = new pb::MessageParser<TransferToInfeedResponse>(() => new TransferToInfeedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferToInfeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToInfeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToInfeedResponse(TransferToInfeedResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToInfeedResponse Clone() {
      return new TransferToInfeedResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferToInfeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferToInfeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferToInfeedResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class TransferFromOutfeedRequest : pb::IMessage<TransferFromOutfeedRequest> {
    private static readonly pb::MessageParser<TransferFromOutfeedRequest> _parser = new pb::MessageParser<TransferFromOutfeedRequest>(() => new TransferFromOutfeedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferFromOutfeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromOutfeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromOutfeedRequest(TransferFromOutfeedRequest other) : this() {
      shapeWithLayout_ = other.shapeWithLayout_ != null ? other.shapeWithLayout_.Clone() : null;
      replicaId_ = other.replicaId_;
      deviceHandle_ = other.deviceHandle_ != null ? other.deviceHandle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromOutfeedRequest Clone() {
      return new TransferFromOutfeedRequest(this);
    }

    /// <summary>Field number for the "shape_with_layout" field.</summary>
    public const int ShapeWithLayoutFieldNumber = 1;
    private global::Xla.ShapeProto shapeWithLayout_;
    /// <summary>
    /// This optional field directs the service to return the literal in this
    /// layout. A shape is used to hold the layout to accommodate tuples.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ShapeProto ShapeWithLayout {
      get { return shapeWithLayout_; }
      set {
        shapeWithLayout_ = value;
      }
    }

    /// <summary>Field number for the "replica_id" field.</summary>
    public const int ReplicaIdFieldNumber = 2;
    private long replicaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReplicaId {
      get { return replicaId_; }
      set {
        replicaId_ = value;
      }
    }

    /// <summary>Field number for the "device_handle" field.</summary>
    public const int DeviceHandleFieldNumber = 3;
    private global::Xla.DeviceHandle deviceHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DeviceHandle DeviceHandle {
      get { return deviceHandle_; }
      set {
        deviceHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferFromOutfeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferFromOutfeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ShapeWithLayout, other.ShapeWithLayout)) return false;
      if (ReplicaId != other.ReplicaId) return false;
      if (!object.Equals(DeviceHandle, other.DeviceHandle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shapeWithLayout_ != null) hash ^= ShapeWithLayout.GetHashCode();
      if (ReplicaId != 0L) hash ^= ReplicaId.GetHashCode();
      if (deviceHandle_ != null) hash ^= DeviceHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shapeWithLayout_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ShapeWithLayout);
      }
      if (ReplicaId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ReplicaId);
      }
      if (deviceHandle_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeviceHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shapeWithLayout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShapeWithLayout);
      }
      if (ReplicaId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReplicaId);
      }
      if (deviceHandle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferFromOutfeedRequest other) {
      if (other == null) {
        return;
      }
      if (other.shapeWithLayout_ != null) {
        if (shapeWithLayout_ == null) {
          ShapeWithLayout = new global::Xla.ShapeProto();
        }
        ShapeWithLayout.MergeFrom(other.ShapeWithLayout);
      }
      if (other.ReplicaId != 0L) {
        ReplicaId = other.ReplicaId;
      }
      if (other.deviceHandle_ != null) {
        if (deviceHandle_ == null) {
          DeviceHandle = new global::Xla.DeviceHandle();
        }
        DeviceHandle.MergeFrom(other.DeviceHandle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (shapeWithLayout_ == null) {
              ShapeWithLayout = new global::Xla.ShapeProto();
            }
            input.ReadMessage(ShapeWithLayout);
            break;
          }
          case 16: {
            ReplicaId = input.ReadInt64();
            break;
          }
          case 26: {
            if (deviceHandle_ == null) {
              DeviceHandle = new global::Xla.DeviceHandle();
            }
            input.ReadMessage(DeviceHandle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferFromOutfeedResponse : pb::IMessage<TransferFromOutfeedResponse> {
    private static readonly pb::MessageParser<TransferFromOutfeedResponse> _parser = new pb::MessageParser<TransferFromOutfeedResponse>(() => new TransferFromOutfeedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferFromOutfeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromOutfeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromOutfeedResponse(TransferFromOutfeedResponse other) : this() {
      literal_ = other.literal_ != null ? other.literal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromOutfeedResponse Clone() {
      return new TransferFromOutfeedResponse(this);
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 1;
    private global::Xla.LiteralProto literal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.LiteralProto Literal {
      get { return literal_; }
      set {
        literal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferFromOutfeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferFromOutfeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Literal, other.Literal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (literal_ != null) hash ^= Literal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (literal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (literal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Literal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferFromOutfeedResponse other) {
      if (other == null) {
        return;
      }
      if (other.literal_ != null) {
        if (literal_ == null) {
          Literal = new global::Xla.LiteralProto();
        }
        Literal.MergeFrom(other.Literal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (literal_ == null) {
              Literal = new global::Xla.LiteralProto();
            }
            input.ReadMessage(Literal);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetDeviceRequest : pb::IMessage<ResetDeviceRequest> {
    private static readonly pb::MessageParser<ResetDeviceRequest> _parser = new pb::MessageParser<ResetDeviceRequest>(() => new ResetDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetDeviceRequest(ResetDeviceRequest other) : this() {
      deviceHandle_ = other.deviceHandle_ != null ? other.deviceHandle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetDeviceRequest Clone() {
      return new ResetDeviceRequest(this);
    }

    /// <summary>Field number for the "device_handle" field.</summary>
    public const int DeviceHandleFieldNumber = 1;
    private global::Xla.DeviceHandle deviceHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DeviceHandle DeviceHandle {
      get { return deviceHandle_; }
      set {
        deviceHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeviceHandle, other.DeviceHandle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deviceHandle_ != null) hash ^= DeviceHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deviceHandle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeviceHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deviceHandle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.deviceHandle_ != null) {
        if (deviceHandle_ == null) {
          DeviceHandle = new global::Xla.DeviceHandle();
        }
        DeviceHandle.MergeFrom(other.DeviceHandle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deviceHandle_ == null) {
              DeviceHandle = new global::Xla.DeviceHandle();
            }
            input.ReadMessage(DeviceHandle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetDeviceResponse : pb::IMessage<ResetDeviceResponse> {
    private static readonly pb::MessageParser<ResetDeviceResponse> _parser = new pb::MessageParser<ResetDeviceResponse>(() => new ResetDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetDeviceResponse(ResetDeviceResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetDeviceResponse Clone() {
      return new ResetDeviceResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetDeviceResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ComputationGraphStatsRequest : pb::IMessage<ComputationGraphStatsRequest> {
    private static readonly pb::MessageParser<ComputationGraphStatsRequest> _parser = new pb::MessageParser<ComputationGraphStatsRequest>(() => new ComputationGraphStatsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComputationGraphStatsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputationGraphStatsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputationGraphStatsRequest(ComputationGraphStatsRequest other) : this() {
      computation_ = other.computation_ != null ? other.computation_.Clone() : null;
      debugOptions_ = other.debugOptions_ != null ? other.debugOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputationGraphStatsRequest Clone() {
      return new ComputationGraphStatsRequest(this);
    }

    /// <summary>Field number for the "computation" field.</summary>
    public const int ComputationFieldNumber = 1;
    private global::Xla.HloModuleProto computation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.HloModuleProto Computation {
      get { return computation_; }
      set {
        computation_ = value;
      }
    }

    /// <summary>Field number for the "debug_options" field.</summary>
    public const int DebugOptionsFieldNumber = 2;
    private global::Xla.DebugOptions debugOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DebugOptions DebugOptions {
      get { return debugOptions_; }
      set {
        debugOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComputationGraphStatsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComputationGraphStatsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Computation, other.Computation)) return false;
      if (!object.Equals(DebugOptions, other.DebugOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (computation_ != null) hash ^= Computation.GetHashCode();
      if (debugOptions_ != null) hash ^= DebugOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (computation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Computation);
      }
      if (debugOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DebugOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (computation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Computation);
      }
      if (debugOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComputationGraphStatsRequest other) {
      if (other == null) {
        return;
      }
      if (other.computation_ != null) {
        if (computation_ == null) {
          Computation = new global::Xla.HloModuleProto();
        }
        Computation.MergeFrom(other.Computation);
      }
      if (other.debugOptions_ != null) {
        if (debugOptions_ == null) {
          DebugOptions = new global::Xla.DebugOptions();
        }
        DebugOptions.MergeFrom(other.DebugOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (computation_ == null) {
              Computation = new global::Xla.HloModuleProto();
            }
            input.ReadMessage(Computation);
            break;
          }
          case 18: {
            if (debugOptions_ == null) {
              DebugOptions = new global::Xla.DebugOptions();
            }
            input.ReadMessage(DebugOptions);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComputationStatsResponse : pb::IMessage<ComputationStatsResponse> {
    private static readonly pb::MessageParser<ComputationStatsResponse> _parser = new pb::MessageParser<ComputationStatsResponse>(() => new ComputationStatsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComputationStatsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputationStatsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputationStatsResponse(ComputationStatsResponse other) : this() {
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputationStatsResponse Clone() {
      return new ComputationStatsResponse(this);
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 1;
    private global::Xla.ComputationStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ComputationStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComputationStatsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComputationStatsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stats, other.Stats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stats_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComputationStatsResponse other) {
      if (other == null) {
        return;
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::Xla.ComputationStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stats_ == null) {
              Stats = new global::Xla.ComputationStats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateChannelHandleRequest : pb::IMessage<CreateChannelHandleRequest> {
    private static readonly pb::MessageParser<CreateChannelHandleRequest> _parser = new pb::MessageParser<CreateChannelHandleRequest>(() => new CreateChannelHandleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateChannelHandleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChannelHandleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChannelHandleRequest(CreateChannelHandleRequest other) : this() {
      channelType_ = other.channelType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChannelHandleRequest Clone() {
      return new CreateChannelHandleRequest(this);
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private global::Xla.ChannelHandle.Types.ChannelType channelType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ChannelHandle.Types.ChannelType ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateChannelHandleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateChannelHandleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelType != 0) hash ^= ChannelType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateChannelHandleRequest other) {
      if (other == null) {
        return;
      }
      if (other.ChannelType != 0) {
        ChannelType = other.ChannelType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = (global::Xla.ChannelHandle.Types.ChannelType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateChannelHandleResponse : pb::IMessage<CreateChannelHandleResponse> {
    private static readonly pb::MessageParser<CreateChannelHandleResponse> _parser = new pb::MessageParser<CreateChannelHandleResponse>(() => new CreateChannelHandleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateChannelHandleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChannelHandleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChannelHandleResponse(CreateChannelHandleResponse other) : this() {
      channel_ = other.channel_ != null ? other.channel_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateChannelHandleResponse Clone() {
      return new CreateChannelHandleResponse(this);
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private global::Xla.ChannelHandle channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ChannelHandle Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateChannelHandleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateChannelHandleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Channel, other.Channel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channel_ != null) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (channel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateChannelHandleResponse other) {
      if (other == null) {
        return;
      }
      if (other.channel_ != null) {
        if (channel_ == null) {
          Channel = new global::Xla.ChannelHandle();
        }
        Channel.MergeFrom(other.Channel);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (channel_ == null) {
              Channel = new global::Xla.ChannelHandle();
            }
            input.ReadMessage(Channel);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnregisterRequest : pb::IMessage<UnregisterRequest> {
    private static readonly pb::MessageParser<UnregisterRequest> _parser = new pb::MessageParser<UnregisterRequest>(() => new UnregisterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnregisterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnregisterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnregisterRequest(UnregisterRequest other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnregisterRequest Clone() {
      return new UnregisterRequest(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xla.GlobalDataHandle> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Xla.GlobalDataHandle.Parser);
    private readonly pbc::RepeatedField<global::Xla.GlobalDataHandle> data_ = new pbc::RepeatedField<global::Xla.GlobalDataHandle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.GlobalDataHandle> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnregisterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnregisterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnregisterRequest other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnregisterResponse : pb::IMessage<UnregisterResponse> {
    private static readonly pb::MessageParser<UnregisterResponse> _parser = new pb::MessageParser<UnregisterResponse>(() => new UnregisterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnregisterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnregisterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnregisterResponse(UnregisterResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnregisterResponse Clone() {
      return new UnregisterResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnregisterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnregisterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnregisterResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CompileRequest : pb::IMessage<CompileRequest> {
    private static readonly pb::MessageParser<CompileRequest> _parser = new pb::MessageParser<CompileRequest>(() => new CompileRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompileRequest(CompileRequest other) : this() {
      computation_ = other.computation_ != null ? other.computation_.Clone() : null;
      executionOptions_ = other.executionOptions_ != null ? other.executionOptions_.Clone() : null;
      inputShapeWithLayout_ = other.inputShapeWithLayout_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompileRequest Clone() {
      return new CompileRequest(this);
    }

    /// <summary>Field number for the "computation" field.</summary>
    public const int ComputationFieldNumber = 1;
    private global::Xla.HloModuleProto computation_;
    /// <summary>
    /// The graph to be compiled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.HloModuleProto Computation {
      get { return computation_; }
      set {
        computation_ = value;
      }
    }

    /// <summary>Field number for the "execution_options" field.</summary>
    public const int ExecutionOptionsFieldNumber = 2;
    private global::Xla.ExecutionOptions executionOptions_;
    /// <summary>
    /// Options that affect how XLA compiles code to service this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ExecutionOptions ExecutionOptions {
      get { return executionOptions_; }
      set {
        executionOptions_ = value;
      }
    }

    /// <summary>Field number for the "input_shape_with_layout" field.</summary>
    public const int InputShapeWithLayoutFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Xla.ShapeProto> _repeated_inputShapeWithLayout_codec
        = pb::FieldCodec.ForMessage(26, global::Xla.ShapeProto.Parser);
    private readonly pbc::RepeatedField<global::Xla.ShapeProto> inputShapeWithLayout_ = new pbc::RepeatedField<global::Xla.ShapeProto>();
    /// <summary>
    /// The layouts of the input arguments. If not set, the default layout will be
    /// used. Although the real arguments are not needed in compilation, the
    /// layouts of the arguments can affect the compilation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.ShapeProto> InputShapeWithLayout {
      get { return inputShapeWithLayout_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Computation, other.Computation)) return false;
      if (!object.Equals(ExecutionOptions, other.ExecutionOptions)) return false;
      if(!inputShapeWithLayout_.Equals(other.inputShapeWithLayout_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (computation_ != null) hash ^= Computation.GetHashCode();
      if (executionOptions_ != null) hash ^= ExecutionOptions.GetHashCode();
      hash ^= inputShapeWithLayout_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (computation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Computation);
      }
      if (executionOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExecutionOptions);
      }
      inputShapeWithLayout_.WriteTo(output, _repeated_inputShapeWithLayout_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (computation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Computation);
      }
      if (executionOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecutionOptions);
      }
      size += inputShapeWithLayout_.CalculateSize(_repeated_inputShapeWithLayout_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompileRequest other) {
      if (other == null) {
        return;
      }
      if (other.computation_ != null) {
        if (computation_ == null) {
          Computation = new global::Xla.HloModuleProto();
        }
        Computation.MergeFrom(other.Computation);
      }
      if (other.executionOptions_ != null) {
        if (executionOptions_ == null) {
          ExecutionOptions = new global::Xla.ExecutionOptions();
        }
        ExecutionOptions.MergeFrom(other.ExecutionOptions);
      }
      inputShapeWithLayout_.Add(other.inputShapeWithLayout_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (computation_ == null) {
              Computation = new global::Xla.HloModuleProto();
            }
            input.ReadMessage(Computation);
            break;
          }
          case 18: {
            if (executionOptions_ == null) {
              ExecutionOptions = new global::Xla.ExecutionOptions();
            }
            input.ReadMessage(ExecutionOptions);
            break;
          }
          case 26: {
            inputShapeWithLayout_.AddEntriesFrom(input, _repeated_inputShapeWithLayout_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompileResponse : pb::IMessage<CompileResponse> {
    private static readonly pb::MessageParser<CompileResponse> _parser = new pb::MessageParser<CompileResponse>(() => new CompileResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompileResponse(CompileResponse other) : this() {
      handle_ = other.handle_ != null ? other.handle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompileResponse Clone() {
      return new CompileResponse(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private global::Xla.ExecutionHandle handle_;
    /// <summary>
    /// The handle to the executable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ExecutionHandle Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Handle, other.Handle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (handle_ != null) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (handle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (handle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompileResponse other) {
      if (other == null) {
        return;
      }
      if (other.handle_ != null) {
        if (handle_ == null) {
          Handle = new global::Xla.ExecutionHandle();
        }
        Handle.MergeFrom(other.Handle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (handle_ == null) {
              Handle = new global::Xla.ExecutionHandle();
            }
            input.ReadMessage(Handle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecuteRequest : pb::IMessage<ExecuteRequest> {
    private static readonly pb::MessageParser<ExecuteRequest> _parser = new pb::MessageParser<ExecuteRequest>(() => new ExecuteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteRequest(ExecuteRequest other) : this() {
      handle_ = other.handle_ != null ? other.handle_.Clone() : null;
      arguments_ = other.arguments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteRequest Clone() {
      return new ExecuteRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private global::Xla.ExecutionHandle handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ExecutionHandle Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xla.GlobalDataHandle> _repeated_arguments_codec
        = pb::FieldCodec.ForMessage(18, global::Xla.GlobalDataHandle.Parser);
    private readonly pbc::RepeatedField<global::Xla.GlobalDataHandle> arguments_ = new pbc::RepeatedField<global::Xla.GlobalDataHandle>();
    /// <summary>
    /// The shape and layout of the arguments must be the same as the those of the
    /// executable's parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.GlobalDataHandle> Arguments {
      get { return arguments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Handle, other.Handle)) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (handle_ != null) hash ^= Handle.GetHashCode();
      hash ^= arguments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (handle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Handle);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (handle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handle);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteRequest other) {
      if (other == null) {
        return;
      }
      if (other.handle_ != null) {
        if (handle_ == null) {
          Handle = new global::Xla.ExecutionHandle();
        }
        Handle.MergeFrom(other.Handle);
      }
      arguments_.Add(other.arguments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (handle_ == null) {
              Handle = new global::Xla.ExecutionHandle();
            }
            input.ReadMessage(Handle);
            break;
          }
          case 18: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO(b/118493728): Remove this and ExecuteGraphParallelRequest and replace
  /// the uses with calls to Compile and Execute.
  /// </summary>
  public sealed partial class ExecuteGraphRequest : pb::IMessage<ExecuteGraphRequest> {
    private static readonly pb::MessageParser<ExecuteGraphRequest> _parser = new pb::MessageParser<ExecuteGraphRequest>(() => new ExecuteGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteGraphRequest(ExecuteGraphRequest other) : this() {
      computation_ = other.computation_ != null ? other.computation_.Clone() : null;
      arguments_ = other.arguments_.Clone();
      executionOptions_ = other.executionOptions_ != null ? other.executionOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteGraphRequest Clone() {
      return new ExecuteGraphRequest(this);
    }

    /// <summary>Field number for the "computation" field.</summary>
    public const int ComputationFieldNumber = 1;
    private global::Xla.HloModuleProto computation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.HloModuleProto Computation {
      get { return computation_; }
      set {
        computation_ = value;
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Xla.GlobalDataHandle> _repeated_arguments_codec
        = pb::FieldCodec.ForMessage(18, global::Xla.GlobalDataHandle.Parser);
    private readonly pbc::RepeatedField<global::Xla.GlobalDataHandle> arguments_ = new pbc::RepeatedField<global::Xla.GlobalDataHandle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.GlobalDataHandle> Arguments {
      get { return arguments_; }
    }

    /// <summary>Field number for the "execution_options" field.</summary>
    public const int ExecutionOptionsFieldNumber = 3;
    private global::Xla.ExecutionOptions executionOptions_;
    /// <summary>
    /// Options that affect how XLA compiles and runs code to service this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ExecutionOptions ExecutionOptions {
      get { return executionOptions_; }
      set {
        executionOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Computation, other.Computation)) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      if (!object.Equals(ExecutionOptions, other.ExecutionOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (computation_ != null) hash ^= Computation.GetHashCode();
      hash ^= arguments_.GetHashCode();
      if (executionOptions_ != null) hash ^= ExecutionOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (computation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Computation);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
      if (executionOptions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExecutionOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (computation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Computation);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      if (executionOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecutionOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.computation_ != null) {
        if (computation_ == null) {
          Computation = new global::Xla.HloModuleProto();
        }
        Computation.MergeFrom(other.Computation);
      }
      arguments_.Add(other.arguments_);
      if (other.executionOptions_ != null) {
        if (executionOptions_ == null) {
          ExecutionOptions = new global::Xla.ExecutionOptions();
        }
        ExecutionOptions.MergeFrom(other.ExecutionOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (computation_ == null) {
              Computation = new global::Xla.HloModuleProto();
            }
            input.ReadMessage(Computation);
            break;
          }
          case 18: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
          case 26: {
            if (executionOptions_ == null) {
              ExecutionOptions = new global::Xla.ExecutionOptions();
            }
            input.ReadMessage(ExecutionOptions);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecuteGraphParallelRequest : pb::IMessage<ExecuteGraphParallelRequest> {
    private static readonly pb::MessageParser<ExecuteGraphParallelRequest> _parser = new pb::MessageParser<ExecuteGraphParallelRequest>(() => new ExecuteGraphParallelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteGraphParallelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteGraphParallelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteGraphParallelRequest(ExecuteGraphParallelRequest other) : this() {
      requests_ = other.requests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteGraphParallelRequest Clone() {
      return new ExecuteGraphParallelRequest(this);
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xla.ExecuteGraphRequest> _repeated_requests_codec
        = pb::FieldCodec.ForMessage(10, global::Xla.ExecuteGraphRequest.Parser);
    private readonly pbc::RepeatedField<global::Xla.ExecuteGraphRequest> requests_ = new pbc::RepeatedField<global::Xla.ExecuteGraphRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.ExecuteGraphRequest> Requests {
      get { return requests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteGraphParallelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteGraphParallelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requests_.Equals(other.requests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requests_.WriteTo(output, _repeated_requests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requests_.CalculateSize(_repeated_requests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteGraphParallelRequest other) {
      if (other == null) {
        return;
      }
      requests_.Add(other.requests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            requests_.AddEntriesFrom(input, _repeated_requests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecuteResponse : pb::IMessage<ExecuteResponse> {
    private static readonly pb::MessageParser<ExecuteResponse> _parser = new pb::MessageParser<ExecuteResponse>(() => new ExecuteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteResponse(ExecuteResponse other) : this() {
      output_ = other.output_ != null ? other.output_.Clone() : null;
      profile_ = other.profile_ != null ? other.profile_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteResponse Clone() {
      return new ExecuteResponse(this);
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 1;
    private global::Xla.GlobalDataHandle output_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.GlobalDataHandle Output {
      get { return output_; }
      set {
        output_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 2;
    private global::Xla.ExecutionProfile profile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ExecutionProfile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Output, other.Output)) return false;
      if (!object.Equals(Profile, other.Profile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (output_ != null) hash ^= Output.GetHashCode();
      if (profile_ != null) hash ^= Profile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (output_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Output);
      }
      if (profile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Profile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (output_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Output);
      }
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteResponse other) {
      if (other == null) {
        return;
      }
      if (other.output_ != null) {
        if (output_ == null) {
          Output = new global::Xla.GlobalDataHandle();
        }
        Output.MergeFrom(other.Output);
      }
      if (other.profile_ != null) {
        if (profile_ == null) {
          Profile = new global::Xla.ExecutionProfile();
        }
        Profile.MergeFrom(other.Profile);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (output_ == null) {
              Output = new global::Xla.GlobalDataHandle();
            }
            input.ReadMessage(Output);
            break;
          }
          case 18: {
            if (profile_ == null) {
              Profile = new global::Xla.ExecutionProfile();
            }
            input.ReadMessage(Profile);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecuteParallelResponse : pb::IMessage<ExecuteParallelResponse> {
    private static readonly pb::MessageParser<ExecuteParallelResponse> _parser = new pb::MessageParser<ExecuteParallelResponse>(() => new ExecuteParallelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecuteParallelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteParallelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteParallelResponse(ExecuteParallelResponse other) : this() {
      responses_ = other.responses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecuteParallelResponse Clone() {
      return new ExecuteParallelResponse(this);
    }

    /// <summary>Field number for the "responses" field.</summary>
    public const int ResponsesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xla.ExecuteResponse> _repeated_responses_codec
        = pb::FieldCodec.ForMessage(10, global::Xla.ExecuteResponse.Parser);
    private readonly pbc::RepeatedField<global::Xla.ExecuteResponse> responses_ = new pbc::RepeatedField<global::Xla.ExecuteResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.ExecuteResponse> Responses {
      get { return responses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecuteParallelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecuteParallelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!responses_.Equals(other.responses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= responses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      responses_.WriteTo(output, _repeated_responses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += responses_.CalculateSize(_repeated_responses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecuteParallelResponse other) {
      if (other == null) {
        return;
      }
      responses_.Add(other.responses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            responses_.AddEntriesFrom(input, _repeated_responses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WaitForExecutionRequest : pb::IMessage<WaitForExecutionRequest> {
    private static readonly pb::MessageParser<WaitForExecutionRequest> _parser = new pb::MessageParser<WaitForExecutionRequest>(() => new WaitForExecutionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaitForExecutionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitForExecutionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitForExecutionRequest(WaitForExecutionRequest other) : this() {
      execution_ = other.execution_ != null ? other.execution_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitForExecutionRequest Clone() {
      return new WaitForExecutionRequest(this);
    }

    /// <summary>Field number for the "execution" field.</summary>
    public const int ExecutionFieldNumber = 1;
    private global::Xla.ExecutionHandle execution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ExecutionHandle Execution {
      get { return execution_; }
      set {
        execution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WaitForExecutionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WaitForExecutionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Execution, other.Execution)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (execution_ != null) hash ^= Execution.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (execution_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Execution);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (execution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Execution);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WaitForExecutionRequest other) {
      if (other == null) {
        return;
      }
      if (other.execution_ != null) {
        if (execution_ == null) {
          Execution = new global::Xla.ExecutionHandle();
        }
        Execution.MergeFrom(other.Execution);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (execution_ == null) {
              Execution = new global::Xla.ExecutionHandle();
            }
            input.ReadMessage(Execution);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WaitForExecutionResponse : pb::IMessage<WaitForExecutionResponse> {
    private static readonly pb::MessageParser<WaitForExecutionResponse> _parser = new pb::MessageParser<WaitForExecutionResponse>(() => new WaitForExecutionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaitForExecutionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitForExecutionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitForExecutionResponse(WaitForExecutionResponse other) : this() {
      output_ = other.output_ != null ? other.output_.Clone() : null;
      profile_ = other.profile_ != null ? other.profile_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitForExecutionResponse Clone() {
      return new WaitForExecutionResponse(this);
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 1;
    private global::Xla.GlobalDataHandle output_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.GlobalDataHandle Output {
      get { return output_; }
      set {
        output_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 2;
    private global::Xla.ExecutionProfile profile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ExecutionProfile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WaitForExecutionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WaitForExecutionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Output, other.Output)) return false;
      if (!object.Equals(Profile, other.Profile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (output_ != null) hash ^= Output.GetHashCode();
      if (profile_ != null) hash ^= Profile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (output_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Output);
      }
      if (profile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Profile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (output_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Output);
      }
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WaitForExecutionResponse other) {
      if (other == null) {
        return;
      }
      if (other.output_ != null) {
        if (output_ == null) {
          Output = new global::Xla.GlobalDataHandle();
        }
        Output.MergeFrom(other.Output);
      }
      if (other.profile_ != null) {
        if (profile_ == null) {
          Profile = new global::Xla.ExecutionProfile();
        }
        Profile.MergeFrom(other.Profile);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (output_ == null) {
              Output = new global::Xla.GlobalDataHandle();
            }
            input.ReadMessage(Output);
            break;
          }
          case 18: {
            if (profile_ == null) {
              Profile = new global::Xla.ExecutionProfile();
            }
            input.ReadMessage(Profile);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComputeConstantGraphRequest : pb::IMessage<ComputeConstantGraphRequest> {
    private static readonly pb::MessageParser<ComputeConstantGraphRequest> _parser = new pb::MessageParser<ComputeConstantGraphRequest>(() => new ComputeConstantGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComputeConstantGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeConstantGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeConstantGraphRequest(ComputeConstantGraphRequest other) : this() {
      computation_ = other.computation_ != null ? other.computation_.Clone() : null;
      outputLayout_ = other.outputLayout_ != null ? other.outputLayout_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeConstantGraphRequest Clone() {
      return new ComputeConstantGraphRequest(this);
    }

    /// <summary>Field number for the "computation" field.</summary>
    public const int ComputationFieldNumber = 1;
    private global::Xla.HloModuleProto computation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.HloModuleProto Computation {
      get { return computation_; }
      set {
        computation_ = value;
      }
    }

    /// <summary>Field number for the "output_layout" field.</summary>
    public const int OutputLayoutFieldNumber = 2;
    private global::Xla.LayoutProto outputLayout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.LayoutProto OutputLayout {
      get { return outputLayout_; }
      set {
        outputLayout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComputeConstantGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComputeConstantGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Computation, other.Computation)) return false;
      if (!object.Equals(OutputLayout, other.OutputLayout)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (computation_ != null) hash ^= Computation.GetHashCode();
      if (outputLayout_ != null) hash ^= OutputLayout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (computation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Computation);
      }
      if (outputLayout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OutputLayout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (computation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Computation);
      }
      if (outputLayout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputLayout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComputeConstantGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.computation_ != null) {
        if (computation_ == null) {
          Computation = new global::Xla.HloModuleProto();
        }
        Computation.MergeFrom(other.Computation);
      }
      if (other.outputLayout_ != null) {
        if (outputLayout_ == null) {
          OutputLayout = new global::Xla.LayoutProto();
        }
        OutputLayout.MergeFrom(other.OutputLayout);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (computation_ == null) {
              Computation = new global::Xla.HloModuleProto();
            }
            input.ReadMessage(Computation);
            break;
          }
          case 18: {
            if (outputLayout_ == null) {
              OutputLayout = new global::Xla.LayoutProto();
            }
            input.ReadMessage(OutputLayout);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComputeConstantResponse : pb::IMessage<ComputeConstantResponse> {
    private static readonly pb::MessageParser<ComputeConstantResponse> _parser = new pb::MessageParser<ComputeConstantResponse>(() => new ComputeConstantResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComputeConstantResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeConstantResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeConstantResponse(ComputeConstantResponse other) : this() {
      literal_ = other.literal_ != null ? other.literal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeConstantResponse Clone() {
      return new ComputeConstantResponse(this);
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 1;
    private global::Xla.LiteralProto literal_;
    /// <summary>
    /// A LiteralProto is returned directly for this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.LiteralProto Literal {
      get { return literal_; }
      set {
        literal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComputeConstantResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComputeConstantResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Literal, other.Literal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (literal_ != null) hash ^= Literal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (literal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (literal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Literal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComputeConstantResponse other) {
      if (other == null) {
        return;
      }
      if (other.literal_ != null) {
        if (literal_ == null) {
          Literal = new global::Xla.LiteralProto();
        }
        Literal.MergeFrom(other.Literal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (literal_ == null) {
              Literal = new global::Xla.LiteralProto();
            }
            input.ReadMessage(Literal);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeconstructTupleRequest : pb::IMessage<DeconstructTupleRequest> {
    private static readonly pb::MessageParser<DeconstructTupleRequest> _parser = new pb::MessageParser<DeconstructTupleRequest>(() => new DeconstructTupleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeconstructTupleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeconstructTupleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeconstructTupleRequest(DeconstructTupleRequest other) : this() {
      tupleHandle_ = other.tupleHandle_ != null ? other.tupleHandle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeconstructTupleRequest Clone() {
      return new DeconstructTupleRequest(this);
    }

    /// <summary>Field number for the "tuple_handle" field.</summary>
    public const int TupleHandleFieldNumber = 2;
    private global::Xla.GlobalDataHandle tupleHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.GlobalDataHandle TupleHandle {
      get { return tupleHandle_; }
      set {
        tupleHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeconstructTupleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeconstructTupleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TupleHandle, other.TupleHandle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tupleHandle_ != null) hash ^= TupleHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tupleHandle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TupleHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tupleHandle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TupleHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeconstructTupleRequest other) {
      if (other == null) {
        return;
      }
      if (other.tupleHandle_ != null) {
        if (tupleHandle_ == null) {
          TupleHandle = new global::Xla.GlobalDataHandle();
        }
        TupleHandle.MergeFrom(other.TupleHandle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (tupleHandle_ == null) {
              TupleHandle = new global::Xla.GlobalDataHandle();
            }
            input.ReadMessage(TupleHandle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeconstructTupleResponse : pb::IMessage<DeconstructTupleResponse> {
    private static readonly pb::MessageParser<DeconstructTupleResponse> _parser = new pb::MessageParser<DeconstructTupleResponse>(() => new DeconstructTupleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeconstructTupleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeconstructTupleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeconstructTupleResponse(DeconstructTupleResponse other) : this() {
      elementHandles_ = other.elementHandles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeconstructTupleResponse Clone() {
      return new DeconstructTupleResponse(this);
    }

    /// <summary>Field number for the "element_handles" field.</summary>
    public const int ElementHandlesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xla.GlobalDataHandle> _repeated_elementHandles_codec
        = pb::FieldCodec.ForMessage(10, global::Xla.GlobalDataHandle.Parser);
    private readonly pbc::RepeatedField<global::Xla.GlobalDataHandle> elementHandles_ = new pbc::RepeatedField<global::Xla.GlobalDataHandle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.GlobalDataHandle> ElementHandles {
      get { return elementHandles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeconstructTupleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeconstructTupleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elementHandles_.Equals(other.elementHandles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elementHandles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elementHandles_.WriteTo(output, _repeated_elementHandles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elementHandles_.CalculateSize(_repeated_elementHandles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeconstructTupleResponse other) {
      if (other == null) {
        return;
      }
      elementHandles_.Add(other.elementHandles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elementHandles_.AddEntriesFrom(input, _repeated_elementHandles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadDataRequest : pb::IMessage<LoadDataRequest> {
    private static readonly pb::MessageParser<LoadDataRequest> _parser = new pb::MessageParser<LoadDataRequest>(() => new LoadDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadDataRequest(LoadDataRequest other) : this() {
      columnioTabletPath_ = other.columnioTabletPath_;
      columnioField_ = other.columnioField_;
      elementShape_ = other.elementShape_ != null ? other.elementShape_.Clone() : null;
      offset_ = other.offset_;
      limit_ = other.limit_;
      zip_ = other.zip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadDataRequest Clone() {
      return new LoadDataRequest(this);
    }

    /// <summary>Field number for the "columnio_tablet_path" field.</summary>
    public const int ColumnioTabletPathFieldNumber = 1;
    private string columnioTabletPath_ = "";
    /// <summary>
    /// Describes the path of the ColumnIO tablet to load.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnioTabletPath {
      get { return columnioTabletPath_; }
      set {
        columnioTabletPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columnio_field" field.</summary>
    public const int ColumnioFieldFieldNumber = 2;
    private string columnioField_ = "";
    /// <summary>
    /// Describes the field to load within the ColumnIO tablet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnioField {
      get { return columnioField_; }
      set {
        columnioField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "element_shape" field.</summary>
    public const int ElementShapeFieldNumber = 3;
    private global::Xla.ShapeProto elementShape_;
    /// <summary>
    /// Individual element shape, excluding rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ShapeProto ElementShape {
      get { return elementShape_; }
      set {
        elementShape_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private long offset_;
    /// <summary>
    /// Warning: ColumnIO does not support random-access, so use offset with
    /// caution in performance-critical scenarios.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 5;
    private long limit_;
    /// <summary>
    /// Maximum number of elements (with shape element_shape) to load.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "zip" field.</summary>
    public const int ZipFieldNumber = 6;
    private bool zip_;
    /// <summary>
    /// If more than one item is requested (via limit > 1), then this request
    /// attribute zips together the produced vectors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Zip {
      get { return zip_; }
      set {
        zip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ColumnioTabletPath != other.ColumnioTabletPath) return false;
      if (ColumnioField != other.ColumnioField) return false;
      if (!object.Equals(ElementShape, other.ElementShape)) return false;
      if (Offset != other.Offset) return false;
      if (Limit != other.Limit) return false;
      if (Zip != other.Zip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ColumnioTabletPath.Length != 0) hash ^= ColumnioTabletPath.GetHashCode();
      if (ColumnioField.Length != 0) hash ^= ColumnioField.GetHashCode();
      if (elementShape_ != null) hash ^= ElementShape.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Zip != false) hash ^= Zip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ColumnioTabletPath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ColumnioTabletPath);
      }
      if (ColumnioField.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ColumnioField);
      }
      if (elementShape_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ElementShape);
      }
      if (Offset != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Offset);
      }
      if (Limit != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Limit);
      }
      if (Zip != false) {
        output.WriteRawTag(48);
        output.WriteBool(Zip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ColumnioTabletPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnioTabletPath);
      }
      if (ColumnioField.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnioField);
      }
      if (elementShape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementShape);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Zip != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.ColumnioTabletPath.Length != 0) {
        ColumnioTabletPath = other.ColumnioTabletPath;
      }
      if (other.ColumnioField.Length != 0) {
        ColumnioField = other.ColumnioField;
      }
      if (other.elementShape_ != null) {
        if (elementShape_ == null) {
          ElementShape = new global::Xla.ShapeProto();
        }
        ElementShape.MergeFrom(other.ElementShape);
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Zip != false) {
        Zip = other.Zip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ColumnioTabletPath = input.ReadString();
            break;
          }
          case 18: {
            ColumnioField = input.ReadString();
            break;
          }
          case 26: {
            if (elementShape_ == null) {
              ElementShape = new global::Xla.ShapeProto();
            }
            input.ReadMessage(ElementShape);
            break;
          }
          case 32: {
            Offset = input.ReadInt64();
            break;
          }
          case 40: {
            Limit = input.ReadInt64();
            break;
          }
          case 48: {
            Zip = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadDataResponse : pb::IMessage<LoadDataResponse> {
    private static readonly pb::MessageParser<LoadDataResponse> _parser = new pb::MessageParser<LoadDataResponse>(() => new LoadDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadDataResponse(LoadDataResponse other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      dataShape_ = other.dataShape_ != null ? other.dataShape_.Clone() : null;
      availableRows_ = other.availableRows_;
      rowsLoaded_ = other.rowsLoaded_;
      nanoseconds_ = other.nanoseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadDataResponse Clone() {
      return new LoadDataResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Xla.GlobalDataHandle data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.GlobalDataHandle Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "data_shape" field.</summary>
    public const int DataShapeFieldNumber = 2;
    private global::Xla.ShapeProto dataShape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ShapeProto DataShape {
      get { return dataShape_; }
      set {
        dataShape_ = value;
      }
    }

    /// <summary>Field number for the "available_rows" field.</summary>
    public const int AvailableRowsFieldNumber = 3;
    private long availableRows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AvailableRows {
      get { return availableRows_; }
      set {
        availableRows_ = value;
      }
    }

    /// <summary>Field number for the "rows_loaded" field.</summary>
    public const int RowsLoadedFieldNumber = 4;
    private long rowsLoaded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RowsLoaded {
      get { return rowsLoaded_; }
      set {
        rowsLoaded_ = value;
      }
    }

    /// <summary>Field number for the "nanoseconds" field.</summary>
    public const int NanosecondsFieldNumber = 5;
    private long nanoseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Nanoseconds {
      get { return nanoseconds_; }
      set {
        nanoseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(DataShape, other.DataShape)) return false;
      if (AvailableRows != other.AvailableRows) return false;
      if (RowsLoaded != other.RowsLoaded) return false;
      if (Nanoseconds != other.Nanoseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (dataShape_ != null) hash ^= DataShape.GetHashCode();
      if (AvailableRows != 0L) hash ^= AvailableRows.GetHashCode();
      if (RowsLoaded != 0L) hash ^= RowsLoaded.GetHashCode();
      if (Nanoseconds != 0L) hash ^= Nanoseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (dataShape_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DataShape);
      }
      if (AvailableRows != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AvailableRows);
      }
      if (RowsLoaded != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RowsLoaded);
      }
      if (Nanoseconds != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Nanoseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (dataShape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataShape);
      }
      if (AvailableRows != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailableRows);
      }
      if (RowsLoaded != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RowsLoaded);
      }
      if (Nanoseconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nanoseconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Xla.GlobalDataHandle();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.dataShape_ != null) {
        if (dataShape_ == null) {
          DataShape = new global::Xla.ShapeProto();
        }
        DataShape.MergeFrom(other.DataShape);
      }
      if (other.AvailableRows != 0L) {
        AvailableRows = other.AvailableRows;
      }
      if (other.RowsLoaded != 0L) {
        RowsLoaded = other.RowsLoaded;
      }
      if (other.Nanoseconds != 0L) {
        Nanoseconds = other.Nanoseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              Data = new global::Xla.GlobalDataHandle();
            }
            input.ReadMessage(Data);
            break;
          }
          case 18: {
            if (dataShape_ == null) {
              DataShape = new global::Xla.ShapeProto();
            }
            input.ReadMessage(DataShape);
            break;
          }
          case 24: {
            AvailableRows = input.ReadInt64();
            break;
          }
          case 32: {
            RowsLoaded = input.ReadInt64();
            break;
          }
          case 40: {
            Nanoseconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetShapeRequest : pb::IMessage<GetShapeRequest> {
    private static readonly pb::MessageParser<GetShapeRequest> _parser = new pb::MessageParser<GetShapeRequest>(() => new GetShapeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetShapeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetShapeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetShapeRequest(GetShapeRequest other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetShapeRequest Clone() {
      return new GetShapeRequest(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Xla.GlobalDataHandle data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.GlobalDataHandle Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetShapeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetShapeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetShapeRequest other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Xla.GlobalDataHandle();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              Data = new global::Xla.GlobalDataHandle();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetShapeResponse : pb::IMessage<GetShapeResponse> {
    private static readonly pb::MessageParser<GetShapeResponse> _parser = new pb::MessageParser<GetShapeResponse>(() => new GetShapeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetShapeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetShapeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetShapeResponse(GetShapeResponse other) : this() {
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetShapeResponse Clone() {
      return new GetShapeResponse(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::Xla.ShapeProto shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.ShapeProto Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetShapeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetShapeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shape, other.Shape)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shape_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shape);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetShapeResponse other) {
      if (other == null) {
        return;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          Shape = new global::Xla.ShapeProto();
        }
        Shape.MergeFrom(other.Shape);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (shape_ == null) {
              Shape = new global::Xla.ShapeProto();
            }
            input.ReadMessage(Shape);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnpackRequest : pb::IMessage<UnpackRequest> {
    private static readonly pb::MessageParser<UnpackRequest> _parser = new pb::MessageParser<UnpackRequest>(() => new UnpackRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnpackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnpackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnpackRequest(UnpackRequest other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnpackRequest Clone() {
      return new UnpackRequest(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Xla.GlobalDataHandle data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.GlobalDataHandle Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnpackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnpackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnpackRequest other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Xla.GlobalDataHandle();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              Data = new global::Xla.GlobalDataHandle();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnpackResponse : pb::IMessage<UnpackResponse> {
    private static readonly pb::MessageParser<UnpackResponse> _parser = new pb::MessageParser<UnpackResponse>(() => new UnpackResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnpackResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.XlaReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnpackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnpackResponse(UnpackResponse other) : this() {
      tiedData_ = other.tiedData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnpackResponse Clone() {
      return new UnpackResponse(this);
    }

    /// <summary>Field number for the "tied_data" field.</summary>
    public const int TiedDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xla.GlobalDataHandle> _repeated_tiedData_codec
        = pb::FieldCodec.ForMessage(10, global::Xla.GlobalDataHandle.Parser);
    private readonly pbc::RepeatedField<global::Xla.GlobalDataHandle> tiedData_ = new pbc::RepeatedField<global::Xla.GlobalDataHandle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xla.GlobalDataHandle> TiedData {
      get { return tiedData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnpackResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnpackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tiedData_.Equals(other.tiedData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tiedData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tiedData_.WriteTo(output, _repeated_tiedData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tiedData_.CalculateSize(_repeated_tiedData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnpackResponse other) {
      if (other == null) {
        return;
      }
      tiedData_.Add(other.tiedData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tiedData_.AddEntriesFrom(input, _repeated_tiedData_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
