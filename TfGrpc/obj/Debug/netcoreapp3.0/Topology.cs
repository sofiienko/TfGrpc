// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/tpu/topology.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Tpu {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/tpu/topology.proto</summary>
  public static partial class TopologyReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/tpu/topology.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TopologyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cit0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvdHB1L3RvcG9sb2d5LnByb3Rv",
            "Eg50ZW5zb3JmbG93LnRwdSJ0Cg1Ub3BvbG9neVByb3RvEhIKCm1lc2hfc2hh",
            "cGUYASADKAUSEQoJbnVtX3Rhc2tzGAIgASgFEiAKGG51bV90cHVfZGV2aWNl",
            "c19wZXJfdGFzaxgDIAEoBRIaChJkZXZpY2VfY29vcmRpbmF0ZXMYBCADKAVC",
            "A/gBAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TopologyProto), global::Tensorflow.Tpu.TopologyProto.Parser, new[]{ "MeshShape", "NumTasks", "NumTpuDevicesPerTask", "DeviceCoordinates" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Describes the geometry of a TPU mesh.
  /// </summary>
  public sealed partial class TopologyProto : pb::IMessage<TopologyProto> {
    private static readonly pb::MessageParser<TopologyProto> _parser = new pb::MessageParser<TopologyProto>(() => new TopologyProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopologyProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.TopologyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyProto(TopologyProto other) : this() {
      meshShape_ = other.meshShape_.Clone();
      numTasks_ = other.numTasks_;
      numTpuDevicesPerTask_ = other.numTpuDevicesPerTask_;
      deviceCoordinates_ = other.deviceCoordinates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyProto Clone() {
      return new TopologyProto(this);
    }

    /// <summary>Field number for the "mesh_shape" field.</summary>
    public const int MeshShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_meshShape_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> meshShape_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The dimensions of the TPU topology, in cores. Typically, this is a 3D
    /// topology [x, y, core], where the major dimensions correspond to TPU chips,
    /// and the minor dimension describes the number of cores on a multicore chip.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MeshShape {
      get { return meshShape_; }
    }

    /// <summary>Field number for the "num_tasks" field.</summary>
    public const int NumTasksFieldNumber = 2;
    private int numTasks_;
    /// <summary>
    /// Number of TensorFlow tasks in the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTasks {
      get { return numTasks_; }
      set {
        numTasks_ = value;
      }
    }

    /// <summary>Field number for the "num_tpu_devices_per_task" field.</summary>
    public const int NumTpuDevicesPerTaskFieldNumber = 3;
    private int numTpuDevicesPerTask_;
    /// <summary>
    /// Number of TPU devices per task.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTpuDevicesPerTask {
      get { return numTpuDevicesPerTask_; }
      set {
        numTpuDevicesPerTask_ = value;
      }
    }

    /// <summary>Field number for the "device_coordinates" field.</summary>
    public const int DeviceCoordinatesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_deviceCoordinates_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> deviceCoordinates_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// A flattened rank 3 int32 array with shape
    /// [num_tasks, num_tpu_devices_per_task, len(mesh_shape)].
    /// `tasks` is the number of tasks in the TPU cluster, `devices` is the number
    /// of TPU devices per task, and the minor dimension corresponds to a position
    /// in the TPU mesh topology. Each entry [task, device, axis] gives the
    /// `axis`-th coordinate in the topology of a task/device pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DeviceCoordinates {
      get { return deviceCoordinates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopologyProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopologyProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!meshShape_.Equals(other.meshShape_)) return false;
      if (NumTasks != other.NumTasks) return false;
      if (NumTpuDevicesPerTask != other.NumTpuDevicesPerTask) return false;
      if(!deviceCoordinates_.Equals(other.deviceCoordinates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= meshShape_.GetHashCode();
      if (NumTasks != 0) hash ^= NumTasks.GetHashCode();
      if (NumTpuDevicesPerTask != 0) hash ^= NumTpuDevicesPerTask.GetHashCode();
      hash ^= deviceCoordinates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      meshShape_.WriteTo(output, _repeated_meshShape_codec);
      if (NumTasks != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumTasks);
      }
      if (NumTpuDevicesPerTask != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumTpuDevicesPerTask);
      }
      deviceCoordinates_.WriteTo(output, _repeated_deviceCoordinates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += meshShape_.CalculateSize(_repeated_meshShape_codec);
      if (NumTasks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTasks);
      }
      if (NumTpuDevicesPerTask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTpuDevicesPerTask);
      }
      size += deviceCoordinates_.CalculateSize(_repeated_deviceCoordinates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopologyProto other) {
      if (other == null) {
        return;
      }
      meshShape_.Add(other.meshShape_);
      if (other.NumTasks != 0) {
        NumTasks = other.NumTasks;
      }
      if (other.NumTpuDevicesPerTask != 0) {
        NumTpuDevicesPerTask = other.NumTpuDevicesPerTask;
      }
      deviceCoordinates_.Add(other.deviceCoordinates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            meshShape_.AddEntriesFrom(input, _repeated_meshShape_codec);
            break;
          }
          case 16: {
            NumTasks = input.ReadInt32();
            break;
          }
          case 24: {
            NumTpuDevicesPerTask = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            deviceCoordinates_.AddEntriesFrom(input, _repeated_deviceCoordinates_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
