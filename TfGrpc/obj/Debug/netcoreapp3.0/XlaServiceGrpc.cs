// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/compiler/xla/rpc/xla_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2018 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
// XLA service API.
//
// Users 1) build up computations and 2) create allocations via this API.
// Computations are composed of data flowing between arbitrarily-sized
// vector-oriented operations.
//
// Users build up computations using a ComputationHandle, and talk about
// allocations using GlobalDataHandles.
//
// There are currently no checkpointing capabilities or distribution/replication
// guarantees. The service runs on a single machine (e.g. one task) and that is
// its failure domain.
//
// Canonical example of "alpha * X + Y":
// * Make a computation.
// * Add alpha and X and Y as parameters.
// * Request the multiplication of alpha and X.
// * Request the addition of that result and Y.
//
// Then, pass the computation and appropriately shaped inputs to the XLA
// service's Execute method, which provides a result as a GlobalDataHandle.
//
// All data in XLA computations are conceptually immutable.
//
// Note: this API is subject to change / refinement over time -- use the
// provided client libraries to insulate code from changes to this service API.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Xla {
  /// <summary>
  //////////////////////////
  /// Global data requests
  /// </summary>
  public static partial class XlaService
  {
    static readonly string __ServiceName = "xla.XlaService";

    static readonly grpc::Marshaller<global::Xla.UnregisterRequest> __Marshaller_xla_UnregisterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.UnregisterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.UnregisterResponse> __Marshaller_xla_UnregisterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.UnregisterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.DeconstructTupleRequest> __Marshaller_xla_DeconstructTupleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.DeconstructTupleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.DeconstructTupleResponse> __Marshaller_xla_DeconstructTupleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.DeconstructTupleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.UnpackRequest> __Marshaller_xla_UnpackRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.UnpackRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.UnpackResponse> __Marshaller_xla_UnpackResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.UnpackResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.GetShapeRequest> __Marshaller_xla_GetShapeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.GetShapeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.GetShapeResponse> __Marshaller_xla_GetShapeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.GetShapeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ComputationGraphStatsRequest> __Marshaller_xla_ComputationGraphStatsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ComputationGraphStatsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ComputationStatsResponse> __Marshaller_xla_ComputationStatsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ComputationStatsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.LoadDataRequest> __Marshaller_xla_LoadDataRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.LoadDataRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.LoadDataResponse> __Marshaller_xla_LoadDataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.LoadDataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.TransferToClientRequest> __Marshaller_xla_TransferToClientRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.TransferToClientRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.TransferToClientResponse> __Marshaller_xla_TransferToClientResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.TransferToClientResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.TransferToServerRequest> __Marshaller_xla_TransferToServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.TransferToServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.TransferToServerResponse> __Marshaller_xla_TransferToServerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.TransferToServerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.TransferToInfeedRequest> __Marshaller_xla_TransferToInfeedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.TransferToInfeedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.TransferToInfeedResponse> __Marshaller_xla_TransferToInfeedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.TransferToInfeedResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.TransferFromOutfeedRequest> __Marshaller_xla_TransferFromOutfeedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.TransferFromOutfeedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.TransferFromOutfeedResponse> __Marshaller_xla_TransferFromOutfeedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.TransferFromOutfeedResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ResetDeviceRequest> __Marshaller_xla_ResetDeviceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ResetDeviceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ResetDeviceResponse> __Marshaller_xla_ResetDeviceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ResetDeviceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ComputeConstantGraphRequest> __Marshaller_xla_ComputeConstantGraphRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ComputeConstantGraphRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ComputeConstantResponse> __Marshaller_xla_ComputeConstantResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ComputeConstantResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.GetDeviceHandlesRequest> __Marshaller_xla_GetDeviceHandlesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.GetDeviceHandlesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.GetDeviceHandlesResponse> __Marshaller_xla_GetDeviceHandlesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.GetDeviceHandlesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.CreateChannelHandleRequest> __Marshaller_xla_CreateChannelHandleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.CreateChannelHandleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.CreateChannelHandleResponse> __Marshaller_xla_CreateChannelHandleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.CreateChannelHandleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.CompileRequest> __Marshaller_xla_CompileRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.CompileRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.CompileResponse> __Marshaller_xla_CompileResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.CompileResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ExecuteRequest> __Marshaller_xla_ExecuteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ExecuteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ExecuteResponse> __Marshaller_xla_ExecuteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ExecuteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ExecuteGraphParallelRequest> __Marshaller_xla_ExecuteGraphParallelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ExecuteGraphParallelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.ExecuteParallelResponse> __Marshaller_xla_ExecuteParallelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.ExecuteParallelResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.WaitForExecutionRequest> __Marshaller_xla_WaitForExecutionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.WaitForExecutionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Xla.WaitForExecutionResponse> __Marshaller_xla_WaitForExecutionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Xla.WaitForExecutionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Xla.UnregisterRequest, global::Xla.UnregisterResponse> __Method_Unregister = new grpc::Method<global::Xla.UnregisterRequest, global::Xla.UnregisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unregister",
        __Marshaller_xla_UnregisterRequest,
        __Marshaller_xla_UnregisterResponse);

    static readonly grpc::Method<global::Xla.DeconstructTupleRequest, global::Xla.DeconstructTupleResponse> __Method_DeconstructTuple = new grpc::Method<global::Xla.DeconstructTupleRequest, global::Xla.DeconstructTupleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeconstructTuple",
        __Marshaller_xla_DeconstructTupleRequest,
        __Marshaller_xla_DeconstructTupleResponse);

    static readonly grpc::Method<global::Xla.UnpackRequest, global::Xla.UnpackResponse> __Method_Unpack = new grpc::Method<global::Xla.UnpackRequest, global::Xla.UnpackResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unpack",
        __Marshaller_xla_UnpackRequest,
        __Marshaller_xla_UnpackResponse);

    static readonly grpc::Method<global::Xla.GetShapeRequest, global::Xla.GetShapeResponse> __Method_GetShape = new grpc::Method<global::Xla.GetShapeRequest, global::Xla.GetShapeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetShape",
        __Marshaller_xla_GetShapeRequest,
        __Marshaller_xla_GetShapeResponse);

    static readonly grpc::Method<global::Xla.ComputationGraphStatsRequest, global::Xla.ComputationStatsResponse> __Method_GetComputationGraphStats = new grpc::Method<global::Xla.ComputationGraphStatsRequest, global::Xla.ComputationStatsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetComputationGraphStats",
        __Marshaller_xla_ComputationGraphStatsRequest,
        __Marshaller_xla_ComputationStatsResponse);

    static readonly grpc::Method<global::Xla.LoadDataRequest, global::Xla.LoadDataResponse> __Method_LoadData = new grpc::Method<global::Xla.LoadDataRequest, global::Xla.LoadDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoadData",
        __Marshaller_xla_LoadDataRequest,
        __Marshaller_xla_LoadDataResponse);

    static readonly grpc::Method<global::Xla.TransferToClientRequest, global::Xla.TransferToClientResponse> __Method_TransferToClient = new grpc::Method<global::Xla.TransferToClientRequest, global::Xla.TransferToClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferToClient",
        __Marshaller_xla_TransferToClientRequest,
        __Marshaller_xla_TransferToClientResponse);

    static readonly grpc::Method<global::Xla.TransferToServerRequest, global::Xla.TransferToServerResponse> __Method_TransferToServer = new grpc::Method<global::Xla.TransferToServerRequest, global::Xla.TransferToServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferToServer",
        __Marshaller_xla_TransferToServerRequest,
        __Marshaller_xla_TransferToServerResponse);

    static readonly grpc::Method<global::Xla.TransferToInfeedRequest, global::Xla.TransferToInfeedResponse> __Method_TransferToInfeed = new grpc::Method<global::Xla.TransferToInfeedRequest, global::Xla.TransferToInfeedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferToInfeed",
        __Marshaller_xla_TransferToInfeedRequest,
        __Marshaller_xla_TransferToInfeedResponse);

    static readonly grpc::Method<global::Xla.TransferFromOutfeedRequest, global::Xla.TransferFromOutfeedResponse> __Method_TransferFromOutfeed = new grpc::Method<global::Xla.TransferFromOutfeedRequest, global::Xla.TransferFromOutfeedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferFromOutfeed",
        __Marshaller_xla_TransferFromOutfeedRequest,
        __Marshaller_xla_TransferFromOutfeedResponse);

    static readonly grpc::Method<global::Xla.ResetDeviceRequest, global::Xla.ResetDeviceResponse> __Method_ResetDevice = new grpc::Method<global::Xla.ResetDeviceRequest, global::Xla.ResetDeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetDevice",
        __Marshaller_xla_ResetDeviceRequest,
        __Marshaller_xla_ResetDeviceResponse);

    static readonly grpc::Method<global::Xla.ComputeConstantGraphRequest, global::Xla.ComputeConstantResponse> __Method_ComputeConstantGraph = new grpc::Method<global::Xla.ComputeConstantGraphRequest, global::Xla.ComputeConstantResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ComputeConstantGraph",
        __Marshaller_xla_ComputeConstantGraphRequest,
        __Marshaller_xla_ComputeConstantResponse);

    static readonly grpc::Method<global::Xla.GetDeviceHandlesRequest, global::Xla.GetDeviceHandlesResponse> __Method_GetDeviceHandles = new grpc::Method<global::Xla.GetDeviceHandlesRequest, global::Xla.GetDeviceHandlesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeviceHandles",
        __Marshaller_xla_GetDeviceHandlesRequest,
        __Marshaller_xla_GetDeviceHandlesResponse);

    static readonly grpc::Method<global::Xla.CreateChannelHandleRequest, global::Xla.CreateChannelHandleResponse> __Method_CreateChannelHandle = new grpc::Method<global::Xla.CreateChannelHandleRequest, global::Xla.CreateChannelHandleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateChannelHandle",
        __Marshaller_xla_CreateChannelHandleRequest,
        __Marshaller_xla_CreateChannelHandleResponse);

    static readonly grpc::Method<global::Xla.CompileRequest, global::Xla.CompileResponse> __Method_Compile = new grpc::Method<global::Xla.CompileRequest, global::Xla.CompileResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Compile",
        __Marshaller_xla_CompileRequest,
        __Marshaller_xla_CompileResponse);

    static readonly grpc::Method<global::Xla.ExecuteRequest, global::Xla.ExecuteResponse> __Method_Execute = new grpc::Method<global::Xla.ExecuteRequest, global::Xla.ExecuteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Execute",
        __Marshaller_xla_ExecuteRequest,
        __Marshaller_xla_ExecuteResponse);

    static readonly grpc::Method<global::Xla.ExecuteGraphParallelRequest, global::Xla.ExecuteParallelResponse> __Method_ExecuteGraphParallel = new grpc::Method<global::Xla.ExecuteGraphParallelRequest, global::Xla.ExecuteParallelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteGraphParallel",
        __Marshaller_xla_ExecuteGraphParallelRequest,
        __Marshaller_xla_ExecuteParallelResponse);

    static readonly grpc::Method<global::Xla.WaitForExecutionRequest, global::Xla.WaitForExecutionResponse> __Method_WaitForExecution = new grpc::Method<global::Xla.WaitForExecutionRequest, global::Xla.WaitForExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WaitForExecution",
        __Marshaller_xla_WaitForExecutionRequest,
        __Marshaller_xla_WaitForExecutionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Xla.XlaServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for XlaService</summary>
    public partial class XlaServiceClient : grpc::ClientBase<XlaServiceClient>
    {
      /// <summary>Creates a new client for XlaService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public XlaServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for XlaService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public XlaServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected XlaServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected XlaServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Unregisters a global allocation.
      ///
      /// If the handle given is not currently allocated, a NOT_FOUND status is
      /// returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.UnregisterResponse Unregister(global::Xla.UnregisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unregister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unregisters a global allocation.
      ///
      /// If the handle given is not currently allocated, a NOT_FOUND status is
      /// returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.UnregisterResponse Unregister(global::Xla.UnregisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unregister, null, options, request);
      }
      /// <summary>
      /// Unregisters a global allocation.
      ///
      /// If the handle given is not currently allocated, a NOT_FOUND status is
      /// returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.UnregisterResponse> UnregisterAsync(global::Xla.UnregisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnregisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unregisters a global allocation.
      ///
      /// If the handle given is not currently allocated, a NOT_FOUND status is
      /// returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.UnregisterResponse> UnregisterAsync(global::Xla.UnregisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unregister, null, options, request);
      }
      /// <summary>
      /// Deconstructs a tuple. Returns a newly created GlobalDataHandle for each
      /// element in the tuple.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.DeconstructTupleResponse DeconstructTuple(global::Xla.DeconstructTupleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeconstructTuple(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deconstructs a tuple. Returns a newly created GlobalDataHandle for each
      /// element in the tuple.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.DeconstructTupleResponse DeconstructTuple(global::Xla.DeconstructTupleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeconstructTuple, null, options, request);
      }
      /// <summary>
      /// Deconstructs a tuple. Returns a newly created GlobalDataHandle for each
      /// element in the tuple.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.DeconstructTupleResponse> DeconstructTupleAsync(global::Xla.DeconstructTupleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeconstructTupleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deconstructs a tuple. Returns a newly created GlobalDataHandle for each
      /// element in the tuple.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.DeconstructTupleResponse> DeconstructTupleAsync(global::Xla.DeconstructTupleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeconstructTuple, null, options, request);
      }
      /// <summary>
      /// Unpack requests that a global data handle, with a tuple shape, has global
      /// data handles created for each of its constituent members. This is the
      /// equivalent of the "destructuring assignment" present in various programming
      /// languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.UnpackResponse Unpack(global::Xla.UnpackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unpack(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unpack requests that a global data handle, with a tuple shape, has global
      /// data handles created for each of its constituent members. This is the
      /// equivalent of the "destructuring assignment" present in various programming
      /// languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.UnpackResponse Unpack(global::Xla.UnpackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unpack, null, options, request);
      }
      /// <summary>
      /// Unpack requests that a global data handle, with a tuple shape, has global
      /// data handles created for each of its constituent members. This is the
      /// equivalent of the "destructuring assignment" present in various programming
      /// languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.UnpackResponse> UnpackAsync(global::Xla.UnpackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnpackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Unpack requests that a global data handle, with a tuple shape, has global
      /// data handles created for each of its constituent members. This is the
      /// equivalent of the "destructuring assignment" present in various programming
      /// languages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.UnpackResponse> UnpackAsync(global::Xla.UnpackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unpack, null, options, request);
      }
      /// <summary>
      /// Requests the shape of the referenced global data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.GetShapeResponse GetShape(global::Xla.GetShapeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShape(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests the shape of the referenced global data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.GetShapeResponse GetShape(global::Xla.GetShapeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetShape, null, options, request);
      }
      /// <summary>
      /// Requests the shape of the referenced global data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.GetShapeResponse> GetShapeAsync(global::Xla.GetShapeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetShapeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests the shape of the referenced global data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.GetShapeResponse> GetShapeAsync(global::Xla.GetShapeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetShape, null, options, request);
      }
      /// <summary>
      /// Requests the statistics of the given computation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ComputationStatsResponse GetComputationGraphStats(global::Xla.ComputationGraphStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetComputationGraphStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests the statistics of the given computation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ComputationStatsResponse GetComputationGraphStats(global::Xla.ComputationGraphStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetComputationGraphStats, null, options, request);
      }
      /// <summary>
      /// Requests the statistics of the given computation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ComputationStatsResponse> GetComputationGraphStatsAsync(global::Xla.ComputationGraphStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetComputationGraphStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests the statistics of the given computation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ComputationStatsResponse> GetComputationGraphStatsAsync(global::Xla.ComputationGraphStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetComputationGraphStats, null, options, request);
      }
      /// <summary>
      /// Loads a variable number of values with a given element type from ColumnIO.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.LoadDataResponse LoadData(global::Xla.LoadDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Loads a variable number of values with a given element type from ColumnIO.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.LoadDataResponse LoadData(global::Xla.LoadDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadData, null, options, request);
      }
      /// <summary>
      /// Loads a variable number of values with a given element type from ColumnIO.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.LoadDataResponse> LoadDataAsync(global::Xla.LoadDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Loads a variable number of values with a given element type from ColumnIO.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.LoadDataResponse> LoadDataAsync(global::Xla.LoadDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadData, null, options, request);
      }
      /// <summary>
      /// Transfers the given global data to the client in the form of a Literal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.TransferToClientResponse TransferToClient(global::Xla.TransferToClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferToClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers the given global data to the client in the form of a Literal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.TransferToClientResponse TransferToClient(global::Xla.TransferToClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferToClient, null, options, request);
      }
      /// <summary>
      /// Transfers the given global data to the client in the form of a Literal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.TransferToClientResponse> TransferToClientAsync(global::Xla.TransferToClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferToClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers the given global data to the client in the form of a Literal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.TransferToClientResponse> TransferToClientAsync(global::Xla.TransferToClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferToClient, null, options, request);
      }
      /// <summary>
      /// Transfers the given literal to the server to be stored in a global
      /// allocation, which is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.TransferToServerResponse TransferToServer(global::Xla.TransferToServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferToServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers the given literal to the server to be stored in a global
      /// allocation, which is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.TransferToServerResponse TransferToServer(global::Xla.TransferToServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferToServer, null, options, request);
      }
      /// <summary>
      /// Transfers the given literal to the server to be stored in a global
      /// allocation, which is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.TransferToServerResponse> TransferToServerAsync(global::Xla.TransferToServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferToServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers the given literal to the server to be stored in a global
      /// allocation, which is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.TransferToServerResponse> TransferToServerAsync(global::Xla.TransferToServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferToServer, null, options, request);
      }
      /// <summary>
      /// Transfers the given literal to the Infeed buffer of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.TransferToInfeedResponse TransferToInfeed(global::Xla.TransferToInfeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferToInfeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers the given literal to the Infeed buffer of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.TransferToInfeedResponse TransferToInfeed(global::Xla.TransferToInfeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferToInfeed, null, options, request);
      }
      /// <summary>
      /// Transfers the given literal to the Infeed buffer of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.TransferToInfeedResponse> TransferToInfeedAsync(global::Xla.TransferToInfeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferToInfeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transfers the given literal to the Infeed buffer of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.TransferToInfeedResponse> TransferToInfeedAsync(global::Xla.TransferToInfeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferToInfeed, null, options, request);
      }
      /// <summary>
      /// Transferred literal from the Outfeed buffer of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.TransferFromOutfeedResponse TransferFromOutfeed(global::Xla.TransferFromOutfeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferFromOutfeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transferred literal from the Outfeed buffer of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.TransferFromOutfeedResponse TransferFromOutfeed(global::Xla.TransferFromOutfeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferFromOutfeed, null, options, request);
      }
      /// <summary>
      /// Transferred literal from the Outfeed buffer of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.TransferFromOutfeedResponse> TransferFromOutfeedAsync(global::Xla.TransferFromOutfeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferFromOutfeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transferred literal from the Outfeed buffer of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.TransferFromOutfeedResponse> TransferFromOutfeedAsync(global::Xla.TransferFromOutfeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferFromOutfeed, null, options, request);
      }
      /// <summary>
      /// Resets the device, clearing all existing state on the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ResetDeviceResponse ResetDevice(global::Xla.ResetDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets the device, clearing all existing state on the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ResetDeviceResponse ResetDevice(global::Xla.ResetDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetDevice, null, options, request);
      }
      /// <summary>
      /// Resets the device, clearing all existing state on the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ResetDeviceResponse> ResetDeviceAsync(global::Xla.ResetDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets the device, clearing all existing state on the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ResetDeviceResponse> ResetDeviceAsync(global::Xla.ResetDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetDevice, null, options, request);
      }
      /// <summary>
      /// Computes the value of a constant expression. The request contains the
      /// computation graph for the constant expression.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ComputeConstantResponse ComputeConstantGraph(global::Xla.ComputeConstantGraphRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ComputeConstantGraph(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Computes the value of a constant expression. The request contains the
      /// computation graph for the constant expression.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ComputeConstantResponse ComputeConstantGraph(global::Xla.ComputeConstantGraphRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ComputeConstantGraph, null, options, request);
      }
      /// <summary>
      /// Computes the value of a constant expression. The request contains the
      /// computation graph for the constant expression.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ComputeConstantResponse> ComputeConstantGraphAsync(global::Xla.ComputeConstantGraphRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ComputeConstantGraphAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Computes the value of a constant expression. The request contains the
      /// computation graph for the constant expression.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ComputeConstantResponse> ComputeConstantGraphAsync(global::Xla.ComputeConstantGraphRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ComputeConstantGraph, null, options, request);
      }
      /// <summary>
      /// Requests one or more device handles from the target. The returned device
      /// handles can be used to specify the device on which to execute computations
      /// or transfer data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.GetDeviceHandlesResponse GetDeviceHandles(global::Xla.GetDeviceHandlesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceHandles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests one or more device handles from the target. The returned device
      /// handles can be used to specify the device on which to execute computations
      /// or transfer data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.GetDeviceHandlesResponse GetDeviceHandles(global::Xla.GetDeviceHandlesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeviceHandles, null, options, request);
      }
      /// <summary>
      /// Requests one or more device handles from the target. The returned device
      /// handles can be used to specify the device on which to execute computations
      /// or transfer data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.GetDeviceHandlesResponse> GetDeviceHandlesAsync(global::Xla.GetDeviceHandlesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceHandlesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests one or more device handles from the target. The returned device
      /// handles can be used to specify the device on which to execute computations
      /// or transfer data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.GetDeviceHandlesResponse> GetDeviceHandlesAsync(global::Xla.GetDeviceHandlesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeviceHandles, null, options, request);
      }
      /// <summary>
      /// Creates a channel handle that can be used to transfer data between
      /// two computations via a pair of Send and Recv instructions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.CreateChannelHandleResponse CreateChannelHandle(global::Xla.CreateChannelHandleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateChannelHandle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a channel handle that can be used to transfer data between
      /// two computations via a pair of Send and Recv instructions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.CreateChannelHandleResponse CreateChannelHandle(global::Xla.CreateChannelHandleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateChannelHandle, null, options, request);
      }
      /// <summary>
      /// Creates a channel handle that can be used to transfer data between
      /// two computations via a pair of Send and Recv instructions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.CreateChannelHandleResponse> CreateChannelHandleAsync(global::Xla.CreateChannelHandleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateChannelHandleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a channel handle that can be used to transfer data between
      /// two computations via a pair of Send and Recv instructions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.CreateChannelHandleResponse> CreateChannelHandleAsync(global::Xla.CreateChannelHandleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateChannelHandle, null, options, request);
      }
      /// <summary>
      /// Compiles the provided computation into executable. Returns the handle of
      /// the executable.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.CompileResponse Compile(global::Xla.CompileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Compile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compiles the provided computation into executable. Returns the handle of
      /// the executable.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.CompileResponse Compile(global::Xla.CompileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Compile, null, options, request);
      }
      /// <summary>
      /// Compiles the provided computation into executable. Returns the handle of
      /// the executable.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.CompileResponse> CompileAsync(global::Xla.CompileRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompileAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Compiles the provided computation into executable. Returns the handle of
      /// the executable.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.CompileResponse> CompileAsync(global::Xla.CompileRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Compile, null, options, request);
      }
      /// <summary>
      /// Invokes the provided executable with the provided global data passed as
      /// immutable arguments. The request contains the handle to the executable.
      /// Returns global data output and execution timing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ExecuteResponse Execute(global::Xla.ExecuteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Execute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invokes the provided executable with the provided global data passed as
      /// immutable arguments. The request contains the handle to the executable.
      /// Returns global data output and execution timing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ExecuteResponse Execute(global::Xla.ExecuteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Execute, null, options, request);
      }
      /// <summary>
      /// Invokes the provided executable with the provided global data passed as
      /// immutable arguments. The request contains the handle to the executable.
      /// Returns global data output and execution timing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ExecuteResponse> ExecuteAsync(global::Xla.ExecuteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invokes the provided executable with the provided global data passed as
      /// immutable arguments. The request contains the handle to the executable.
      /// Returns global data output and execution timing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ExecuteResponse> ExecuteAsync(global::Xla.ExecuteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Execute, null, options, request);
      }
      /// <summary>
      /// Invokes the provided list of computations in parallel with the provided
      /// global data for each computation. Returns a list of global data output and
      /// execution timing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ExecuteParallelResponse ExecuteGraphParallel(global::Xla.ExecuteGraphParallelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteGraphParallel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invokes the provided list of computations in parallel with the provided
      /// global data for each computation. Returns a list of global data output and
      /// execution timing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.ExecuteParallelResponse ExecuteGraphParallel(global::Xla.ExecuteGraphParallelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteGraphParallel, null, options, request);
      }
      /// <summary>
      /// Invokes the provided list of computations in parallel with the provided
      /// global data for each computation. Returns a list of global data output and
      /// execution timing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ExecuteParallelResponse> ExecuteGraphParallelAsync(global::Xla.ExecuteGraphParallelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteGraphParallelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Invokes the provided list of computations in parallel with the provided
      /// global data for each computation. Returns a list of global data output and
      /// execution timing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.ExecuteParallelResponse> ExecuteGraphParallelAsync(global::Xla.ExecuteGraphParallelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteGraphParallel, null, options, request);
      }
      /// <summary>
      /// Waits until the given execution (aysnchronously launched) is complete, and
      /// returns the global data output.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.WaitForExecutionResponse WaitForExecution(global::Xla.WaitForExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitForExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits until the given execution (aysnchronously launched) is complete, and
      /// returns the global data output.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Xla.WaitForExecutionResponse WaitForExecution(global::Xla.WaitForExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WaitForExecution, null, options, request);
      }
      /// <summary>
      /// Waits until the given execution (aysnchronously launched) is complete, and
      /// returns the global data output.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.WaitForExecutionResponse> WaitForExecutionAsync(global::Xla.WaitForExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitForExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits until the given execution (aysnchronously launched) is complete, and
      /// returns the global data output.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Xla.WaitForExecutionResponse> WaitForExecutionAsync(global::Xla.WaitForExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WaitForExecution, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override XlaServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new XlaServiceClient(configuration);
      }
    }

  }
}
#endregion
