// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/worker.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/worker.proto</summary>
  public static partial class WorkerReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/worker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorkerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiV0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvd29ya2VyLnByb3RvEgp0ZW5z",
            "b3JmbG93Ghlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvGip0ZW5zb3JmbG93",
            "L2NvcmUvZnJhbWV3b3JrL2Nvc3RfZ3JhcGgucHJvdG8aMXRlbnNvcmZsb3cv",
            "Y29yZS9mcmFtZXdvcmsvZGV2aWNlX2F0dHJpYnV0ZXMucHJvdG8aJXRlbnNv",
            "cmZsb3cvY29yZS9mcmFtZXdvcmsvZ3JhcGgucHJvdG8aKnRlbnNvcmZsb3cv",
            "Y29yZS9mcmFtZXdvcmsvc3RlcF9zdGF0cy5wcm90bxomdGVuc29yZmxvdy9j",
            "b3JlL2ZyYW1ld29yay90ZW5zb3IucHJvdG8aLHRlbnNvcmZsb3cvY29yZS9m",
            "cmFtZXdvcmsvdGVuc29yX3NoYXBlLnByb3RvGiV0ZW5zb3JmbG93L2NvcmUv",
            "ZnJhbWV3b3JrL3R5cGVzLnByb3RvGiV0ZW5zb3JmbG93L2NvcmUvcHJvdG9i",
            "dWYvY29uZmlnLnByb3RvGiR0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvZGVi",
            "dWcucHJvdG8aKnRlbnNvcmZsb3cvY29yZS9wcm90b2J1Zi9lcnJvcl9jb2Rl",
            "cy5wcm90bxordGVuc29yZmxvdy9jb3JlL3Byb3RvYnVmL25hbWVkX3RlbnNv",
            "ci5wcm90bxowdGVuc29yZmxvdy9jb3JlL3Byb3RvYnVmL3RlbnNvcmZsb3df",
            "c2VydmVyLnByb3RvIhIKEEdldFN0YXR1c1JlcXVlc3QiTAoRR2V0U3RhdHVz",
            "UmVzcG9uc2USNwoRZGV2aWNlX2F0dHJpYnV0ZXMYASADKAsyHC50ZW5zb3Jm",
            "bG93LkRldmljZUF0dHJpYnV0ZXMivwEKGkNyZWF0ZVdvcmtlclNlc3Npb25S",
            "ZXF1ZXN0EhYKDnNlc3Npb25faGFuZGxlGAEgASgJEikKCnNlcnZlcl9kZWYY",
            "AiABKAsyFS50ZW5zb3JmbG93LlNlcnZlckRlZhIdChVpc29sYXRlX3Nlc3Np",
            "b25fc3RhdGUYAyABKAgSPwoZY2x1c3Rlcl9kZXZpY2VfYXR0cmlidXRlcxgE",
            "IAMoCzIcLnRlbnNvcmZsb3cuRGV2aWNlQXR0cmlidXRlcyIdChtDcmVhdGVX",
            "b3JrZXJTZXNzaW9uUmVzcG9uc2UiNAoaRGVsZXRlV29ya2VyU2Vzc2lvblJl",
            "cXVlc3QSFgoOc2Vzc2lvbl9oYW5kbGUYASABKAkiHQobRGVsZXRlV29ya2Vy",
            "U2Vzc2lvblJlc3BvbnNlIsoCChRSZWdpc3RlckdyYXBoUmVxdWVzdBIWCg5z",
            "ZXNzaW9uX2hhbmRsZRgBIAEoCRIkChxjcmVhdGVfd29ya2VyX3Nlc3Npb25f",
            "Y2FsbGVkGAYgASgIEicKCWdyYXBoX2RlZhgCIAEoCzIULnRlbnNvcmZsb3cu",
            "R3JhcGhEZWYSHAoQaGFzX2NvbnRyb2xfZmxvdxgDIAEoCEICGAESLwoNZ3Jh",
            "cGhfb3B0aW9ucxgEIAEoCzIYLnRlbnNvcmZsb3cuR3JhcGhPcHRpb25zEi8K",
            "DWRlYnVnX29wdGlvbnMYBSABKAsyGC50ZW5zb3JmbG93LkRlYnVnT3B0aW9u",
            "cxIcChRjb2xsZWN0aXZlX2dyYXBoX2tleRgHIAEoAxItCgxjb25maWdfcHJv",
            "dG8YCCABKAsyFy50ZW5zb3JmbG93LkNvbmZpZ1Byb3RvIi0KFVJlZ2lzdGVy",
            "R3JhcGhSZXNwb25zZRIUCgxncmFwaF9oYW5kbGUYASABKAkibAoWRGVyZWdp",
            "c3RlckdyYXBoUmVxdWVzdBIWCg5zZXNzaW9uX2hhbmRsZRgCIAEoCRIkChxj",
            "cmVhdGVfd29ya2VyX3Nlc3Npb25fY2FsbGVkGAMgASgIEhQKDGdyYXBoX2hh",
            "bmRsZRgBIAEoCSIZChdEZXJlZ2lzdGVyR3JhcGhSZXNwb25zZSImChFDbGVh",
            "bnVwQWxsUmVxdWVzdBIRCgljb250YWluZXIYASADKAkiFAoSQ2xlYW51cEFs",
            "bFJlc3BvbnNlIooBCgxFeGVjdXRvck9wdHMSFAoMcmVjb3JkX2Nvc3RzGAEg",
            "ASgIEhcKD3JlY29yZF90aW1lbGluZRgDIAEoCBIfChdyZWNvcmRfcGFydGl0",
            "aW9uX2dyYXBocxgEIAEoCBIqCiJyZXBvcnRfdGVuc29yX2FsbG9jYXRpb25z",
            "X3Vwb25fb29tGAUgASgIIs0CCg9SdW5HcmFwaFJlcXVlc3QSFgoOc2Vzc2lv",
            "bl9oYW5kbGUYCCABKAkSJAocY3JlYXRlX3dvcmtlcl9zZXNzaW9uX2NhbGxl",
            "ZBgKIAEoCBIUCgxncmFwaF9oYW5kbGUYASABKAkSDwoHc3RlcF9pZBgCIAEo",
            "AxIrCglleGVjX29wdHMYBSABKAsyGC50ZW5zb3JmbG93LkV4ZWN1dG9yT3B0",
            "cxIqCgRzZW5kGAMgAygLMhwudGVuc29yZmxvdy5OYW1lZFRlbnNvclByb3Rv",
            "EhAKCHJlY3Zfa2V5GAQgAygJEhIKCmlzX3BhcnRpYWwYBiABKAgSGwoTaXNf",
            "bGFzdF9wYXJ0aWFsX3J1bhgHIAEoCBIlCh1zdG9yZV9lcnJvcnNfaW5fcmVz",
            "cG9uc2VfYm9keRgJIAEoCBISCgpyZXF1ZXN0X2lkGAsgASgDIpECChBSdW5H",
            "cmFwaFJlc3BvbnNlEioKBHJlY3YYASADKAsyHC50ZW5zb3JmbG93Lk5hbWVk",
            "VGVuc29yUHJvdG8SKQoKc3RlcF9zdGF0cxgCIAEoCzIVLnRlbnNvcmZsb3cu",
            "U3RlcFN0YXRzEiwKCmNvc3RfZ3JhcGgYAyABKAsyGC50ZW5zb3JmbG93LkNv",
            "c3RHcmFwaERlZhItCg9wYXJ0aXRpb25fZ3JhcGgYBCADKAsyFC50ZW5zb3Jm",
            "bG93LkdyYXBoRGVmEisKC3N0YXR1c19jb2RlGAUgASgOMhYudGVuc29yZmxv",
            "dy5lcnJvci5Db2RlEhwKFHN0YXR1c19lcnJvcl9tZXNzYWdlGAYgASgJIiYK",
            "E0NsZWFudXBHcmFwaFJlcXVlc3QSDwoHc3RlcF9pZBgBIAEoAyIWChRDbGVh",
            "bnVwR3JhcGhSZXNwb25zZSL7AQoRUmVjdlRlbnNvclJlcXVlc3QSDwoHc3Rl",
            "cF9pZBgBIAEoAxIWCg5yZW5kZXp2b3VzX2tleRgCIAEoCRIOCgZkbWFfb2sY",
            "AyABKAgSMwoPY2xpZW50X2xvY2FsaXR5GAQgASgLMhoudGVuc29yZmxvdy5E",
            "ZXZpY2VMb2NhbGl0eRIzCg9zZXJ2ZXJfbG9jYWxpdHkYBSABKAsyGi50ZW5z",
            "b3JmbG93LkRldmljZUxvY2FsaXR5Ei8KEXRyYW5zcG9ydF9vcHRpb25zGAYg",
            "ASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRISCgpyZXF1ZXN0X2lkGAcgASgD",
            "Iq8BChJSZWN2VGVuc29yUmVzcG9uc2USJwoGdGVuc29yGAEgASgLMhcudGVu",
            "c29yZmxvdy5UZW5zb3JQcm90bxIPCgdpc19kZWFkGAIgASgIEhkKEXNlbmRf",
            "c3RhcnRfbWljcm9zGAMgASgDEi8KEXRyYW5zcG9ydF9vcHRpb25zGAQgASgL",
            "MhQuZ29vZ2xlLnByb3RvYnVmLkFueRITCgtyZXF1aXJlX2FjaxgFIAEoCCIt",
            "ChdNYXJrUmVjdkZpbmlzaGVkUmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgASgD",
            "IhoKGE1hcmtSZWN2RmluaXNoZWRSZXNwb25zZSJvCg5Mb2dnaW5nUmVxdWVz",
            "dBIaChJlbmFibGVfcnBjX2xvZ2dpbmcYASABKAgSGwoTZGlzYWJsZV9ycGNf",
            "bG9nZ2luZxgEIAEoCBINCgVjbGVhchgCIAEoCBIVCg1mZXRjaF9zdGVwX2lk",
            "GAMgAygDIk4KEExhYmVsZWRTdGVwU3RhdHMSDwoHc3RlcF9pZBgBIAEoAxIp",
            "CgpzdGVwX3N0YXRzGAIgASgLMhUudGVuc29yZmxvdy5TdGVwU3RhdHMiPQoP",
            "TG9nZ2luZ1Jlc3BvbnNlEioKBHN0ZXAYASADKAsyHC50ZW5zb3JmbG93Lkxh",
            "YmVsZWRTdGVwU3RhdHMiqwEKCVRyYWNlT3B0cxIQCghkdXJhdGlvbhgBIAEo",
            "ARIZChF1c2Vfc3RlcF9wcm9maWxlchgCIAEoCBIbChN1c2Vfa2VybmVsX3By",
            "b2ZpbGVyGAMgASgIEh0KFXVzZV9leHRlbmRlZF9wcm9maWxlchgEIAEoCBIY",
            "ChB1c2VfZ3B1X3Byb2ZpbGVyGAUgASgIEhsKE3VzZV9zYW1wbGVfcHJvZmls",
            "ZXIYBiABKAgiOAoOVHJhY2luZ1JlcXVlc3QSJgoHb3B0aW9ucxgBIAEoCzIV",
            "LnRlbnNvcmZsb3cuVHJhY2VPcHRzIhEKD1RyYWNpbmdSZXNwb25zZSLRAgoO",
            "UmVjdkJ1ZlJlcXVlc3QSDwoHc3RlcF9pZBgBIAEoAxIaChJidWZfcmVuZGV6",
            "dm91c19rZXkYAiABKAkSEQoJbnVtX2J5dGVzGAMgASgDEg8KB2J1Zl9wdHIY",
            "BCABKAYSMwoPY2xpZW50X2xvY2FsaXR5GAUgASgLMhoudGVuc29yZmxvdy5E",
            "ZXZpY2VMb2NhbGl0eRIzCg9zZXJ2ZXJfbG9jYWxpdHkYBiABKAsyGi50ZW5z",
            "b3JmbG93LkRldmljZUxvY2FsaXR5Ei8KEXRyYW5zcG9ydF9vcHRpb25zGAcg",
            "ASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRISCgpzcmNfZGV2aWNlGAggASgJ",
            "EhIKCmRzdF9kZXZpY2UYCSABKAkSEgoKcmVxdWVzdF9pZBgKIAEoAxIXCg9z",
            "cmNfaW5jYXJuYXRpb24YCyABKAQipwEKD1JlY3ZCdWZSZXNwb25zZRIPCgdi",
            "dWZfcHRyGAEgASgGEhEKCW51bV9ieXRlcxgCIAEoAxIPCgdpc19kZWFkGAMg",
            "ASgIEi8KEXRyYW5zcG9ydF9vcHRpb25zGAQgASgLMhQuZ29vZ2xlLnByb3Rv",
            "YnVmLkFueRIZChFzZW5kX3N0YXJ0X21pY3JvcxgFIAEoAxITCgtyZXF1aXJl",
            "X2FjaxgGIAEoCCKAAQoUQ29tcGxldGVHcm91cFJlcXVlc3QSEQoJZ3JvdXBf",
            "a2V5GAEgASgFEhIKCmdyb3VwX3NpemUYAiABKAUSEwoLZGV2aWNlX3R5cGUY",
            "AyABKAkSEwoLZGV2aWNlX25hbWUYBCADKAkSFwoPY29sbGVjdGl2ZV90eXBl",
            "GAUgASgFIqgBChVDb21wbGV0ZUdyb3VwUmVzcG9uc2USEQoJZ3JvdXBfa2V5",
            "GAEgASgFEhIKCmdyb3VwX3NpemUYAiABKAUSEwoLZGV2aWNlX3R5cGUYAyAB",
            "KAkSEQoJbnVtX3Rhc2tzGAQgASgFEhMKC2RldmljZV9uYW1lGAUgAygJEhEK",
            "CXRhc2tfbmFtZRgGIAMoCRIYChBjb21tdW5pY2F0b3Jfa2V5GAcgASgMIpcC",
            "ChdDb21wbGV0ZUluc3RhbmNlUmVxdWVzdBIMCgRuYW1lGAEgASgJEgwKBHR5",
            "cGUYAiABKAUSJwoJZGF0YV90eXBlGAMgASgOMhQudGVuc29yZmxvdy5EYXRh",
            "VHlwZRIrCgVzaGFwZRgEIAEoCzIcLnRlbnNvcmZsb3cuVGVuc29yU2hhcGVQ",
            "cm90bxIRCglncm91cF9rZXkYBSABKAUSEgoKZ3JvdXBfc2l6ZRgGIAEoBRIU",
            "CgxpbnN0YW5jZV9rZXkYByABKAUSEwoLZGV2aWNlX3R5cGUYCCABKAkSFQoN",
            "c3ViZGl2X29mZnNldBgJIAMoBRIOCgZkZXZpY2UYCiABKAkSEQoJaXNfc291",
            "cmNlGAsgASgIIksKGENvbXBsZXRlSW5zdGFuY2VSZXNwb25zZRIUCgxpbnN0",
            "YW5jZV9rZXkYASABKAUSEwoLc291cmNlX3JhbmsYAiABKAVKBAgDEAQiKwoW",
            "R2V0U3RlcFNlcXVlbmNlUmVxdWVzdBIRCglncmFwaF9rZXkYASADKAMiNwoM",
            "U3RlcFNlcXVlbmNlEhEKCWdyYXBoX2tleRgBIAEoAxIUCgxuZXh0X3N0ZXBf",
            "aWQYAiABKAMiSgoXR2V0U3RlcFNlcXVlbmNlUmVzcG9uc2USLwoNc3RlcF9z",
            "ZXF1ZW5jZRgBIAMoCzIYLnRlbnNvcmZsb3cuU3RlcFNlcXVlbmNlQm0KGm9y",
            "Zy50ZW5zb3JmbG93LmRpc3RydW50aW1lQgxXb3JrZXJQcm90b3NQAVo8Z2l0",
            "aHViLmNvbS90ZW5zb3JmbG93L3RlbnNvcmZsb3cvdGVuc29yZmxvdy9nby9j",
            "b3JlL3Byb3RvYnVm+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Tensorflow.CostGraphReflection.Descriptor, global::Tensorflow.DeviceAttributesReflection.Descriptor, global::Tensorflow.GraphReflection.Descriptor, global::Tensorflow.StepStatsReflection.Descriptor, global::Tensorflow.TensorReflection.Descriptor, global::Tensorflow.TensorShapeReflection.Descriptor, global::Tensorflow.TypesReflection.Descriptor, global::Tensorflow.ConfigReflection.Descriptor, global::Tensorflow.DebugReflection.Descriptor, global::Tensorflow.Error.ErrorCodesReflection.Descriptor, global::Tensorflow.NamedTensorReflection.Descriptor, global::Tensorflow.TensorflowServerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.GetStatusRequest), global::Tensorflow.GetStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.GetStatusResponse), global::Tensorflow.GetStatusResponse.Parser, new[]{ "DeviceAttributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CreateWorkerSessionRequest), global::Tensorflow.CreateWorkerSessionRequest.Parser, new[]{ "SessionHandle", "ServerDef", "IsolateSessionState", "ClusterDeviceAttributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CreateWorkerSessionResponse), global::Tensorflow.CreateWorkerSessionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DeleteWorkerSessionRequest), global::Tensorflow.DeleteWorkerSessionRequest.Parser, new[]{ "SessionHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DeleteWorkerSessionResponse), global::Tensorflow.DeleteWorkerSessionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RegisterGraphRequest), global::Tensorflow.RegisterGraphRequest.Parser, new[]{ "SessionHandle", "CreateWorkerSessionCalled", "GraphDef", "HasControlFlow", "GraphOptions", "DebugOptions", "CollectiveGraphKey", "ConfigProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RegisterGraphResponse), global::Tensorflow.RegisterGraphResponse.Parser, new[]{ "GraphHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DeregisterGraphRequest), global::Tensorflow.DeregisterGraphRequest.Parser, new[]{ "SessionHandle", "CreateWorkerSessionCalled", "GraphHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DeregisterGraphResponse), global::Tensorflow.DeregisterGraphResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CleanupAllRequest), global::Tensorflow.CleanupAllRequest.Parser, new[]{ "Container" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CleanupAllResponse), global::Tensorflow.CleanupAllResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ExecutorOpts), global::Tensorflow.ExecutorOpts.Parser, new[]{ "RecordCosts", "RecordTimeline", "RecordPartitionGraphs", "ReportTensorAllocationsUponOom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RunGraphRequest), global::Tensorflow.RunGraphRequest.Parser, new[]{ "SessionHandle", "CreateWorkerSessionCalled", "GraphHandle", "StepId", "ExecOpts", "Send", "RecvKey", "IsPartial", "IsLastPartialRun", "StoreErrorsInResponseBody", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RunGraphResponse), global::Tensorflow.RunGraphResponse.Parser, new[]{ "Recv", "StepStats", "CostGraph", "PartitionGraph", "StatusCode", "StatusErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CleanupGraphRequest), global::Tensorflow.CleanupGraphRequest.Parser, new[]{ "StepId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CleanupGraphResponse), global::Tensorflow.CleanupGraphResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RecvTensorRequest), global::Tensorflow.RecvTensorRequest.Parser, new[]{ "StepId", "RendezvousKey", "DmaOk", "ClientLocality", "ServerLocality", "TransportOptions", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RecvTensorResponse), global::Tensorflow.RecvTensorResponse.Parser, new[]{ "Tensor", "IsDead", "SendStartMicros", "TransportOptions", "RequireAck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.MarkRecvFinishedRequest), global::Tensorflow.MarkRecvFinishedRequest.Parser, new[]{ "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.MarkRecvFinishedResponse), global::Tensorflow.MarkRecvFinishedResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.LoggingRequest), global::Tensorflow.LoggingRequest.Parser, new[]{ "EnableRpcLogging", "DisableRpcLogging", "Clear", "FetchStepId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.LabeledStepStats), global::Tensorflow.LabeledStepStats.Parser, new[]{ "StepId", "StepStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.LoggingResponse), global::Tensorflow.LoggingResponse.Parser, new[]{ "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TraceOpts), global::Tensorflow.TraceOpts.Parser, new[]{ "Duration", "UseStepProfiler", "UseKernelProfiler", "UseExtendedProfiler", "UseGpuProfiler", "UseSampleProfiler" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TracingRequest), global::Tensorflow.TracingRequest.Parser, new[]{ "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TracingResponse), global::Tensorflow.TracingResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RecvBufRequest), global::Tensorflow.RecvBufRequest.Parser, new[]{ "StepId", "BufRendezvousKey", "NumBytes", "BufPtr", "ClientLocality", "ServerLocality", "TransportOptions", "SrcDevice", "DstDevice", "RequestId", "SrcIncarnation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RecvBufResponse), global::Tensorflow.RecvBufResponse.Parser, new[]{ "BufPtr", "NumBytes", "IsDead", "TransportOptions", "SendStartMicros", "RequireAck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CompleteGroupRequest), global::Tensorflow.CompleteGroupRequest.Parser, new[]{ "GroupKey", "GroupSize", "DeviceType", "DeviceName", "CollectiveType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CompleteGroupResponse), global::Tensorflow.CompleteGroupResponse.Parser, new[]{ "GroupKey", "GroupSize", "DeviceType", "NumTasks", "DeviceName", "TaskName", "CommunicatorKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CompleteInstanceRequest), global::Tensorflow.CompleteInstanceRequest.Parser, new[]{ "Name", "Type", "DataType", "Shape", "GroupKey", "GroupSize", "InstanceKey", "DeviceType", "SubdivOffset", "Device", "IsSource" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CompleteInstanceResponse), global::Tensorflow.CompleteInstanceResponse.Parser, new[]{ "InstanceKey", "SourceRank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.GetStepSequenceRequest), global::Tensorflow.GetStepSequenceRequest.Parser, new[]{ "GraphKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.StepSequence), global::Tensorflow.StepSequence.Parser, new[]{ "GraphKey", "NextStepId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.GetStepSequenceResponse), global::Tensorflow.GetStepSequenceResponse.Parser, new[]{ "StepSequence" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetStatusRequest : pb::IMessage<GetStatusRequest> {
    private static readonly pb::MessageParser<GetStatusRequest> _parser = new pb::MessageParser<GetStatusRequest>(() => new GetStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest(GetStatusRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest Clone() {
      return new GetStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetStatusResponse : pb::IMessage<GetStatusResponse> {
    private static readonly pb::MessageParser<GetStatusResponse> _parser = new pb::MessageParser<GetStatusResponse>(() => new GetStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse(GetStatusResponse other) : this() {
      deviceAttributes_ = other.deviceAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse Clone() {
      return new GetStatusResponse(this);
    }

    /// <summary>Field number for the "device_attributes" field.</summary>
    public const int DeviceAttributesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_deviceAttributes_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> deviceAttributes_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> DeviceAttributes {
      get { return deviceAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceAttributes_.Equals(other.deviceAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceAttributes_.WriteTo(output, _repeated_deviceAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceAttributes_.CalculateSize(_repeated_deviceAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusResponse other) {
      if (other == null) {
        return;
      }
      deviceAttributes_.Add(other.deviceAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceAttributes_.AddEntriesFrom(input, _repeated_deviceAttributes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWorkerSessionRequest : pb::IMessage<CreateWorkerSessionRequest> {
    private static readonly pb::MessageParser<CreateWorkerSessionRequest> _parser = new pb::MessageParser<CreateWorkerSessionRequest>(() => new CreateWorkerSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWorkerSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionRequest(CreateWorkerSessionRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      serverDef_ = other.serverDef_ != null ? other.serverDef_.Clone() : null;
      isolateSessionState_ = other.isolateSessionState_;
      clusterDeviceAttributes_ = other.clusterDeviceAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionRequest Clone() {
      return new CreateWorkerSessionRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// Sessions are identified by a given handle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_def" field.</summary>
    public const int ServerDefFieldNumber = 2;
    private global::Tensorflow.ServerDef serverDef_;
    /// <summary>
    /// Defines the configuration of a TensorFlow worker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ServerDef ServerDef {
      get { return serverDef_; }
      set {
        serverDef_ = value;
      }
    }

    /// <summary>Field number for the "isolate_session_state" field.</summary>
    public const int IsolateSessionStateFieldNumber = 3;
    private bool isolateSessionState_;
    /// <summary>
    /// If true, any resources such as Variables used in the session will not be
    /// shared with other sessions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsolateSessionState {
      get { return isolateSessionState_; }
      set {
        isolateSessionState_ = value;
      }
    }

    /// <summary>Field number for the "cluster_device_attributes" field.</summary>
    public const int ClusterDeviceAttributesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_clusterDeviceAttributes_codec
        = pb::FieldCodec.ForMessage(34, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> clusterDeviceAttributes_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    /// <summary>
    /// The device attributes of all the devices in the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> ClusterDeviceAttributes {
      get { return clusterDeviceAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWorkerSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWorkerSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (!object.Equals(ServerDef, other.ServerDef)) return false;
      if (IsolateSessionState != other.IsolateSessionState) return false;
      if(!clusterDeviceAttributes_.Equals(other.clusterDeviceAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (serverDef_ != null) hash ^= ServerDef.GetHashCode();
      if (IsolateSessionState != false) hash ^= IsolateSessionState.GetHashCode();
      hash ^= clusterDeviceAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      if (serverDef_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServerDef);
      }
      if (IsolateSessionState != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsolateSessionState);
      }
      clusterDeviceAttributes_.WriteTo(output, _repeated_clusterDeviceAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (serverDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerDef);
      }
      if (IsolateSessionState != false) {
        size += 1 + 1;
      }
      size += clusterDeviceAttributes_.CalculateSize(_repeated_clusterDeviceAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWorkerSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.serverDef_ != null) {
        if (serverDef_ == null) {
          ServerDef = new global::Tensorflow.ServerDef();
        }
        ServerDef.MergeFrom(other.ServerDef);
      }
      if (other.IsolateSessionState != false) {
        IsolateSessionState = other.IsolateSessionState;
      }
      clusterDeviceAttributes_.Add(other.clusterDeviceAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
          case 18: {
            if (serverDef_ == null) {
              ServerDef = new global::Tensorflow.ServerDef();
            }
            input.ReadMessage(ServerDef);
            break;
          }
          case 24: {
            IsolateSessionState = input.ReadBool();
            break;
          }
          case 34: {
            clusterDeviceAttributes_.AddEntriesFrom(input, _repeated_clusterDeviceAttributes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWorkerSessionResponse : pb::IMessage<CreateWorkerSessionResponse> {
    private static readonly pb::MessageParser<CreateWorkerSessionResponse> _parser = new pb::MessageParser<CreateWorkerSessionResponse>(() => new CreateWorkerSessionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWorkerSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionResponse(CreateWorkerSessionResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionResponse Clone() {
      return new CreateWorkerSessionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWorkerSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWorkerSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWorkerSessionResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DeleteWorkerSessionRequest : pb::IMessage<DeleteWorkerSessionRequest> {
    private static readonly pb::MessageParser<DeleteWorkerSessionRequest> _parser = new pb::MessageParser<DeleteWorkerSessionRequest>(() => new DeleteWorkerSessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteWorkerSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteWorkerSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteWorkerSessionRequest(DeleteWorkerSessionRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteWorkerSessionRequest Clone() {
      return new DeleteWorkerSessionRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// Sessions are identified by a given handle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteWorkerSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteWorkerSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteWorkerSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteWorkerSessionResponse : pb::IMessage<DeleteWorkerSessionResponse> {
    private static readonly pb::MessageParser<DeleteWorkerSessionResponse> _parser = new pb::MessageParser<DeleteWorkerSessionResponse>(() => new DeleteWorkerSessionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteWorkerSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteWorkerSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteWorkerSessionResponse(DeleteWorkerSessionResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteWorkerSessionResponse Clone() {
      return new DeleteWorkerSessionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteWorkerSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteWorkerSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteWorkerSessionResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RegisterGraphRequest : pb::IMessage<RegisterGraphRequest> {
    private static readonly pb::MessageParser<RegisterGraphRequest> _parser = new pb::MessageParser<RegisterGraphRequest>(() => new RegisterGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphRequest(RegisterGraphRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      createWorkerSessionCalled_ = other.createWorkerSessionCalled_;
      graphDef_ = other.graphDef_ != null ? other.graphDef_.Clone() : null;
      hasControlFlow_ = other.hasControlFlow_;
      graphOptions_ = other.graphOptions_ != null ? other.graphOptions_.Clone() : null;
      debugOptions_ = other.debugOptions_ != null ? other.debugOptions_.Clone() : null;
      collectiveGraphKey_ = other.collectiveGraphKey_;
      configProto_ = other.configProto_ != null ? other.configProto_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphRequest Clone() {
      return new RegisterGraphRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// Subgraphs are scoped within one session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_worker_session_called" field.</summary>
    public const int CreateWorkerSessionCalledFieldNumber = 6;
    private bool createWorkerSessionCalled_;
    /// <summary>
    /// Set to true if `CreateWorkerSession` was called for `session_handle`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreateWorkerSessionCalled {
      get { return createWorkerSessionCalled_; }
      set {
        createWorkerSessionCalled_ = value;
      }
    }

    /// <summary>Field number for the "graph_def" field.</summary>
    public const int GraphDefFieldNumber = 2;
    private global::Tensorflow.GraphDef graphDef_;
    /// <summary>
    /// "graph_def" has the subgraph of nodes for this worker, with each node
    /// having its device_name filled in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphDef GraphDef {
      get { return graphDef_; }
      set {
        graphDef_ = value;
      }
    }

    /// <summary>Field number for the "has_control_flow" field.</summary>
    public const int HasControlFlowFieldNumber = 3;
    private bool hasControlFlow_;
    /// <summary>
    /// True iff the graph (before partitioning) contains control flow nodes.
    ///
    /// As of 01/11/2015, this is no longer set by clients.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasControlFlow {
      get { return hasControlFlow_; }
      set {
        hasControlFlow_ = value;
      }
    }

    /// <summary>Field number for the "graph_options" field.</summary>
    public const int GraphOptionsFieldNumber = 4;
    private global::Tensorflow.GraphOptions graphOptions_;
    /// <summary>
    /// Configuration options for the session in which this graph was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphOptions GraphOptions {
      get { return graphOptions_; }
      set {
        graphOptions_ = value;
      }
    }

    /// <summary>Field number for the "debug_options" field.</summary>
    public const int DebugOptionsFieldNumber = 5;
    private global::Tensorflow.DebugOptions debugOptions_;
    /// <summary>
    /// Field(s) used by TensorFlow Debugger (tfdbg).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DebugOptions DebugOptions {
      get { return debugOptions_; }
      set {
        debugOptions_ = value;
      }
    }

    /// <summary>Field number for the "collective_graph_key" field.</summary>
    public const int CollectiveGraphKeyFieldNumber = 7;
    private long collectiveGraphKey_;
    /// <summary>
    /// If graph_def contains any collective ops this must be a positive
    /// integer used to coordinate execution with other graphs.  All
    /// graphs in a distributed execution with the same
    /// collective_graph_key will coordinate to use the same step_id
    /// concurrently so that BufRendezvous entries will make the correct
    /// values accessible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CollectiveGraphKey {
      get { return collectiveGraphKey_; }
      set {
        collectiveGraphKey_ = value;
      }
    }

    /// <summary>Field number for the "config_proto" field.</summary>
    public const int ConfigProtoFieldNumber = 8;
    private global::Tensorflow.ConfigProto configProto_;
    /// <summary>
    /// ConfigProto from the session in which this graph was created.
    /// Contains additional parameters beyond graph_options, including
    /// the name of the requested executor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ConfigProto ConfigProto {
      get { return configProto_; }
      set {
        configProto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (CreateWorkerSessionCalled != other.CreateWorkerSessionCalled) return false;
      if (!object.Equals(GraphDef, other.GraphDef)) return false;
      if (HasControlFlow != other.HasControlFlow) return false;
      if (!object.Equals(GraphOptions, other.GraphOptions)) return false;
      if (!object.Equals(DebugOptions, other.DebugOptions)) return false;
      if (CollectiveGraphKey != other.CollectiveGraphKey) return false;
      if (!object.Equals(ConfigProto, other.ConfigProto)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (CreateWorkerSessionCalled != false) hash ^= CreateWorkerSessionCalled.GetHashCode();
      if (graphDef_ != null) hash ^= GraphDef.GetHashCode();
      if (HasControlFlow != false) hash ^= HasControlFlow.GetHashCode();
      if (graphOptions_ != null) hash ^= GraphOptions.GetHashCode();
      if (debugOptions_ != null) hash ^= DebugOptions.GetHashCode();
      if (CollectiveGraphKey != 0L) hash ^= CollectiveGraphKey.GetHashCode();
      if (configProto_ != null) hash ^= ConfigProto.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      if (graphDef_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GraphDef);
      }
      if (HasControlFlow != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasControlFlow);
      }
      if (graphOptions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GraphOptions);
      }
      if (debugOptions_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DebugOptions);
      }
      if (CreateWorkerSessionCalled != false) {
        output.WriteRawTag(48);
        output.WriteBool(CreateWorkerSessionCalled);
      }
      if (CollectiveGraphKey != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CollectiveGraphKey);
      }
      if (configProto_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ConfigProto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (CreateWorkerSessionCalled != false) {
        size += 1 + 1;
      }
      if (graphDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphDef);
      }
      if (HasControlFlow != false) {
        size += 1 + 1;
      }
      if (graphOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphOptions);
      }
      if (debugOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugOptions);
      }
      if (CollectiveGraphKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CollectiveGraphKey);
      }
      if (configProto_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigProto);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.CreateWorkerSessionCalled != false) {
        CreateWorkerSessionCalled = other.CreateWorkerSessionCalled;
      }
      if (other.graphDef_ != null) {
        if (graphDef_ == null) {
          GraphDef = new global::Tensorflow.GraphDef();
        }
        GraphDef.MergeFrom(other.GraphDef);
      }
      if (other.HasControlFlow != false) {
        HasControlFlow = other.HasControlFlow;
      }
      if (other.graphOptions_ != null) {
        if (graphOptions_ == null) {
          GraphOptions = new global::Tensorflow.GraphOptions();
        }
        GraphOptions.MergeFrom(other.GraphOptions);
      }
      if (other.debugOptions_ != null) {
        if (debugOptions_ == null) {
          DebugOptions = new global::Tensorflow.DebugOptions();
        }
        DebugOptions.MergeFrom(other.DebugOptions);
      }
      if (other.CollectiveGraphKey != 0L) {
        CollectiveGraphKey = other.CollectiveGraphKey;
      }
      if (other.configProto_ != null) {
        if (configProto_ == null) {
          ConfigProto = new global::Tensorflow.ConfigProto();
        }
        ConfigProto.MergeFrom(other.ConfigProto);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
          case 18: {
            if (graphDef_ == null) {
              GraphDef = new global::Tensorflow.GraphDef();
            }
            input.ReadMessage(GraphDef);
            break;
          }
          case 24: {
            HasControlFlow = input.ReadBool();
            break;
          }
          case 34: {
            if (graphOptions_ == null) {
              GraphOptions = new global::Tensorflow.GraphOptions();
            }
            input.ReadMessage(GraphOptions);
            break;
          }
          case 42: {
            if (debugOptions_ == null) {
              DebugOptions = new global::Tensorflow.DebugOptions();
            }
            input.ReadMessage(DebugOptions);
            break;
          }
          case 48: {
            CreateWorkerSessionCalled = input.ReadBool();
            break;
          }
          case 56: {
            CollectiveGraphKey = input.ReadInt64();
            break;
          }
          case 66: {
            if (configProto_ == null) {
              ConfigProto = new global::Tensorflow.ConfigProto();
            }
            input.ReadMessage(ConfigProto);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterGraphResponse : pb::IMessage<RegisterGraphResponse> {
    private static readonly pb::MessageParser<RegisterGraphResponse> _parser = new pb::MessageParser<RegisterGraphResponse>(() => new RegisterGraphResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphResponse(RegisterGraphResponse other) : this() {
      graphHandle_ = other.graphHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphResponse Clone() {
      return new RegisterGraphResponse(this);
    }

    /// <summary>Field number for the "graph_handle" field.</summary>
    public const int GraphHandleFieldNumber = 1;
    private string graphHandle_ = "";
    /// <summary>
    /// If the registration succeeds, returns an opaque graph_handle to
    /// the master. The master calls RunGraph with graph_handle to
    /// compute different steps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphHandle {
      get { return graphHandle_; }
      set {
        graphHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GraphHandle != other.GraphHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GraphHandle.Length != 0) hash ^= GraphHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GraphHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GraphHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterGraphResponse other) {
      if (other == null) {
        return;
      }
      if (other.GraphHandle.Length != 0) {
        GraphHandle = other.GraphHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GraphHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeregisterGraphRequest : pb::IMessage<DeregisterGraphRequest> {
    private static readonly pb::MessageParser<DeregisterGraphRequest> _parser = new pb::MessageParser<DeregisterGraphRequest>(() => new DeregisterGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeregisterGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphRequest(DeregisterGraphRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      createWorkerSessionCalled_ = other.createWorkerSessionCalled_;
      graphHandle_ = other.graphHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphRequest Clone() {
      return new DeregisterGraphRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 2;
    private string sessionHandle_ = "";
    /// <summary>
    /// The session_handle used when registering the graph. If session_handle is
    /// empty, a single global namespace is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_worker_session_called" field.</summary>
    public const int CreateWorkerSessionCalledFieldNumber = 3;
    private bool createWorkerSessionCalled_;
    /// <summary>
    /// Set to true if `CreateWorkerSession` was called for `session_handle`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreateWorkerSessionCalled {
      get { return createWorkerSessionCalled_; }
      set {
        createWorkerSessionCalled_ = value;
      }
    }

    /// <summary>Field number for the "graph_handle" field.</summary>
    public const int GraphHandleFieldNumber = 1;
    private string graphHandle_ = "";
    /// <summary>
    /// REQUIRED: graph_handle must be returned by a RegisterGraph call
    /// to the same WorkerService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphHandle {
      get { return graphHandle_; }
      set {
        graphHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeregisterGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeregisterGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (CreateWorkerSessionCalled != other.CreateWorkerSessionCalled) return false;
      if (GraphHandle != other.GraphHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (CreateWorkerSessionCalled != false) hash ^= CreateWorkerSessionCalled.GetHashCode();
      if (GraphHandle.Length != 0) hash ^= GraphHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GraphHandle);
      }
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionHandle);
      }
      if (CreateWorkerSessionCalled != false) {
        output.WriteRawTag(24);
        output.WriteBool(CreateWorkerSessionCalled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (CreateWorkerSessionCalled != false) {
        size += 1 + 1;
      }
      if (GraphHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeregisterGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.CreateWorkerSessionCalled != false) {
        CreateWorkerSessionCalled = other.CreateWorkerSessionCalled;
      }
      if (other.GraphHandle.Length != 0) {
        GraphHandle = other.GraphHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GraphHandle = input.ReadString();
            break;
          }
          case 18: {
            SessionHandle = input.ReadString();
            break;
          }
          case 24: {
            CreateWorkerSessionCalled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO(mrry): Optionally add summary stats for the graph.
  /// </summary>
  public sealed partial class DeregisterGraphResponse : pb::IMessage<DeregisterGraphResponse> {
    private static readonly pb::MessageParser<DeregisterGraphResponse> _parser = new pb::MessageParser<DeregisterGraphResponse>(() => new DeregisterGraphResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeregisterGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphResponse(DeregisterGraphResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphResponse Clone() {
      return new DeregisterGraphResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeregisterGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeregisterGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeregisterGraphResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CleanupAllRequest : pb::IMessage<CleanupAllRequest> {
    private static readonly pb::MessageParser<CleanupAllRequest> _parser = new pb::MessageParser<CleanupAllRequest>(() => new CleanupAllRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupAllRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllRequest(CleanupAllRequest other) : this() {
      container_ = other.container_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllRequest Clone() {
      return new CleanupAllRequest(this);
    }

    /// <summary>Field number for the "container" field.</summary>
    public const int ContainerFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_container_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> container_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of container names.
    ///
    /// If 'container' is not empty, releases resources in the given
    /// containers in all devices.
    ///
    /// If 'container' is empty, releases resources in the default
    /// container in all devices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Container {
      get { return container_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupAllRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupAllRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!container_.Equals(other.container_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= container_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      container_.WriteTo(output, _repeated_container_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += container_.CalculateSize(_repeated_container_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupAllRequest other) {
      if (other == null) {
        return;
      }
      container_.Add(other.container_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            container_.AddEntriesFrom(input, _repeated_container_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CleanupAllResponse : pb::IMessage<CleanupAllResponse> {
    private static readonly pb::MessageParser<CleanupAllResponse> _parser = new pb::MessageParser<CleanupAllResponse>(() => new CleanupAllResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupAllResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllResponse(CleanupAllResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllResponse Clone() {
      return new CleanupAllResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupAllResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupAllResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupAllResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Options specific to the execution of a single step.
  /// </summary>
  public sealed partial class ExecutorOpts : pb::IMessage<ExecutorOpts> {
    private static readonly pb::MessageParser<ExecutorOpts> _parser = new pb::MessageParser<ExecutorOpts>(() => new ExecutorOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutorOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutorOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutorOpts(ExecutorOpts other) : this() {
      recordCosts_ = other.recordCosts_;
      recordTimeline_ = other.recordTimeline_;
      recordPartitionGraphs_ = other.recordPartitionGraphs_;
      reportTensorAllocationsUponOom_ = other.reportTensorAllocationsUponOom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutorOpts Clone() {
      return new ExecutorOpts(this);
    }

    /// <summary>Field number for the "record_costs" field.</summary>
    public const int RecordCostsFieldNumber = 1;
    private bool recordCosts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecordCosts {
      get { return recordCosts_; }
      set {
        recordCosts_ = value;
      }
    }

    /// <summary>Field number for the "record_timeline" field.</summary>
    public const int RecordTimelineFieldNumber = 3;
    private bool recordTimeline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecordTimeline {
      get { return recordTimeline_; }
      set {
        recordTimeline_ = value;
      }
    }

    /// <summary>Field number for the "record_partition_graphs" field.</summary>
    public const int RecordPartitionGraphsFieldNumber = 4;
    private bool recordPartitionGraphs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecordPartitionGraphs {
      get { return recordPartitionGraphs_; }
      set {
        recordPartitionGraphs_ = value;
      }
    }

    /// <summary>Field number for the "report_tensor_allocations_upon_oom" field.</summary>
    public const int ReportTensorAllocationsUponOomFieldNumber = 5;
    private bool reportTensorAllocationsUponOom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReportTensorAllocationsUponOom {
      get { return reportTensorAllocationsUponOom_; }
      set {
        reportTensorAllocationsUponOom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutorOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutorOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordCosts != other.RecordCosts) return false;
      if (RecordTimeline != other.RecordTimeline) return false;
      if (RecordPartitionGraphs != other.RecordPartitionGraphs) return false;
      if (ReportTensorAllocationsUponOom != other.ReportTensorAllocationsUponOom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordCosts != false) hash ^= RecordCosts.GetHashCode();
      if (RecordTimeline != false) hash ^= RecordTimeline.GetHashCode();
      if (RecordPartitionGraphs != false) hash ^= RecordPartitionGraphs.GetHashCode();
      if (ReportTensorAllocationsUponOom != false) hash ^= ReportTensorAllocationsUponOom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordCosts != false) {
        output.WriteRawTag(8);
        output.WriteBool(RecordCosts);
      }
      if (RecordTimeline != false) {
        output.WriteRawTag(24);
        output.WriteBool(RecordTimeline);
      }
      if (RecordPartitionGraphs != false) {
        output.WriteRawTag(32);
        output.WriteBool(RecordPartitionGraphs);
      }
      if (ReportTensorAllocationsUponOom != false) {
        output.WriteRawTag(40);
        output.WriteBool(ReportTensorAllocationsUponOom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordCosts != false) {
        size += 1 + 1;
      }
      if (RecordTimeline != false) {
        size += 1 + 1;
      }
      if (RecordPartitionGraphs != false) {
        size += 1 + 1;
      }
      if (ReportTensorAllocationsUponOom != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutorOpts other) {
      if (other == null) {
        return;
      }
      if (other.RecordCosts != false) {
        RecordCosts = other.RecordCosts;
      }
      if (other.RecordTimeline != false) {
        RecordTimeline = other.RecordTimeline;
      }
      if (other.RecordPartitionGraphs != false) {
        RecordPartitionGraphs = other.RecordPartitionGraphs;
      }
      if (other.ReportTensorAllocationsUponOom != false) {
        ReportTensorAllocationsUponOom = other.ReportTensorAllocationsUponOom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecordCosts = input.ReadBool();
            break;
          }
          case 24: {
            RecordTimeline = input.ReadBool();
            break;
          }
          case 32: {
            RecordPartitionGraphs = input.ReadBool();
            break;
          }
          case 40: {
            ReportTensorAllocationsUponOom = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunGraphRequest : pb::IMessage<RunGraphRequest> {
    private static readonly pb::MessageParser<RunGraphRequest> _parser = new pb::MessageParser<RunGraphRequest>(() => new RunGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphRequest(RunGraphRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      createWorkerSessionCalled_ = other.createWorkerSessionCalled_;
      graphHandle_ = other.graphHandle_;
      stepId_ = other.stepId_;
      execOpts_ = other.execOpts_ != null ? other.execOpts_.Clone() : null;
      send_ = other.send_.Clone();
      recvKey_ = other.recvKey_.Clone();
      isPartial_ = other.isPartial_;
      isLastPartialRun_ = other.isLastPartialRun_;
      storeErrorsInResponseBody_ = other.storeErrorsInResponseBody_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphRequest Clone() {
      return new RunGraphRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 8;
    private string sessionHandle_ = "";
    /// <summary>
    /// session_handle is the master-generated unique id for this session.
    /// If session_handle is non-empty, it must be the same as used when
    /// registering the graph. If it is empty, a single global namespace is used to
    /// search for the graph_handle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_worker_session_called" field.</summary>
    public const int CreateWorkerSessionCalledFieldNumber = 10;
    private bool createWorkerSessionCalled_;
    /// <summary>
    /// Set to true if `CreateWorkerSession` was called for `session_handle`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreateWorkerSessionCalled {
      get { return createWorkerSessionCalled_; }
      set {
        createWorkerSessionCalled_ = value;
      }
    }

    /// <summary>Field number for the "graph_handle" field.</summary>
    public const int GraphHandleFieldNumber = 1;
    private string graphHandle_ = "";
    /// <summary>
    /// REQUIRED: graph_handle must be returned by a RegisterGraph call
    /// to the same WorkerService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphHandle {
      get { return graphHandle_; }
      set {
        graphHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 2;
    private long stepId_;
    /// <summary>
    /// A unique ID to distinguish different runs of the same graph.
    ///
    /// The master generates a global unique `step_id` to distinguish
    /// different runs of the graph computation. Subgraphs communicate
    /// (e.g., send/recv ops) with each other using `step_id` to
    /// distinguish tensors generated by different runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "exec_opts" field.</summary>
    public const int ExecOptsFieldNumber = 5;
    private global::Tensorflow.ExecutorOpts execOpts_;
    /// <summary>
    /// Options for this step.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ExecutorOpts ExecOpts {
      get { return execOpts_; }
      set {
        execOpts_ = value;
      }
    }

    /// <summary>Field number for the "send" field.</summary>
    public const int SendFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tensorflow.NamedTensorProto> _repeated_send_codec
        = pb::FieldCodec.ForMessage(26, global::Tensorflow.NamedTensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.NamedTensorProto> send_ = new pbc::RepeatedField<global::Tensorflow.NamedTensorProto>();
    /// <summary>
    /// Runs the graph.
    ///
    /// Sends the tensors in "send" into the graph before the run and
    /// fetches the keys into `RunGraphResponse.recv` after the run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.NamedTensorProto> Send {
      get { return send_; }
    }

    /// <summary>Field number for the "recv_key" field.</summary>
    public const int RecvKeyFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_recvKey_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> recvKey_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecvKey {
      get { return recvKey_; }
    }

    /// <summary>Field number for the "is_partial" field.</summary>
    public const int IsPartialFieldNumber = 6;
    private bool isPartial_;
    /// <summary>
    /// True if the RunGraphRequest is a partial run request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPartial {
      get { return isPartial_; }
      set {
        isPartial_ = value;
      }
    }

    /// <summary>Field number for the "is_last_partial_run" field.</summary>
    public const int IsLastPartialRunFieldNumber = 7;
    private bool isLastPartialRun_;
    /// <summary>
    /// True if this is the last partial run request in a sequence of requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastPartialRun {
      get { return isLastPartialRun_; }
      set {
        isLastPartialRun_ = value;
      }
    }

    /// <summary>Field number for the "store_errors_in_response_body" field.</summary>
    public const int StoreErrorsInResponseBodyFieldNumber = 9;
    private bool storeErrorsInResponseBody_;
    /// <summary>
    /// If true then some errors, e.g., execution errors that have long
    /// error messages, may return an OK RunGraphResponse with the actual
    /// error saved in the status_code/status_error_message fields of the
    /// response body. This is a workaround since the RPC subsystem may
    /// truncate long metadata messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StoreErrorsInResponseBody {
      get { return storeErrorsInResponseBody_; }
      set {
        storeErrorsInResponseBody_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 11;
    private long requestId_;
    /// <summary>
    /// Unique identifier for this request. Every RunGraphRequest must have a
    /// unique request_id, and retried RunGraphRequests must have the same
    /// request_id. If request_id is zero, retry detection is disabled.
    ///
    /// Retried RunGraphRequests are problematic because they may issue a
    /// RecvTensor that will have no corresponding sender and will wait forever.
    /// Workers use request_ids to reject retried RunGraph requests instead of
    /// waiting forever.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (CreateWorkerSessionCalled != other.CreateWorkerSessionCalled) return false;
      if (GraphHandle != other.GraphHandle) return false;
      if (StepId != other.StepId) return false;
      if (!object.Equals(ExecOpts, other.ExecOpts)) return false;
      if(!send_.Equals(other.send_)) return false;
      if(!recvKey_.Equals(other.recvKey_)) return false;
      if (IsPartial != other.IsPartial) return false;
      if (IsLastPartialRun != other.IsLastPartialRun) return false;
      if (StoreErrorsInResponseBody != other.StoreErrorsInResponseBody) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (CreateWorkerSessionCalled != false) hash ^= CreateWorkerSessionCalled.GetHashCode();
      if (GraphHandle.Length != 0) hash ^= GraphHandle.GetHashCode();
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (execOpts_ != null) hash ^= ExecOpts.GetHashCode();
      hash ^= send_.GetHashCode();
      hash ^= recvKey_.GetHashCode();
      if (IsPartial != false) hash ^= IsPartial.GetHashCode();
      if (IsLastPartialRun != false) hash ^= IsLastPartialRun.GetHashCode();
      if (StoreErrorsInResponseBody != false) hash ^= StoreErrorsInResponseBody.GetHashCode();
      if (RequestId != 0L) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GraphHandle);
      }
      if (StepId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StepId);
      }
      send_.WriteTo(output, _repeated_send_codec);
      recvKey_.WriteTo(output, _repeated_recvKey_codec);
      if (execOpts_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExecOpts);
      }
      if (IsPartial != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsPartial);
      }
      if (IsLastPartialRun != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsLastPartialRun);
      }
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SessionHandle);
      }
      if (StoreErrorsInResponseBody != false) {
        output.WriteRawTag(72);
        output.WriteBool(StoreErrorsInResponseBody);
      }
      if (CreateWorkerSessionCalled != false) {
        output.WriteRawTag(80);
        output.WriteBool(CreateWorkerSessionCalled);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (CreateWorkerSessionCalled != false) {
        size += 1 + 1;
      }
      if (GraphHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphHandle);
      }
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (execOpts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecOpts);
      }
      size += send_.CalculateSize(_repeated_send_codec);
      size += recvKey_.CalculateSize(_repeated_recvKey_codec);
      if (IsPartial != false) {
        size += 1 + 1;
      }
      if (IsLastPartialRun != false) {
        size += 1 + 1;
      }
      if (StoreErrorsInResponseBody != false) {
        size += 1 + 1;
      }
      if (RequestId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.CreateWorkerSessionCalled != false) {
        CreateWorkerSessionCalled = other.CreateWorkerSessionCalled;
      }
      if (other.GraphHandle.Length != 0) {
        GraphHandle = other.GraphHandle;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      if (other.execOpts_ != null) {
        if (execOpts_ == null) {
          ExecOpts = new global::Tensorflow.ExecutorOpts();
        }
        ExecOpts.MergeFrom(other.ExecOpts);
      }
      send_.Add(other.send_);
      recvKey_.Add(other.recvKey_);
      if (other.IsPartial != false) {
        IsPartial = other.IsPartial;
      }
      if (other.IsLastPartialRun != false) {
        IsLastPartialRun = other.IsLastPartialRun;
      }
      if (other.StoreErrorsInResponseBody != false) {
        StoreErrorsInResponseBody = other.StoreErrorsInResponseBody;
      }
      if (other.RequestId != 0L) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GraphHandle = input.ReadString();
            break;
          }
          case 16: {
            StepId = input.ReadInt64();
            break;
          }
          case 26: {
            send_.AddEntriesFrom(input, _repeated_send_codec);
            break;
          }
          case 34: {
            recvKey_.AddEntriesFrom(input, _repeated_recvKey_codec);
            break;
          }
          case 42: {
            if (execOpts_ == null) {
              ExecOpts = new global::Tensorflow.ExecutorOpts();
            }
            input.ReadMessage(ExecOpts);
            break;
          }
          case 48: {
            IsPartial = input.ReadBool();
            break;
          }
          case 56: {
            IsLastPartialRun = input.ReadBool();
            break;
          }
          case 66: {
            SessionHandle = input.ReadString();
            break;
          }
          case 72: {
            StoreErrorsInResponseBody = input.ReadBool();
            break;
          }
          case 80: {
            CreateWorkerSessionCalled = input.ReadBool();
            break;
          }
          case 88: {
            RequestId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunGraphResponse : pb::IMessage<RunGraphResponse> {
    private static readonly pb::MessageParser<RunGraphResponse> _parser = new pb::MessageParser<RunGraphResponse>(() => new RunGraphResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphResponse(RunGraphResponse other) : this() {
      recv_ = other.recv_.Clone();
      stepStats_ = other.stepStats_ != null ? other.stepStats_.Clone() : null;
      costGraph_ = other.costGraph_ != null ? other.costGraph_.Clone() : null;
      partitionGraph_ = other.partitionGraph_.Clone();
      statusCode_ = other.statusCode_;
      statusErrorMessage_ = other.statusErrorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphResponse Clone() {
      return new RunGraphResponse(this);
    }

    /// <summary>Field number for the "recv" field.</summary>
    public const int RecvFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.NamedTensorProto> _repeated_recv_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.NamedTensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.NamedTensorProto> recv_ = new pbc::RepeatedField<global::Tensorflow.NamedTensorProto>();
    /// <summary>
    /// A list of tensors corresponding to those requested by
    /// `RunGraphRequest.recv_key`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.NamedTensorProto> Recv {
      get { return recv_; }
    }

    /// <summary>Field number for the "step_stats" field.</summary>
    public const int StepStatsFieldNumber = 2;
    private global::Tensorflow.StepStats stepStats_;
    /// <summary>
    /// If the request asked for execution stats, the cost graph, or the partition
    /// graphs, these are returned here.
    /// TODO(suharshs): Package these in a RunMetadata instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.StepStats StepStats {
      get { return stepStats_; }
      set {
        stepStats_ = value;
      }
    }

    /// <summary>Field number for the "cost_graph" field.</summary>
    public const int CostGraphFieldNumber = 3;
    private global::Tensorflow.CostGraphDef costGraph_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CostGraphDef CostGraph {
      get { return costGraph_; }
      set {
        costGraph_ = value;
      }
    }

    /// <summary>Field number for the "partition_graph" field.</summary>
    public const int PartitionGraphFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tensorflow.GraphDef> _repeated_partitionGraph_codec
        = pb::FieldCodec.ForMessage(34, global::Tensorflow.GraphDef.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.GraphDef> partitionGraph_ = new pbc::RepeatedField<global::Tensorflow.GraphDef>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.GraphDef> PartitionGraph {
      get { return partitionGraph_; }
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 5;
    private global::Tensorflow.Error.Code statusCode_ = 0;
    /// <summary>
    /// If store_errors_in_response_body is true in the request, then
    /// optionally the server may return an OK status for the RPC and
    /// fill the true status into the fields below, to allow for messages
    /// that are too long to fit in metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Error.Code StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "status_error_message" field.</summary>
    public const int StatusErrorMessageFieldNumber = 6;
    private string statusErrorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusErrorMessage {
      get { return statusErrorMessage_; }
      set {
        statusErrorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recv_.Equals(other.recv_)) return false;
      if (!object.Equals(StepStats, other.StepStats)) return false;
      if (!object.Equals(CostGraph, other.CostGraph)) return false;
      if(!partitionGraph_.Equals(other.partitionGraph_)) return false;
      if (StatusCode != other.StatusCode) return false;
      if (StatusErrorMessage != other.StatusErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recv_.GetHashCode();
      if (stepStats_ != null) hash ^= StepStats.GetHashCode();
      if (costGraph_ != null) hash ^= CostGraph.GetHashCode();
      hash ^= partitionGraph_.GetHashCode();
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (StatusErrorMessage.Length != 0) hash ^= StatusErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recv_.WriteTo(output, _repeated_recv_codec);
      if (stepStats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StepStats);
      }
      if (costGraph_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CostGraph);
      }
      partitionGraph_.WriteTo(output, _repeated_partitionGraph_codec);
      if (StatusCode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) StatusCode);
      }
      if (StatusErrorMessage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StatusErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recv_.CalculateSize(_repeated_recv_codec);
      if (stepStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StepStats);
      }
      if (costGraph_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CostGraph);
      }
      size += partitionGraph_.CalculateSize(_repeated_partitionGraph_codec);
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (StatusErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunGraphResponse other) {
      if (other == null) {
        return;
      }
      recv_.Add(other.recv_);
      if (other.stepStats_ != null) {
        if (stepStats_ == null) {
          StepStats = new global::Tensorflow.StepStats();
        }
        StepStats.MergeFrom(other.StepStats);
      }
      if (other.costGraph_ != null) {
        if (costGraph_ == null) {
          CostGraph = new global::Tensorflow.CostGraphDef();
        }
        CostGraph.MergeFrom(other.CostGraph);
      }
      partitionGraph_.Add(other.partitionGraph_);
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.StatusErrorMessage.Length != 0) {
        StatusErrorMessage = other.StatusErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            recv_.AddEntriesFrom(input, _repeated_recv_codec);
            break;
          }
          case 18: {
            if (stepStats_ == null) {
              StepStats = new global::Tensorflow.StepStats();
            }
            input.ReadMessage(StepStats);
            break;
          }
          case 26: {
            if (costGraph_ == null) {
              CostGraph = new global::Tensorflow.CostGraphDef();
            }
            input.ReadMessage(CostGraph);
            break;
          }
          case 34: {
            partitionGraph_.AddEntriesFrom(input, _repeated_partitionGraph_codec);
            break;
          }
          case 40: {
            StatusCode = (global::Tensorflow.Error.Code) input.ReadEnum();
            break;
          }
          case 50: {
            StatusErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CleanupGraphRequest : pb::IMessage<CleanupGraphRequest> {
    private static readonly pb::MessageParser<CleanupGraphRequest> _parser = new pb::MessageParser<CleanupGraphRequest>(() => new CleanupGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphRequest(CleanupGraphRequest other) : this() {
      stepId_ = other.stepId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphRequest Clone() {
      return new CleanupGraphRequest(this);
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 1;
    private long stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepId != other.StepId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StepId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CleanupGraphResponse : pb::IMessage<CleanupGraphResponse> {
    private static readonly pb::MessageParser<CleanupGraphResponse> _parser = new pb::MessageParser<CleanupGraphResponse>(() => new CleanupGraphResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphResponse(CleanupGraphResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphResponse Clone() {
      return new CleanupGraphResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupGraphResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RecvTensorRequest : pb::IMessage<RecvTensorRequest> {
    private static readonly pb::MessageParser<RecvTensorRequest> _parser = new pb::MessageParser<RecvTensorRequest>(() => new RecvTensorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvTensorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorRequest(RecvTensorRequest other) : this() {
      stepId_ = other.stepId_;
      rendezvousKey_ = other.rendezvousKey_;
      dmaOk_ = other.dmaOk_;
      clientLocality_ = other.clientLocality_ != null ? other.clientLocality_.Clone() : null;
      serverLocality_ = other.serverLocality_ != null ? other.serverLocality_.Clone() : null;
      transportOptions_ = other.transportOptions_ != null ? other.transportOptions_.Clone() : null;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorRequest Clone() {
      return new RecvTensorRequest(this);
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 1;
    private long stepId_;
    /// <summary>
    /// The step in which the tensor will be produced.
    ///
    /// REQUIRED: This must eventually correspond to the `step_id` passed
    /// into a RunGraph call on the same WorkerService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "rendezvous_key" field.</summary>
    public const int RendezvousKeyFieldNumber = 2;
    private string rendezvousKey_ = "";
    /// <summary>
    /// A key identifying the channel to receive tensors from. A RecvTensor request
    /// retrieves one tensor from the channel, but multiple tensors can be sent and
    /// received over the same channel with multiple RecvTensor requests. See
    /// rendezvous.h for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RendezvousKey {
      get { return rendezvousKey_; }
      set {
        rendezvousKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dma_ok" field.</summary>
    public const int DmaOkFieldNumber = 3;
    private bool dmaOk_;
    /// <summary>
    /// If true, use an out-of-band DMA mechanism to transfer the
    /// received tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DmaOk {
      get { return dmaOk_; }
      set {
        dmaOk_ = value;
      }
    }

    /// <summary>Field number for the "client_locality" field.</summary>
    public const int ClientLocalityFieldNumber = 4;
    private global::Tensorflow.DeviceLocality clientLocality_;
    /// <summary>
    /// Optional information on client-side device locality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DeviceLocality ClientLocality {
      get { return clientLocality_; }
      set {
        clientLocality_ = value;
      }
    }

    /// <summary>Field number for the "server_locality" field.</summary>
    public const int ServerLocalityFieldNumber = 5;
    private global::Tensorflow.DeviceLocality serverLocality_;
    /// <summary>
    /// Optional information on server-side device locality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DeviceLocality ServerLocality {
      get { return serverLocality_; }
      set {
        serverLocality_ = value;
      }
    }

    /// <summary>Field number for the "transport_options" field.</summary>
    public const int TransportOptionsFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Any transportOptions_;
    /// <summary>
    /// Optional information needed by the RPC subsystem.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TransportOptions {
      get { return transportOptions_; }
      set {
        transportOptions_ = value;
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 7;
    private long requestId_;
    /// <summary>
    /// Unique identifier for this request. Every RecvTensorRequest must have a
    /// unique request_id, and retried RecvTensorRequests must have the same
    /// request_id. If request_id is zero, retry detection and response cache
    /// are disabled.
    ///
    /// Retried RecvTensorRequests are problematic because a RecvTensor with no
    /// corresponding sender will wait forever, and the tensor may have been
    /// delivered to a previous retry. Workers use request_ids to reject retried
    /// RecvTensor requests instead of waiting forever.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvTensorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvTensorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepId != other.StepId) return false;
      if (RendezvousKey != other.RendezvousKey) return false;
      if (DmaOk != other.DmaOk) return false;
      if (!object.Equals(ClientLocality, other.ClientLocality)) return false;
      if (!object.Equals(ServerLocality, other.ServerLocality)) return false;
      if (!object.Equals(TransportOptions, other.TransportOptions)) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (RendezvousKey.Length != 0) hash ^= RendezvousKey.GetHashCode();
      if (DmaOk != false) hash ^= DmaOk.GetHashCode();
      if (clientLocality_ != null) hash ^= ClientLocality.GetHashCode();
      if (serverLocality_ != null) hash ^= ServerLocality.GetHashCode();
      if (transportOptions_ != null) hash ^= TransportOptions.GetHashCode();
      if (RequestId != 0L) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepId);
      }
      if (RendezvousKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RendezvousKey);
      }
      if (DmaOk != false) {
        output.WriteRawTag(24);
        output.WriteBool(DmaOk);
      }
      if (clientLocality_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClientLocality);
      }
      if (serverLocality_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ServerLocality);
      }
      if (transportOptions_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TransportOptions);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (RendezvousKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RendezvousKey);
      }
      if (DmaOk != false) {
        size += 1 + 1;
      }
      if (clientLocality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientLocality);
      }
      if (serverLocality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerLocality);
      }
      if (transportOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportOptions);
      }
      if (RequestId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvTensorRequest other) {
      if (other == null) {
        return;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      if (other.RendezvousKey.Length != 0) {
        RendezvousKey = other.RendezvousKey;
      }
      if (other.DmaOk != false) {
        DmaOk = other.DmaOk;
      }
      if (other.clientLocality_ != null) {
        if (clientLocality_ == null) {
          ClientLocality = new global::Tensorflow.DeviceLocality();
        }
        ClientLocality.MergeFrom(other.ClientLocality);
      }
      if (other.serverLocality_ != null) {
        if (serverLocality_ == null) {
          ServerLocality = new global::Tensorflow.DeviceLocality();
        }
        ServerLocality.MergeFrom(other.ServerLocality);
      }
      if (other.transportOptions_ != null) {
        if (transportOptions_ == null) {
          TransportOptions = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        TransportOptions.MergeFrom(other.TransportOptions);
      }
      if (other.RequestId != 0L) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StepId = input.ReadInt64();
            break;
          }
          case 18: {
            RendezvousKey = input.ReadString();
            break;
          }
          case 24: {
            DmaOk = input.ReadBool();
            break;
          }
          case 34: {
            if (clientLocality_ == null) {
              ClientLocality = new global::Tensorflow.DeviceLocality();
            }
            input.ReadMessage(ClientLocality);
            break;
          }
          case 42: {
            if (serverLocality_ == null) {
              ServerLocality = new global::Tensorflow.DeviceLocality();
            }
            input.ReadMessage(ServerLocality);
            break;
          }
          case 50: {
            if (transportOptions_ == null) {
              TransportOptions = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(TransportOptions);
            break;
          }
          case 56: {
            RequestId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecvTensorResponse : pb::IMessage<RecvTensorResponse> {
    private static readonly pb::MessageParser<RecvTensorResponse> _parser = new pb::MessageParser<RecvTensorResponse>(() => new RecvTensorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvTensorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorResponse(RecvTensorResponse other) : this() {
      tensor_ = other.tensor_ != null ? other.tensor_.Clone() : null;
      isDead_ = other.isDead_;
      sendStartMicros_ = other.sendStartMicros_;
      transportOptions_ = other.transportOptions_ != null ? other.transportOptions_.Clone() : null;
      requireAck_ = other.requireAck_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorResponse Clone() {
      return new RecvTensorResponse(this);
    }

    /// <summary>Field number for the "tensor" field.</summary>
    public const int TensorFieldNumber = 1;
    private global::Tensorflow.TensorProto tensor_;
    /// <summary>
    /// The tensor as a proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorProto Tensor {
      get { return tensor_; }
      set {
        tensor_ = value;
      }
    }

    /// <summary>Field number for the "is_dead" field.</summary>
    public const int IsDeadFieldNumber = 2;
    private bool isDead_;
    /// <summary>
    /// If true, this tensor was the output of a dead node, and the
    /// content is invalid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDead {
      get { return isDead_; }
      set {
        isDead_ = value;
      }
    }

    /// <summary>Field number for the "send_start_micros" field.</summary>
    public const int SendStartMicrosFieldNumber = 3;
    private long sendStartMicros_;
    /// <summary>
    /// The time at which tensor was available and started to be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendStartMicros {
      get { return sendStartMicros_; }
      set {
        sendStartMicros_ = value;
      }
    }

    /// <summary>Field number for the "transport_options" field.</summary>
    public const int TransportOptionsFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any transportOptions_;
    /// <summary>
    /// Optional additional information about how to receive the tensor,
    /// e.g. in the event that `RecvTensorRequest.dma_ok` was true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TransportOptions {
      get { return transportOptions_; }
      set {
        transportOptions_ = value;
      }
    }

    /// <summary>Field number for the "require_ack" field.</summary>
    public const int RequireAckFieldNumber = 5;
    private bool requireAck_;
    /// <summary>
    /// Whether the receiver should send a MarkRecvFinishedRequest to the sender
    /// to ack the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireAck {
      get { return requireAck_; }
      set {
        requireAck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvTensorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvTensorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tensor, other.Tensor)) return false;
      if (IsDead != other.IsDead) return false;
      if (SendStartMicros != other.SendStartMicros) return false;
      if (!object.Equals(TransportOptions, other.TransportOptions)) return false;
      if (RequireAck != other.RequireAck) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tensor_ != null) hash ^= Tensor.GetHashCode();
      if (IsDead != false) hash ^= IsDead.GetHashCode();
      if (SendStartMicros != 0L) hash ^= SendStartMicros.GetHashCode();
      if (transportOptions_ != null) hash ^= TransportOptions.GetHashCode();
      if (RequireAck != false) hash ^= RequireAck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tensor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tensor);
      }
      if (IsDead != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDead);
      }
      if (SendStartMicros != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SendStartMicros);
      }
      if (transportOptions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TransportOptions);
      }
      if (RequireAck != false) {
        output.WriteRawTag(40);
        output.WriteBool(RequireAck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tensor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tensor);
      }
      if (IsDead != false) {
        size += 1 + 1;
      }
      if (SendStartMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendStartMicros);
      }
      if (transportOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportOptions);
      }
      if (RequireAck != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvTensorResponse other) {
      if (other == null) {
        return;
      }
      if (other.tensor_ != null) {
        if (tensor_ == null) {
          Tensor = new global::Tensorflow.TensorProto();
        }
        Tensor.MergeFrom(other.Tensor);
      }
      if (other.IsDead != false) {
        IsDead = other.IsDead;
      }
      if (other.SendStartMicros != 0L) {
        SendStartMicros = other.SendStartMicros;
      }
      if (other.transportOptions_ != null) {
        if (transportOptions_ == null) {
          TransportOptions = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        TransportOptions.MergeFrom(other.TransportOptions);
      }
      if (other.RequireAck != false) {
        RequireAck = other.RequireAck;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tensor_ == null) {
              Tensor = new global::Tensorflow.TensorProto();
            }
            input.ReadMessage(Tensor);
            break;
          }
          case 16: {
            IsDead = input.ReadBool();
            break;
          }
          case 24: {
            SendStartMicros = input.ReadInt64();
            break;
          }
          case 34: {
            if (transportOptions_ == null) {
              TransportOptions = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(TransportOptions);
            break;
          }
          case 40: {
            RequireAck = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message for managing the response cache maintained on the sender side.
  /// Currently only used by the gRPC worker service.
  /// </summary>
  public sealed partial class MarkRecvFinishedRequest : pb::IMessage<MarkRecvFinishedRequest> {
    private static readonly pb::MessageParser<MarkRecvFinishedRequest> _parser = new pb::MessageParser<MarkRecvFinishedRequest>(() => new MarkRecvFinishedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkRecvFinishedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkRecvFinishedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkRecvFinishedRequest(MarkRecvFinishedRequest other) : this() {
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkRecvFinishedRequest Clone() {
      return new MarkRecvFinishedRequest(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private long requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkRecvFinishedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkRecvFinishedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId != 0L) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkRecvFinishedRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestId != 0L) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarkRecvFinishedResponse : pb::IMessage<MarkRecvFinishedResponse> {
    private static readonly pb::MessageParser<MarkRecvFinishedResponse> _parser = new pb::MessageParser<MarkRecvFinishedResponse>(() => new MarkRecvFinishedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkRecvFinishedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkRecvFinishedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkRecvFinishedResponse(MarkRecvFinishedResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkRecvFinishedResponse Clone() {
      return new MarkRecvFinishedResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkRecvFinishedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkRecvFinishedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkRecvFinishedResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Out-of-band request to begin or end logging, or
  /// to retrieve logs for particular steps.
  /// </summary>
  public sealed partial class LoggingRequest : pb::IMessage<LoggingRequest> {
    private static readonly pb::MessageParser<LoggingRequest> _parser = new pb::MessageParser<LoggingRequest>(() => new LoggingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoggingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingRequest(LoggingRequest other) : this() {
      enableRpcLogging_ = other.enableRpcLogging_;
      disableRpcLogging_ = other.disableRpcLogging_;
      clear_ = other.clear_;
      fetchStepId_ = other.fetchStepId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingRequest Clone() {
      return new LoggingRequest(this);
    }

    /// <summary>Field number for the "enable_rpc_logging" field.</summary>
    public const int EnableRpcLoggingFieldNumber = 1;
    private bool enableRpcLogging_;
    /// <summary>
    /// If true, RPC logging will be enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableRpcLogging {
      get { return enableRpcLogging_; }
      set {
        enableRpcLogging_ = value;
      }
    }

    /// <summary>Field number for the "disable_rpc_logging" field.</summary>
    public const int DisableRpcLoggingFieldNumber = 4;
    private bool disableRpcLogging_;
    /// <summary>
    /// If true, RPC logging will be disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableRpcLogging {
      get { return disableRpcLogging_; }
      set {
        disableRpcLogging_ = value;
      }
    }

    /// <summary>Field number for the "clear" field.</summary>
    public const int ClearFieldNumber = 2;
    private bool clear_;
    /// <summary>
    /// If true, discard any saved logging data (for all steps).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clear {
      get { return clear_; }
      set {
        clear_ = value;
      }
    }

    /// <summary>Field number for the "fetch_step_id" field.</summary>
    public const int FetchStepIdFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_fetchStepId_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> fetchStepId_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// When set, requests all saved log data pertaining to the step.
    /// Any log data retrieved is eliminated from the store and cannot be
    /// retrieved again.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> FetchStepId {
      get { return fetchStepId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoggingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoggingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnableRpcLogging != other.EnableRpcLogging) return false;
      if (DisableRpcLogging != other.DisableRpcLogging) return false;
      if (Clear != other.Clear) return false;
      if(!fetchStepId_.Equals(other.fetchStepId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnableRpcLogging != false) hash ^= EnableRpcLogging.GetHashCode();
      if (DisableRpcLogging != false) hash ^= DisableRpcLogging.GetHashCode();
      if (Clear != false) hash ^= Clear.GetHashCode();
      hash ^= fetchStepId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnableRpcLogging != false) {
        output.WriteRawTag(8);
        output.WriteBool(EnableRpcLogging);
      }
      if (Clear != false) {
        output.WriteRawTag(16);
        output.WriteBool(Clear);
      }
      fetchStepId_.WriteTo(output, _repeated_fetchStepId_codec);
      if (DisableRpcLogging != false) {
        output.WriteRawTag(32);
        output.WriteBool(DisableRpcLogging);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnableRpcLogging != false) {
        size += 1 + 1;
      }
      if (DisableRpcLogging != false) {
        size += 1 + 1;
      }
      if (Clear != false) {
        size += 1 + 1;
      }
      size += fetchStepId_.CalculateSize(_repeated_fetchStepId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoggingRequest other) {
      if (other == null) {
        return;
      }
      if (other.EnableRpcLogging != false) {
        EnableRpcLogging = other.EnableRpcLogging;
      }
      if (other.DisableRpcLogging != false) {
        DisableRpcLogging = other.DisableRpcLogging;
      }
      if (other.Clear != false) {
        Clear = other.Clear;
      }
      fetchStepId_.Add(other.fetchStepId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnableRpcLogging = input.ReadBool();
            break;
          }
          case 16: {
            Clear = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            fetchStepId_.AddEntriesFrom(input, _repeated_fetchStepId_codec);
            break;
          }
          case 32: {
            DisableRpcLogging = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LabeledStepStats : pb::IMessage<LabeledStepStats> {
    private static readonly pb::MessageParser<LabeledStepStats> _parser = new pb::MessageParser<LabeledStepStats>(() => new LabeledStepStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabeledStepStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabeledStepStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabeledStepStats(LabeledStepStats other) : this() {
      stepId_ = other.stepId_;
      stepStats_ = other.stepStats_ != null ? other.stepStats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabeledStepStats Clone() {
      return new LabeledStepStats(this);
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 1;
    private long stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "step_stats" field.</summary>
    public const int StepStatsFieldNumber = 2;
    private global::Tensorflow.StepStats stepStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.StepStats StepStats {
      get { return stepStats_; }
      set {
        stepStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabeledStepStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabeledStepStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepId != other.StepId) return false;
      if (!object.Equals(StepStats, other.StepStats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (stepStats_ != null) hash ^= StepStats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepId);
      }
      if (stepStats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StepStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (stepStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StepStats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabeledStepStats other) {
      if (other == null) {
        return;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      if (other.stepStats_ != null) {
        if (stepStats_ == null) {
          StepStats = new global::Tensorflow.StepStats();
        }
        StepStats.MergeFrom(other.StepStats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StepId = input.ReadInt64();
            break;
          }
          case 18: {
            if (stepStats_ == null) {
              StepStats = new global::Tensorflow.StepStats();
            }
            input.ReadMessage(StepStats);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoggingResponse : pb::IMessage<LoggingResponse> {
    private static readonly pb::MessageParser<LoggingResponse> _parser = new pb::MessageParser<LoggingResponse>(() => new LoggingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoggingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingResponse(LoggingResponse other) : this() {
      step_ = other.step_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingResponse Clone() {
      return new LoggingResponse(this);
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.LabeledStepStats> _repeated_step_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.LabeledStepStats.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.LabeledStepStats> step_ = new pbc::RepeatedField<global::Tensorflow.LabeledStepStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.LabeledStepStats> Step {
      get { return step_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoggingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoggingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!step_.Equals(other.step_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= step_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      step_.WriteTo(output, _repeated_step_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += step_.CalculateSize(_repeated_step_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoggingResponse other) {
      if (other == null) {
        return;
      }
      step_.Add(other.step_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            step_.AddEntriesFrom(input, _repeated_step_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceOpts : pb::IMessage<TraceOpts> {
    private static readonly pb::MessageParser<TraceOpts> _parser = new pb::MessageParser<TraceOpts>(() => new TraceOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceOpts(TraceOpts other) : this() {
      duration_ = other.duration_;
      useStepProfiler_ = other.useStepProfiler_;
      useKernelProfiler_ = other.useKernelProfiler_;
      useExtendedProfiler_ = other.useExtendedProfiler_;
      useGpuProfiler_ = other.useGpuProfiler_;
      useSampleProfiler_ = other.useSampleProfiler_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceOpts Clone() {
      return new TraceOpts(this);
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private double duration_;
    /// <summary>
    /// Length of the trace to be taken, in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "use_step_profiler" field.</summary>
    public const int UseStepProfilerFieldNumber = 2;
    private bool useStepProfiler_;
    /// <summary>
    /// If true, capture step profile locally in each worker. Currently
    /// unimplemented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseStepProfiler {
      get { return useStepProfiler_; }
      set {
        useStepProfiler_ = value;
      }
    }

    /// <summary>Field number for the "use_kernel_profiler" field.</summary>
    public const int UseKernelProfilerFieldNumber = 3;
    private bool useKernelProfiler_;
    /// <summary>
    /// If true, capture kernel events from each worker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseKernelProfiler {
      get { return useKernelProfiler_; }
      set {
        useKernelProfiler_ = value;
      }
    }

    /// <summary>Field number for the "use_extended_profiler" field.</summary>
    public const int UseExtendedProfilerFieldNumber = 4;
    private bool useExtendedProfiler_;
    /// <summary>
    /// If true, capture extended profiling events from TensorFlow process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseExtendedProfiler {
      get { return useExtendedProfiler_; }
      set {
        useExtendedProfiler_ = value;
      }
    }

    /// <summary>Field number for the "use_gpu_profiler" field.</summary>
    public const int UseGpuProfilerFieldNumber = 5;
    private bool useGpuProfiler_;
    /// <summary>
    /// If true, capture GPU profiling events locally on each
    /// machine. Currently unimplemented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGpuProfiler {
      get { return useGpuProfiler_; }
      set {
        useGpuProfiler_ = value;
      }
    }

    /// <summary>Field number for the "use_sample_profiler" field.</summary>
    public const int UseSampleProfilerFieldNumber = 6;
    private bool useSampleProfiler_;
    /// <summary>
    /// If true, collect sampled profile events. Currently unimplemented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSampleProfiler {
      get { return useSampleProfiler_; }
      set {
        useSampleProfiler_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (UseStepProfiler != other.UseStepProfiler) return false;
      if (UseKernelProfiler != other.UseKernelProfiler) return false;
      if (UseExtendedProfiler != other.UseExtendedProfiler) return false;
      if (UseGpuProfiler != other.UseGpuProfiler) return false;
      if (UseSampleProfiler != other.UseSampleProfiler) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Duration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Duration);
      if (UseStepProfiler != false) hash ^= UseStepProfiler.GetHashCode();
      if (UseKernelProfiler != false) hash ^= UseKernelProfiler.GetHashCode();
      if (UseExtendedProfiler != false) hash ^= UseExtendedProfiler.GetHashCode();
      if (UseGpuProfiler != false) hash ^= UseGpuProfiler.GetHashCode();
      if (UseSampleProfiler != false) hash ^= UseSampleProfiler.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Duration != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Duration);
      }
      if (UseStepProfiler != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseStepProfiler);
      }
      if (UseKernelProfiler != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseKernelProfiler);
      }
      if (UseExtendedProfiler != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseExtendedProfiler);
      }
      if (UseGpuProfiler != false) {
        output.WriteRawTag(40);
        output.WriteBool(UseGpuProfiler);
      }
      if (UseSampleProfiler != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseSampleProfiler);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Duration != 0D) {
        size += 1 + 8;
      }
      if (UseStepProfiler != false) {
        size += 1 + 1;
      }
      if (UseKernelProfiler != false) {
        size += 1 + 1;
      }
      if (UseExtendedProfiler != false) {
        size += 1 + 1;
      }
      if (UseGpuProfiler != false) {
        size += 1 + 1;
      }
      if (UseSampleProfiler != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceOpts other) {
      if (other == null) {
        return;
      }
      if (other.Duration != 0D) {
        Duration = other.Duration;
      }
      if (other.UseStepProfiler != false) {
        UseStepProfiler = other.UseStepProfiler;
      }
      if (other.UseKernelProfiler != false) {
        UseKernelProfiler = other.UseKernelProfiler;
      }
      if (other.UseExtendedProfiler != false) {
        UseExtendedProfiler = other.UseExtendedProfiler;
      }
      if (other.UseGpuProfiler != false) {
        UseGpuProfiler = other.UseGpuProfiler;
      }
      if (other.UseSampleProfiler != false) {
        UseSampleProfiler = other.UseSampleProfiler;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Duration = input.ReadDouble();
            break;
          }
          case 16: {
            UseStepProfiler = input.ReadBool();
            break;
          }
          case 24: {
            UseKernelProfiler = input.ReadBool();
            break;
          }
          case 32: {
            UseExtendedProfiler = input.ReadBool();
            break;
          }
          case 40: {
            UseGpuProfiler = input.ReadBool();
            break;
          }
          case 48: {
            UseSampleProfiler = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Out-of-band request to configure distributed tracing.
  /// </summary>
  public sealed partial class TracingRequest : pb::IMessage<TracingRequest> {
    private static readonly pb::MessageParser<TracingRequest> _parser = new pb::MessageParser<TracingRequest>(() => new TracingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TracingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingRequest(TracingRequest other) : this() {
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingRequest Clone() {
      return new TracingRequest(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 1;
    private global::Tensorflow.TraceOpts options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TraceOpts Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TracingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TracingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (options_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TracingRequest other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::Tensorflow.TraceOpts();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (options_ == null) {
              Options = new global::Tensorflow.TraceOpts();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TracingResponse : pb::IMessage<TracingResponse> {
    private static readonly pb::MessageParser<TracingResponse> _parser = new pb::MessageParser<TracingResponse>(() => new TracingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TracingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingResponse(TracingResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingResponse Clone() {
      return new TracingResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TracingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TracingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TracingResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Use of the fields below may vary by implementation.  For example
  /// the buf_ptr and num_bytes may be set only for local operations and
  /// not sent on the wire, or only sent on the wire in one direction.
  /// </summary>
  public sealed partial class RecvBufRequest : pb::IMessage<RecvBufRequest> {
    private static readonly pb::MessageParser<RecvBufRequest> _parser = new pb::MessageParser<RecvBufRequest>(() => new RecvBufRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvBufRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvBufRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvBufRequest(RecvBufRequest other) : this() {
      stepId_ = other.stepId_;
      bufRendezvousKey_ = other.bufRendezvousKey_;
      numBytes_ = other.numBytes_;
      bufPtr_ = other.bufPtr_;
      clientLocality_ = other.clientLocality_ != null ? other.clientLocality_.Clone() : null;
      serverLocality_ = other.serverLocality_ != null ? other.serverLocality_.Clone() : null;
      transportOptions_ = other.transportOptions_ != null ? other.transportOptions_.Clone() : null;
      srcDevice_ = other.srcDevice_;
      dstDevice_ = other.dstDevice_;
      requestId_ = other.requestId_;
      srcIncarnation_ = other.srcIncarnation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvBufRequest Clone() {
      return new RecvBufRequest(this);
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 1;
    private long stepId_;
    /// <summary>
    /// Used at server side to find the correct BufRendezvous.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "buf_rendezvous_key" field.</summary>
    public const int BufRendezvousKeyFieldNumber = 2;
    private string bufRendezvousKey_ = "";
    /// <summary>
    /// Arbitrary string identifying a BufRendezvous entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BufRendezvousKey {
      get { return bufRendezvousKey_; }
      set {
        bufRendezvousKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_bytes" field.</summary>
    public const int NumBytesFieldNumber = 3;
    private long numBytes_;
    /// <summary>
    /// Size of value expected, must agree with BufRendezvous entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumBytes {
      get { return numBytes_; }
      set {
        numBytes_ = value;
      }
    }

    /// <summary>Field number for the "buf_ptr" field.</summary>
    public const int BufPtrFieldNumber = 4;
    private ulong bufPtr_;
    /// <summary>
    /// When RDMA is in use, address of destination field on client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BufPtr {
      get { return bufPtr_; }
      set {
        bufPtr_ = value;
      }
    }

    /// <summary>Field number for the "client_locality" field.</summary>
    public const int ClientLocalityFieldNumber = 5;
    private global::Tensorflow.DeviceLocality clientLocality_;
    /// <summary>
    /// Optional information on client-side device locality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DeviceLocality ClientLocality {
      get { return clientLocality_; }
      set {
        clientLocality_ = value;
      }
    }

    /// <summary>Field number for the "server_locality" field.</summary>
    public const int ServerLocalityFieldNumber = 6;
    private global::Tensorflow.DeviceLocality serverLocality_;
    /// <summary>
    /// Optional information on server-side device locality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DeviceLocality ServerLocality {
      get { return serverLocality_; }
      set {
        serverLocality_ = value;
      }
    }

    /// <summary>Field number for the "transport_options" field.</summary>
    public const int TransportOptionsFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Any transportOptions_;
    /// <summary>
    /// Optional, implementation-specific data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TransportOptions {
      get { return transportOptions_; }
      set {
        transportOptions_ = value;
      }
    }

    /// <summary>Field number for the "src_device" field.</summary>
    public const int SrcDeviceFieldNumber = 8;
    private string srcDevice_ = "";
    /// <summary>
    /// For annotating timeline and device incarnation check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcDevice {
      get { return srcDevice_; }
      set {
        srcDevice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dst_device" field.</summary>
    public const int DstDeviceFieldNumber = 9;
    private string dstDevice_ = "";
    /// <summary>
    /// Optional, for annotating the timeline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DstDevice {
      get { return dstDevice_; }
      set {
        dstDevice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 10;
    private long requestId_;
    /// <summary>
    /// Depending on the RPC system in use, it may be necessary to set this
    /// id to detect resends of RPCs where the server is not aware that
    /// the prior RPC failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "src_incarnation" field.</summary>
    public const int SrcIncarnationFieldNumber = 11;
    private ulong srcIncarnation_;
    /// <summary>
    /// Incarnation number of the source device, used to detect worker failures.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SrcIncarnation {
      get { return srcIncarnation_; }
      set {
        srcIncarnation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvBufRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvBufRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepId != other.StepId) return false;
      if (BufRendezvousKey != other.BufRendezvousKey) return false;
      if (NumBytes != other.NumBytes) return false;
      if (BufPtr != other.BufPtr) return false;
      if (!object.Equals(ClientLocality, other.ClientLocality)) return false;
      if (!object.Equals(ServerLocality, other.ServerLocality)) return false;
      if (!object.Equals(TransportOptions, other.TransportOptions)) return false;
      if (SrcDevice != other.SrcDevice) return false;
      if (DstDevice != other.DstDevice) return false;
      if (RequestId != other.RequestId) return false;
      if (SrcIncarnation != other.SrcIncarnation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (BufRendezvousKey.Length != 0) hash ^= BufRendezvousKey.GetHashCode();
      if (NumBytes != 0L) hash ^= NumBytes.GetHashCode();
      if (BufPtr != 0UL) hash ^= BufPtr.GetHashCode();
      if (clientLocality_ != null) hash ^= ClientLocality.GetHashCode();
      if (serverLocality_ != null) hash ^= ServerLocality.GetHashCode();
      if (transportOptions_ != null) hash ^= TransportOptions.GetHashCode();
      if (SrcDevice.Length != 0) hash ^= SrcDevice.GetHashCode();
      if (DstDevice.Length != 0) hash ^= DstDevice.GetHashCode();
      if (RequestId != 0L) hash ^= RequestId.GetHashCode();
      if (SrcIncarnation != 0UL) hash ^= SrcIncarnation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepId);
      }
      if (BufRendezvousKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BufRendezvousKey);
      }
      if (NumBytes != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NumBytes);
      }
      if (BufPtr != 0UL) {
        output.WriteRawTag(33);
        output.WriteFixed64(BufPtr);
      }
      if (clientLocality_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ClientLocality);
      }
      if (serverLocality_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ServerLocality);
      }
      if (transportOptions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(TransportOptions);
      }
      if (SrcDevice.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SrcDevice);
      }
      if (DstDevice.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DstDevice);
      }
      if (RequestId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(RequestId);
      }
      if (SrcIncarnation != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(SrcIncarnation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (BufRendezvousKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BufRendezvousKey);
      }
      if (NumBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumBytes);
      }
      if (BufPtr != 0UL) {
        size += 1 + 8;
      }
      if (clientLocality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientLocality);
      }
      if (serverLocality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerLocality);
      }
      if (transportOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportOptions);
      }
      if (SrcDevice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SrcDevice);
      }
      if (DstDevice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DstDevice);
      }
      if (RequestId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestId);
      }
      if (SrcIncarnation != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SrcIncarnation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvBufRequest other) {
      if (other == null) {
        return;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      if (other.BufRendezvousKey.Length != 0) {
        BufRendezvousKey = other.BufRendezvousKey;
      }
      if (other.NumBytes != 0L) {
        NumBytes = other.NumBytes;
      }
      if (other.BufPtr != 0UL) {
        BufPtr = other.BufPtr;
      }
      if (other.clientLocality_ != null) {
        if (clientLocality_ == null) {
          ClientLocality = new global::Tensorflow.DeviceLocality();
        }
        ClientLocality.MergeFrom(other.ClientLocality);
      }
      if (other.serverLocality_ != null) {
        if (serverLocality_ == null) {
          ServerLocality = new global::Tensorflow.DeviceLocality();
        }
        ServerLocality.MergeFrom(other.ServerLocality);
      }
      if (other.transportOptions_ != null) {
        if (transportOptions_ == null) {
          TransportOptions = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        TransportOptions.MergeFrom(other.TransportOptions);
      }
      if (other.SrcDevice.Length != 0) {
        SrcDevice = other.SrcDevice;
      }
      if (other.DstDevice.Length != 0) {
        DstDevice = other.DstDevice;
      }
      if (other.RequestId != 0L) {
        RequestId = other.RequestId;
      }
      if (other.SrcIncarnation != 0UL) {
        SrcIncarnation = other.SrcIncarnation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StepId = input.ReadInt64();
            break;
          }
          case 18: {
            BufRendezvousKey = input.ReadString();
            break;
          }
          case 24: {
            NumBytes = input.ReadInt64();
            break;
          }
          case 33: {
            BufPtr = input.ReadFixed64();
            break;
          }
          case 42: {
            if (clientLocality_ == null) {
              ClientLocality = new global::Tensorflow.DeviceLocality();
            }
            input.ReadMessage(ClientLocality);
            break;
          }
          case 50: {
            if (serverLocality_ == null) {
              ServerLocality = new global::Tensorflow.DeviceLocality();
            }
            input.ReadMessage(ServerLocality);
            break;
          }
          case 58: {
            if (transportOptions_ == null) {
              TransportOptions = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(TransportOptions);
            break;
          }
          case 66: {
            SrcDevice = input.ReadString();
            break;
          }
          case 74: {
            DstDevice = input.ReadString();
            break;
          }
          case 80: {
            RequestId = input.ReadInt64();
            break;
          }
          case 88: {
            SrcIncarnation = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Use of the fields below may vary by implementation.  Comments give
  /// intended use.
  /// </summary>
  public sealed partial class RecvBufResponse : pb::IMessage<RecvBufResponse> {
    private static readonly pb::MessageParser<RecvBufResponse> _parser = new pb::MessageParser<RecvBufResponse>(() => new RecvBufResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvBufResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvBufResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvBufResponse(RecvBufResponse other) : this() {
      bufPtr_ = other.bufPtr_;
      numBytes_ = other.numBytes_;
      isDead_ = other.isDead_;
      transportOptions_ = other.transportOptions_ != null ? other.transportOptions_.Clone() : null;
      sendStartMicros_ = other.sendStartMicros_;
      requireAck_ = other.requireAck_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvBufResponse Clone() {
      return new RecvBufResponse(this);
    }

    /// <summary>Field number for the "buf_ptr" field.</summary>
    public const int BufPtrFieldNumber = 1;
    private ulong bufPtr_;
    /// <summary>
    /// Address of source field on server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BufPtr {
      get { return bufPtr_; }
      set {
        bufPtr_ = value;
      }
    }

    /// <summary>Field number for the "num_bytes" field.</summary>
    public const int NumBytesFieldNumber = 2;
    private long numBytes_;
    /// <summary>
    /// Byte length of buf_ptr field, if set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumBytes {
      get { return numBytes_; }
      set {
        numBytes_ = value;
      }
    }

    /// <summary>Field number for the "is_dead" field.</summary>
    public const int IsDeadFieldNumber = 3;
    private bool isDead_;
    /// <summary>
    /// True if value is 'dead' like a tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDead {
      get { return isDead_; }
      set {
        isDead_ = value;
      }
    }

    /// <summary>Field number for the "transport_options" field.</summary>
    public const int TransportOptionsFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any transportOptions_;
    /// <summary>
    /// Optional, implementation-specific data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TransportOptions {
      get { return transportOptions_; }
      set {
        transportOptions_ = value;
      }
    }

    /// <summary>Field number for the "send_start_micros" field.</summary>
    public const int SendStartMicrosFieldNumber = 5;
    private long sendStartMicros_;
    /// <summary>
    /// Optional, for timeline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendStartMicros {
      get { return sendStartMicros_; }
      set {
        sendStartMicros_ = value;
      }
    }

    /// <summary>Field number for the "require_ack" field.</summary>
    public const int RequireAckFieldNumber = 6;
    private bool requireAck_;
    /// <summary>
    /// Whether the receiver should send a MarkRecvFinishedRequest to the sender
    /// to ack the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireAck {
      get { return requireAck_; }
      set {
        requireAck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvBufResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvBufResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BufPtr != other.BufPtr) return false;
      if (NumBytes != other.NumBytes) return false;
      if (IsDead != other.IsDead) return false;
      if (!object.Equals(TransportOptions, other.TransportOptions)) return false;
      if (SendStartMicros != other.SendStartMicros) return false;
      if (RequireAck != other.RequireAck) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BufPtr != 0UL) hash ^= BufPtr.GetHashCode();
      if (NumBytes != 0L) hash ^= NumBytes.GetHashCode();
      if (IsDead != false) hash ^= IsDead.GetHashCode();
      if (transportOptions_ != null) hash ^= TransportOptions.GetHashCode();
      if (SendStartMicros != 0L) hash ^= SendStartMicros.GetHashCode();
      if (RequireAck != false) hash ^= RequireAck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BufPtr != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(BufPtr);
      }
      if (NumBytes != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NumBytes);
      }
      if (IsDead != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDead);
      }
      if (transportOptions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TransportOptions);
      }
      if (SendStartMicros != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SendStartMicros);
      }
      if (RequireAck != false) {
        output.WriteRawTag(48);
        output.WriteBool(RequireAck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BufPtr != 0UL) {
        size += 1 + 8;
      }
      if (NumBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumBytes);
      }
      if (IsDead != false) {
        size += 1 + 1;
      }
      if (transportOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportOptions);
      }
      if (SendStartMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendStartMicros);
      }
      if (RequireAck != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvBufResponse other) {
      if (other == null) {
        return;
      }
      if (other.BufPtr != 0UL) {
        BufPtr = other.BufPtr;
      }
      if (other.NumBytes != 0L) {
        NumBytes = other.NumBytes;
      }
      if (other.IsDead != false) {
        IsDead = other.IsDead;
      }
      if (other.transportOptions_ != null) {
        if (transportOptions_ == null) {
          TransportOptions = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        TransportOptions.MergeFrom(other.TransportOptions);
      }
      if (other.SendStartMicros != 0L) {
        SendStartMicros = other.SendStartMicros;
      }
      if (other.RequireAck != false) {
        RequireAck = other.RequireAck;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            BufPtr = input.ReadFixed64();
            break;
          }
          case 16: {
            NumBytes = input.ReadInt64();
            break;
          }
          case 24: {
            IsDead = input.ReadBool();
            break;
          }
          case 34: {
            if (transportOptions_ == null) {
              TransportOptions = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(TransportOptions);
            break;
          }
          case 40: {
            SendStartMicros = input.ReadInt64();
            break;
          }
          case 48: {
            RequireAck = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Supplies one or more device names as members of the group identified by
  /// group_key.  Service will respond when all group_size devices become known.
  /// All devices in group must have same type.
  /// </summary>
  public sealed partial class CompleteGroupRequest : pb::IMessage<CompleteGroupRequest> {
    private static readonly pb::MessageParser<CompleteGroupRequest> _parser = new pb::MessageParser<CompleteGroupRequest>(() => new CompleteGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteGroupRequest(CompleteGroupRequest other) : this() {
      groupKey_ = other.groupKey_;
      groupSize_ = other.groupSize_;
      deviceType_ = other.deviceType_;
      deviceName_ = other.deviceName_.Clone();
      collectiveType_ = other.collectiveType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteGroupRequest Clone() {
      return new CompleteGroupRequest(this);
    }

    /// <summary>Field number for the "group_key" field.</summary>
    public const int GroupKeyFieldNumber = 1;
    private int groupKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupKey {
      get { return groupKey_; }
      set {
        groupKey_ = value;
      }
    }

    /// <summary>Field number for the "group_size" field.</summary>
    public const int GroupSizeFieldNumber = 2;
    private int groupSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupSize {
      get { return groupSize_; }
      set {
        groupSize_ = value;
      }
    }

    /// <summary>Field number for the "device_type" field.</summary>
    public const int DeviceTypeFieldNumber = 3;
    private string deviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_deviceName_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> deviceName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceName {
      get { return deviceName_; }
    }

    /// <summary>Field number for the "collective_type" field.</summary>
    public const int CollectiveTypeFieldNumber = 5;
    private int collectiveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollectiveType {
      get { return collectiveType_; }
      set {
        collectiveType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupKey != other.GroupKey) return false;
      if (GroupSize != other.GroupSize) return false;
      if (DeviceType != other.DeviceType) return false;
      if(!deviceName_.Equals(other.deviceName_)) return false;
      if (CollectiveType != other.CollectiveType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupKey != 0) hash ^= GroupKey.GetHashCode();
      if (GroupSize != 0) hash ^= GroupSize.GetHashCode();
      if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
      hash ^= deviceName_.GetHashCode();
      if (CollectiveType != 0) hash ^= CollectiveType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupKey != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GroupKey);
      }
      if (GroupSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupSize);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceType);
      }
      deviceName_.WriteTo(output, _repeated_deviceName_codec);
      if (CollectiveType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CollectiveType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupKey);
      }
      if (GroupSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupSize);
      }
      if (DeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      size += deviceName_.CalculateSize(_repeated_deviceName_codec);
      if (CollectiveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollectiveType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupKey != 0) {
        GroupKey = other.GroupKey;
      }
      if (other.GroupSize != 0) {
        GroupSize = other.GroupSize;
      }
      if (other.DeviceType.Length != 0) {
        DeviceType = other.DeviceType;
      }
      deviceName_.Add(other.deviceName_);
      if (other.CollectiveType != 0) {
        CollectiveType = other.CollectiveType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupKey = input.ReadInt32();
            break;
          }
          case 16: {
            GroupSize = input.ReadInt32();
            break;
          }
          case 26: {
            DeviceType = input.ReadString();
            break;
          }
          case 34: {
            deviceName_.AddEntriesFrom(input, _repeated_deviceName_codec);
            break;
          }
          case 40: {
            CollectiveType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gives the complete membership of the group identified by group_key.
  /// </summary>
  public sealed partial class CompleteGroupResponse : pb::IMessage<CompleteGroupResponse> {
    private static readonly pb::MessageParser<CompleteGroupResponse> _parser = new pb::MessageParser<CompleteGroupResponse>(() => new CompleteGroupResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteGroupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteGroupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteGroupResponse(CompleteGroupResponse other) : this() {
      groupKey_ = other.groupKey_;
      groupSize_ = other.groupSize_;
      deviceType_ = other.deviceType_;
      numTasks_ = other.numTasks_;
      deviceName_ = other.deviceName_.Clone();
      taskName_ = other.taskName_.Clone();
      communicatorKey_ = other.communicatorKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteGroupResponse Clone() {
      return new CompleteGroupResponse(this);
    }

    /// <summary>Field number for the "group_key" field.</summary>
    public const int GroupKeyFieldNumber = 1;
    private int groupKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupKey {
      get { return groupKey_; }
      set {
        groupKey_ = value;
      }
    }

    /// <summary>Field number for the "group_size" field.</summary>
    public const int GroupSizeFieldNumber = 2;
    private int groupSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupSize {
      get { return groupSize_; }
      set {
        groupSize_ = value;
      }
    }

    /// <summary>Field number for the "device_type" field.</summary>
    public const int DeviceTypeFieldNumber = 3;
    private string deviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_tasks" field.</summary>
    public const int NumTasksFieldNumber = 4;
    private int numTasks_;
    /// <summary>
    /// number of distinct tasks hosting the devices
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTasks {
      get { return numTasks_; }
      set {
        numTasks_ = value;
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_deviceName_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> deviceName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceName {
      get { return deviceName_; }
    }

    /// <summary>Field number for the "task_name" field.</summary>
    public const int TaskNameFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_taskName_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> taskName_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// task name prefixes of device_names
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TaskName {
      get { return taskName_; }
    }

    /// <summary>Field number for the "communicator_key" field.</summary>
    public const int CommunicatorKeyFieldNumber = 7;
    private pb::ByteString communicatorKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CommunicatorKey {
      get { return communicatorKey_; }
      set {
        communicatorKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteGroupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteGroupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupKey != other.GroupKey) return false;
      if (GroupSize != other.GroupSize) return false;
      if (DeviceType != other.DeviceType) return false;
      if (NumTasks != other.NumTasks) return false;
      if(!deviceName_.Equals(other.deviceName_)) return false;
      if(!taskName_.Equals(other.taskName_)) return false;
      if (CommunicatorKey != other.CommunicatorKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupKey != 0) hash ^= GroupKey.GetHashCode();
      if (GroupSize != 0) hash ^= GroupSize.GetHashCode();
      if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
      if (NumTasks != 0) hash ^= NumTasks.GetHashCode();
      hash ^= deviceName_.GetHashCode();
      hash ^= taskName_.GetHashCode();
      if (CommunicatorKey.Length != 0) hash ^= CommunicatorKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupKey != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GroupKey);
      }
      if (GroupSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupSize);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceType);
      }
      if (NumTasks != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumTasks);
      }
      deviceName_.WriteTo(output, _repeated_deviceName_codec);
      taskName_.WriteTo(output, _repeated_taskName_codec);
      if (CommunicatorKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(CommunicatorKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupKey);
      }
      if (GroupSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupSize);
      }
      if (DeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      if (NumTasks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTasks);
      }
      size += deviceName_.CalculateSize(_repeated_deviceName_codec);
      size += taskName_.CalculateSize(_repeated_taskName_codec);
      if (CommunicatorKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CommunicatorKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteGroupResponse other) {
      if (other == null) {
        return;
      }
      if (other.GroupKey != 0) {
        GroupKey = other.GroupKey;
      }
      if (other.GroupSize != 0) {
        GroupSize = other.GroupSize;
      }
      if (other.DeviceType.Length != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.NumTasks != 0) {
        NumTasks = other.NumTasks;
      }
      deviceName_.Add(other.deviceName_);
      taskName_.Add(other.taskName_);
      if (other.CommunicatorKey.Length != 0) {
        CommunicatorKey = other.CommunicatorKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupKey = input.ReadInt32();
            break;
          }
          case 16: {
            GroupSize = input.ReadInt32();
            break;
          }
          case 26: {
            DeviceType = input.ReadString();
            break;
          }
          case 32: {
            NumTasks = input.ReadInt32();
            break;
          }
          case 42: {
            deviceName_.AddEntriesFrom(input, _repeated_deviceName_codec);
            break;
          }
          case 50: {
            taskName_.AddEntriesFrom(input, _repeated_taskName_codec);
            break;
          }
          case 58: {
            CommunicatorKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Supplies data about one collective op belonging to the instance identified
  /// by instance_key.  Service will respond when all group_size ops have
  /// become known.  Most of the data being sent is for correctness checking,
  /// to ensure that all ops in the instance share common attributes.
  /// </summary>
  public sealed partial class CompleteInstanceRequest : pb::IMessage<CompleteInstanceRequest> {
    private static readonly pb::MessageParser<CompleteInstanceRequest> _parser = new pb::MessageParser<CompleteInstanceRequest>(() => new CompleteInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteInstanceRequest(CompleteInstanceRequest other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      dataType_ = other.dataType_;
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      groupKey_ = other.groupKey_;
      groupSize_ = other.groupSize_;
      instanceKey_ = other.instanceKey_;
      deviceType_ = other.deviceType_;
      subdivOffset_ = other.subdivOffset_.Clone();
      device_ = other.device_;
      isSource_ = other.isSource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteInstanceRequest Clone() {
      return new CompleteInstanceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 3;
    private global::Tensorflow.DataType dataType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DataType DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 4;
    private global::Tensorflow.TensorShapeProto shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorShapeProto Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "group_key" field.</summary>
    public const int GroupKeyFieldNumber = 5;
    private int groupKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupKey {
      get { return groupKey_; }
      set {
        groupKey_ = value;
      }
    }

    /// <summary>Field number for the "group_size" field.</summary>
    public const int GroupSizeFieldNumber = 6;
    private int groupSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupSize {
      get { return groupSize_; }
      set {
        groupSize_ = value;
      }
    }

    /// <summary>Field number for the "instance_key" field.</summary>
    public const int InstanceKeyFieldNumber = 7;
    private int instanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceKey {
      get { return instanceKey_; }
      set {
        instanceKey_ = value;
      }
    }

    /// <summary>Field number for the "device_type" field.</summary>
    public const int DeviceTypeFieldNumber = 8;
    private string deviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subdiv_offset" field.</summary>
    public const int SubdivOffsetFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_subdivOffset_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> subdivOffset_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SubdivOffset {
      get { return subdivOffset_; }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 10;
    private string device_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_source" field.</summary>
    public const int IsSourceFieldNumber = 11;
    private bool isSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSource {
      get { return isSource_; }
      set {
        isSource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (DataType != other.DataType) return false;
      if (!object.Equals(Shape, other.Shape)) return false;
      if (GroupKey != other.GroupKey) return false;
      if (GroupSize != other.GroupSize) return false;
      if (InstanceKey != other.InstanceKey) return false;
      if (DeviceType != other.DeviceType) return false;
      if(!subdivOffset_.Equals(other.subdivOffset_)) return false;
      if (Device != other.Device) return false;
      if (IsSource != other.IsSource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (GroupKey != 0) hash ^= GroupKey.GetHashCode();
      if (GroupSize != 0) hash ^= GroupSize.GetHashCode();
      if (InstanceKey != 0) hash ^= InstanceKey.GetHashCode();
      if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
      hash ^= subdivOffset_.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (IsSource != false) hash ^= IsSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (DataType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DataType);
      }
      if (shape_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Shape);
      }
      if (GroupKey != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GroupKey);
      }
      if (GroupSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GroupSize);
      }
      if (InstanceKey != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(InstanceKey);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeviceType);
      }
      subdivOffset_.WriteTo(output, _repeated_subdivOffset_codec);
      if (Device.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Device);
      }
      if (IsSource != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (GroupKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupKey);
      }
      if (GroupSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupSize);
      }
      if (InstanceKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceKey);
      }
      if (DeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      size += subdivOffset_.CalculateSize(_repeated_subdivOffset_codec);
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (IsSource != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          Shape = new global::Tensorflow.TensorShapeProto();
        }
        Shape.MergeFrom(other.Shape);
      }
      if (other.GroupKey != 0) {
        GroupKey = other.GroupKey;
      }
      if (other.GroupSize != 0) {
        GroupSize = other.GroupSize;
      }
      if (other.InstanceKey != 0) {
        InstanceKey = other.InstanceKey;
      }
      if (other.DeviceType.Length != 0) {
        DeviceType = other.DeviceType;
      }
      subdivOffset_.Add(other.subdivOffset_);
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.IsSource != false) {
        IsSource = other.IsSource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            DataType = (global::Tensorflow.DataType) input.ReadEnum();
            break;
          }
          case 34: {
            if (shape_ == null) {
              Shape = new global::Tensorflow.TensorShapeProto();
            }
            input.ReadMessage(Shape);
            break;
          }
          case 40: {
            GroupKey = input.ReadInt32();
            break;
          }
          case 48: {
            GroupSize = input.ReadInt32();
            break;
          }
          case 56: {
            InstanceKey = input.ReadInt32();
            break;
          }
          case 66: {
            DeviceType = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            subdivOffset_.AddEntriesFrom(input, _repeated_subdivOffset_codec);
            break;
          }
          case 82: {
            Device = input.ReadString();
            break;
          }
          case 88: {
            IsSource = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Confirms that every op in the instance has consistently declared itself.
  /// Also gives the source_rank in case of broadcast.
  /// </summary>
  public sealed partial class CompleteInstanceResponse : pb::IMessage<CompleteInstanceResponse> {
    private static readonly pb::MessageParser<CompleteInstanceResponse> _parser = new pb::MessageParser<CompleteInstanceResponse>(() => new CompleteInstanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteInstanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteInstanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteInstanceResponse(CompleteInstanceResponse other) : this() {
      instanceKey_ = other.instanceKey_;
      sourceRank_ = other.sourceRank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteInstanceResponse Clone() {
      return new CompleteInstanceResponse(this);
    }

    /// <summary>Field number for the "instance_key" field.</summary>
    public const int InstanceKeyFieldNumber = 1;
    private int instanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceKey {
      get { return instanceKey_; }
      set {
        instanceKey_ = value;
      }
    }

    /// <summary>Field number for the "source_rank" field.</summary>
    public const int SourceRankFieldNumber = 2;
    private int sourceRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceRank {
      get { return sourceRank_; }
      set {
        sourceRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteInstanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteInstanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceKey != other.InstanceKey) return false;
      if (SourceRank != other.SourceRank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceKey != 0) hash ^= InstanceKey.GetHashCode();
      if (SourceRank != 0) hash ^= SourceRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceKey != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceKey);
      }
      if (SourceRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceKey);
      }
      if (SourceRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceRank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteInstanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.InstanceKey != 0) {
        InstanceKey = other.InstanceKey;
      }
      if (other.SourceRank != 0) {
        SourceRank = other.SourceRank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceKey = input.ReadInt32();
            break;
          }
          case 16: {
            SourceRank = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for next agreed-upon step_id for the specified graph_keys.
  /// This is used to enable multiple graphs containing nodes from
  /// a common collective instance to coordinate using the same step_ids.
  /// </summary>
  public sealed partial class GetStepSequenceRequest : pb::IMessage<GetStepSequenceRequest> {
    private static readonly pb::MessageParser<GetStepSequenceRequest> _parser = new pb::MessageParser<GetStepSequenceRequest>(() => new GetStepSequenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStepSequenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStepSequenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStepSequenceRequest(GetStepSequenceRequest other) : this() {
      graphKey_ = other.graphKey_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStepSequenceRequest Clone() {
      return new GetStepSequenceRequest(this);
    }

    /// <summary>Field number for the "graph_key" field.</summary>
    public const int GraphKeyFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_graphKey_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> graphKey_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> GraphKey {
      get { return graphKey_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStepSequenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStepSequenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!graphKey_.Equals(other.graphKey_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= graphKey_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      graphKey_.WriteTo(output, _repeated_graphKey_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += graphKey_.CalculateSize(_repeated_graphKey_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStepSequenceRequest other) {
      if (other == null) {
        return;
      }
      graphKey_.Add(other.graphKey_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            graphKey_.AddEntriesFrom(input, _repeated_graphKey_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StepSequence : pb::IMessage<StepSequence> {
    private static readonly pb::MessageParser<StepSequence> _parser = new pb::MessageParser<StepSequence>(() => new StepSequence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StepSequence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepSequence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepSequence(StepSequence other) : this() {
      graphKey_ = other.graphKey_;
      nextStepId_ = other.nextStepId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StepSequence Clone() {
      return new StepSequence(this);
    }

    /// <summary>Field number for the "graph_key" field.</summary>
    public const int GraphKeyFieldNumber = 1;
    private long graphKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GraphKey {
      get { return graphKey_; }
      set {
        graphKey_ = value;
      }
    }

    /// <summary>Field number for the "next_step_id" field.</summary>
    public const int NextStepIdFieldNumber = 2;
    private long nextStepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextStepId {
      get { return nextStepId_; }
      set {
        nextStepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StepSequence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StepSequence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GraphKey != other.GraphKey) return false;
      if (NextStepId != other.NextStepId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GraphKey != 0L) hash ^= GraphKey.GetHashCode();
      if (NextStepId != 0L) hash ^= NextStepId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GraphKey);
      }
      if (NextStepId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NextStepId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GraphKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GraphKey);
      }
      if (NextStepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextStepId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StepSequence other) {
      if (other == null) {
        return;
      }
      if (other.GraphKey != 0L) {
        GraphKey = other.GraphKey;
      }
      if (other.NextStepId != 0L) {
        NextStepId = other.NextStepId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GraphKey = input.ReadInt64();
            break;
          }
          case 16: {
            NextStepId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Next valid step_ids for one or more graph_keys.
  /// </summary>
  public sealed partial class GetStepSequenceResponse : pb::IMessage<GetStepSequenceResponse> {
    private static readonly pb::MessageParser<GetStepSequenceResponse> _parser = new pb::MessageParser<GetStepSequenceResponse>(() => new GetStepSequenceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStepSequenceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStepSequenceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStepSequenceResponse(GetStepSequenceResponse other) : this() {
      stepSequence_ = other.stepSequence_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStepSequenceResponse Clone() {
      return new GetStepSequenceResponse(this);
    }

    /// <summary>Field number for the "step_sequence" field.</summary>
    public const int StepSequenceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.StepSequence> _repeated_stepSequence_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.StepSequence.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.StepSequence> stepSequence_ = new pbc::RepeatedField<global::Tensorflow.StepSequence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.StepSequence> StepSequence {
      get { return stepSequence_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStepSequenceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStepSequenceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stepSequence_.Equals(other.stepSequence_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stepSequence_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stepSequence_.WriteTo(output, _repeated_stepSequence_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stepSequence_.CalculateSize(_repeated_stepSequence_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStepSequenceResponse other) {
      if (other == null) {
        return;
      }
      stepSequence_.Add(other.stepSequence_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stepSequence_.AddEntriesFrom(input, _repeated_stepSequence_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
