// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/tpu/compile_metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Tpu {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/tpu/compile_metadata.proto</summary>
  public static partial class CompileMetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/tpu/compile_metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CompileMetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjN0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvdHB1L2NvbXBpbGVfbWV0YWRh",
            "dGEucHJvdG8SDnRlbnNvcmZsb3cudHB1GiF0ZW5zb3JmbG93L2NvbXBpbGVy",
            "L3hsYS94bGEucHJvdG8aJnRlbnNvcmZsb3cvY29tcGlsZXIveGxhL3hsYV9k",
            "YXRhLnByb3RvGix0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3JrL3RlbnNvcl9z",
            "aGFwZS5wcm90bxoldGVuc29yZmxvdy9jb3JlL2ZyYW1ld29yay90eXBlcy5w",
            "cm90bxoydGVuc29yZmxvdy9jb3JlL3Byb3RvYnVmL3RwdS9keW5hbWljX3Bh",
            "ZGRpbmcucHJvdG8ilggKF1RQVUNvbXBpbGVNZXRhZGF0YVByb3RvEjkKBGFy",
            "Z3MYASADKAsyKy50ZW5zb3JmbG93LnRwdS5UUFVDb21waWxlTWV0YWRhdGFQ",
            "cm90by5BcmcSPwoHcmV0dmFscxgCIAMoCzIuLnRlbnNvcmZsb3cudHB1LlRQ",
            "VUNvbXBpbGVNZXRhZGF0YVByb3RvLlJldHZhbBIUCgxudW1fcmVwbGljYXMY",
            "AyABKAUSHQoVbnVtX2NvcmVzX3Blcl9yZXBsaWNhGAQgASgFEjUKEWRldmlj",
            "ZV9hc3NpZ25tZW50GAggASgLMhoueGxhLkRldmljZUFzc2lnbm1lbnRQcm90",
            "bxIkChxmdW5jdGlvbl9saWJyYXJ5X2ZpbmdlcnByaW50GAYgASgEEhYKDnNl",
            "c3Npb25faGFuZGxlGAkgASgJEiQKHGd1YXJhbnRlZWRfY29uc3RfZmluZ2Vy",
            "cHJpbnQYCiABKAkSMAoMcGFkZGluZ19tYXBzGAsgAygLMhoudGVuc29yZmxv",
            "dy50cHUuUGFkZGluZ01hcBJCChRzdGVwX21hcmtlcl9sb2NhdGlvbhgMIAEo",
            "DjIkLnhsYS5EZWJ1Z09wdGlvbnMuU3RlcE1hcmtlckxvY2F0aW9uEiMKG3hs",
            "YV9mdXNpb25fYXV0b3R1bmVyX3RocmVzaBgNIAEoAxraAwoDQXJnEiMKBWR0",
            "eXBlGAEgASgOMhQudGVuc29yZmxvdy5EYXRhVHlwZRIrCgVzaGFwZRgCIAEo",
            "CzIcLnRlbnNvcmZsb3cuVGVuc29yU2hhcGVQcm90bxI+CgRraW5kGAMgASgO",
            "MjAudGVuc29yZmxvdy50cHUuVFBVQ29tcGlsZU1ldGFkYXRhUHJvdG8uQXJn",
            "LktpbmQSIQoIc2hhcmRpbmcYBCABKAsyDy54bGEuT3BTaGFyZGluZxIkChxp",
            "c19zYW1lX2RhdGFfYWNyb3NzX3JlcGxpY2FzGAUgASgIEloKE2VuYWJsZV94",
            "bGFfc2hhcmRpbmcYBiABKA4yPS50ZW5zb3JmbG93LnRwdS5UUFVDb21waWxl",
            "TWV0YWRhdGFQcm90by5BcmcuRW5hYmxlWGxhU2hhcmRpbmcSEAoIZmFzdF9t",
            "ZW0YByABKAgiSQoES2luZBILCgdJTlZBTElEEAASDQoJUEFSQU1FVEVSEAES",
            "DAoIVkFSSUFCTEUQAhIXChNHVUFSQU5URUVEX0NPTlNUQU5UEAMiPwoRRW5h",
            "YmxlWGxhU2hhcmRpbmcSDgoKRElTQUxMT1dFRBAAEg0KCVRFTlRBVElWRRAB",
            "EgsKB0FMTE9XRUQQAhorCgZSZXR2YWwSIQoIc2hhcmRpbmcYASABKAsyDy54",
            "bGEuT3BTaGFyZGluZ0oECAUQBkoECAcQCEID+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xla.XlaReflection.Descriptor, global::Xla.XlaDataReflection.Descriptor, global::Tensorflow.TensorShapeReflection.Descriptor, global::Tensorflow.TypesReflection.Descriptor, global::Tensorflow.Tpu.DynamicPaddingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUCompileMetadataProto), global::Tensorflow.Tpu.TPUCompileMetadataProto.Parser, new[]{ "Args", "Retvals", "NumReplicas", "NumCoresPerReplica", "DeviceAssignment", "FunctionLibraryFingerprint", "SessionHandle", "GuaranteedConstFingerprint", "PaddingMaps", "StepMarkerLocation", "XlaFusionAutotunerThresh" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg), global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Parser, new[]{ "Dtype", "Shape", "Kind", "Sharding", "IsSameDataAcrossReplicas", "EnableXlaSharding", "FastMem" }, null, new[]{ typeof(global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Types.Kind), typeof(global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Types.EnableXlaSharding) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Retval), global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Retval.Parser, new[]{ "Sharding" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// This is an experimental proto used in the TF/XLA bridge to store metadata to
  /// a compile op (e.g. _TPUCompileMlir).
  /// TODO(lyandy): Deprecate proto once generic metadata proto is created.
  /// </summary>
  public sealed partial class TPUCompileMetadataProto : pb::IMessage<TPUCompileMetadataProto> {
    private static readonly pb::MessageParser<TPUCompileMetadataProto> _parser = new pb::MessageParser<TPUCompileMetadataProto>(() => new TPUCompileMetadataProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPUCompileMetadataProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.CompileMetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPUCompileMetadataProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPUCompileMetadataProto(TPUCompileMetadataProto other) : this() {
      args_ = other.args_.Clone();
      retvals_ = other.retvals_.Clone();
      numReplicas_ = other.numReplicas_;
      numCoresPerReplica_ = other.numCoresPerReplica_;
      deviceAssignment_ = other.deviceAssignment_ != null ? other.deviceAssignment_.Clone() : null;
      functionLibraryFingerprint_ = other.functionLibraryFingerprint_;
      sessionHandle_ = other.sessionHandle_;
      guaranteedConstFingerprint_ = other.guaranteedConstFingerprint_;
      paddingMaps_ = other.paddingMaps_.Clone();
      stepMarkerLocation_ = other.stepMarkerLocation_;
      xlaFusionAutotunerThresh_ = other.xlaFusionAutotunerThresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPUCompileMetadataProto Clone() {
      return new TPUCompileMetadataProto(this);
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg> _repeated_args_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg> args_ = new pbc::RepeatedField<global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "retvals" field.</summary>
    public const int RetvalsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Retval> _repeated_retvals_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Retval.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Retval> retvals_ = new pbc::RepeatedField<global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Retval>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Retval> Retvals {
      get { return retvals_; }
    }

    /// <summary>Field number for the "num_replicas" field.</summary>
    public const int NumReplicasFieldNumber = 3;
    private int numReplicas_;
    /// <summary>
    /// Number of replicas of the computation and number of cores in each replica.
    /// TODO(b/140721404): it may not be necessary to state the number of cores per
    /// replica here. Reconsider when replicated model-parallelism is implemented
    /// in XLA.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumReplicas {
      get { return numReplicas_; }
      set {
        numReplicas_ = value;
      }
    }

    /// <summary>Field number for the "num_cores_per_replica" field.</summary>
    public const int NumCoresPerReplicaFieldNumber = 4;
    private int numCoresPerReplica_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumCoresPerReplica {
      get { return numCoresPerReplica_; }
      set {
        numCoresPerReplica_ = value;
      }
    }

    /// <summary>Field number for the "device_assignment" field.</summary>
    public const int DeviceAssignmentFieldNumber = 8;
    private global::Xla.DeviceAssignmentProto deviceAssignment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DeviceAssignmentProto DeviceAssignment {
      get { return deviceAssignment_; }
      set {
        deviceAssignment_ = value;
      }
    }

    /// <summary>Field number for the "function_library_fingerprint" field.</summary>
    public const int FunctionLibraryFingerprintFieldNumber = 6;
    private ulong functionLibraryFingerprint_;
    /// <summary>
    /// A fingerprint of the function library. Ensures that any functions called
    /// by the computation have matching definitions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FunctionLibraryFingerprint {
      get { return functionLibraryFingerprint_; }
      set {
        functionLibraryFingerprint_ = value;
      }
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 9;
    private string sessionHandle_ = "";
    /// <summary>
    /// Unique session identifier. Can be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guaranteed_const_fingerprint" field.</summary>
    public const int GuaranteedConstFingerprintFieldNumber = 10;
    private string guaranteedConstFingerprint_ = "";
    /// <summary>
    /// Fingerprint of guaranteed_const value. The fingerprint computation inside
    /// tpu_compile_op may be slow. The compuation can be avoided by setting the
    /// fingerprint value here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuaranteedConstFingerprint {
      get { return guaranteedConstFingerprint_; }
      set {
        guaranteedConstFingerprint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "padding_maps" field.</summary>
    public const int PaddingMapsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Tensorflow.Tpu.PaddingMap> _repeated_paddingMaps_codec
        = pb::FieldCodec.ForMessage(90, global::Tensorflow.Tpu.PaddingMap.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tpu.PaddingMap> paddingMaps_ = new pbc::RepeatedField<global::Tensorflow.Tpu.PaddingMap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tpu.PaddingMap> PaddingMaps {
      get { return paddingMaps_; }
    }

    /// <summary>Field number for the "step_marker_location" field.</summary>
    public const int StepMarkerLocationFieldNumber = 12;
    private global::Xla.DebugOptions.Types.StepMarkerLocation stepMarkerLocation_ = 0;
    /// <summary>
    /// The location of step markers that XLA compile will instrument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DebugOptions.Types.StepMarkerLocation StepMarkerLocation {
      get { return stepMarkerLocation_; }
      set {
        stepMarkerLocation_ = value;
      }
    }

    /// <summary>Field number for the "xla_fusion_autotuner_thresh" field.</summary>
    public const int XlaFusionAutotunerThreshFieldNumber = 13;
    private long xlaFusionAutotunerThresh_;
    /// <summary>
    /// Minimum number of batches run through the XLA graph before XLA fusion
    /// autotuner is enabled. Default value of zero disables the autotuner.
    /// The XLA fusion autotuner can improve performance by executing a heuristic
    /// search on the compiler parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long XlaFusionAutotunerThresh {
      get { return xlaFusionAutotunerThresh_; }
      set {
        xlaFusionAutotunerThresh_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPUCompileMetadataProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPUCompileMetadataProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!args_.Equals(other.args_)) return false;
      if(!retvals_.Equals(other.retvals_)) return false;
      if (NumReplicas != other.NumReplicas) return false;
      if (NumCoresPerReplica != other.NumCoresPerReplica) return false;
      if (!object.Equals(DeviceAssignment, other.DeviceAssignment)) return false;
      if (FunctionLibraryFingerprint != other.FunctionLibraryFingerprint) return false;
      if (SessionHandle != other.SessionHandle) return false;
      if (GuaranteedConstFingerprint != other.GuaranteedConstFingerprint) return false;
      if(!paddingMaps_.Equals(other.paddingMaps_)) return false;
      if (StepMarkerLocation != other.StepMarkerLocation) return false;
      if (XlaFusionAutotunerThresh != other.XlaFusionAutotunerThresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= args_.GetHashCode();
      hash ^= retvals_.GetHashCode();
      if (NumReplicas != 0) hash ^= NumReplicas.GetHashCode();
      if (NumCoresPerReplica != 0) hash ^= NumCoresPerReplica.GetHashCode();
      if (deviceAssignment_ != null) hash ^= DeviceAssignment.GetHashCode();
      if (FunctionLibraryFingerprint != 0UL) hash ^= FunctionLibraryFingerprint.GetHashCode();
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (GuaranteedConstFingerprint.Length != 0) hash ^= GuaranteedConstFingerprint.GetHashCode();
      hash ^= paddingMaps_.GetHashCode();
      if (StepMarkerLocation != 0) hash ^= StepMarkerLocation.GetHashCode();
      if (XlaFusionAutotunerThresh != 0L) hash ^= XlaFusionAutotunerThresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      args_.WriteTo(output, _repeated_args_codec);
      retvals_.WriteTo(output, _repeated_retvals_codec);
      if (NumReplicas != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumReplicas);
      }
      if (NumCoresPerReplica != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NumCoresPerReplica);
      }
      if (FunctionLibraryFingerprint != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FunctionLibraryFingerprint);
      }
      if (deviceAssignment_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DeviceAssignment);
      }
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SessionHandle);
      }
      if (GuaranteedConstFingerprint.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GuaranteedConstFingerprint);
      }
      paddingMaps_.WriteTo(output, _repeated_paddingMaps_codec);
      if (StepMarkerLocation != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) StepMarkerLocation);
      }
      if (XlaFusionAutotunerThresh != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(XlaFusionAutotunerThresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += args_.CalculateSize(_repeated_args_codec);
      size += retvals_.CalculateSize(_repeated_retvals_codec);
      if (NumReplicas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumReplicas);
      }
      if (NumCoresPerReplica != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumCoresPerReplica);
      }
      if (deviceAssignment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceAssignment);
      }
      if (FunctionLibraryFingerprint != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FunctionLibraryFingerprint);
      }
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (GuaranteedConstFingerprint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuaranteedConstFingerprint);
      }
      size += paddingMaps_.CalculateSize(_repeated_paddingMaps_codec);
      if (StepMarkerLocation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StepMarkerLocation);
      }
      if (XlaFusionAutotunerThresh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(XlaFusionAutotunerThresh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPUCompileMetadataProto other) {
      if (other == null) {
        return;
      }
      args_.Add(other.args_);
      retvals_.Add(other.retvals_);
      if (other.NumReplicas != 0) {
        NumReplicas = other.NumReplicas;
      }
      if (other.NumCoresPerReplica != 0) {
        NumCoresPerReplica = other.NumCoresPerReplica;
      }
      if (other.deviceAssignment_ != null) {
        if (deviceAssignment_ == null) {
          DeviceAssignment = new global::Xla.DeviceAssignmentProto();
        }
        DeviceAssignment.MergeFrom(other.DeviceAssignment);
      }
      if (other.FunctionLibraryFingerprint != 0UL) {
        FunctionLibraryFingerprint = other.FunctionLibraryFingerprint;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.GuaranteedConstFingerprint.Length != 0) {
        GuaranteedConstFingerprint = other.GuaranteedConstFingerprint;
      }
      paddingMaps_.Add(other.paddingMaps_);
      if (other.StepMarkerLocation != 0) {
        StepMarkerLocation = other.StepMarkerLocation;
      }
      if (other.XlaFusionAutotunerThresh != 0L) {
        XlaFusionAutotunerThresh = other.XlaFusionAutotunerThresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 18: {
            retvals_.AddEntriesFrom(input, _repeated_retvals_codec);
            break;
          }
          case 24: {
            NumReplicas = input.ReadInt32();
            break;
          }
          case 32: {
            NumCoresPerReplica = input.ReadInt32();
            break;
          }
          case 48: {
            FunctionLibraryFingerprint = input.ReadUInt64();
            break;
          }
          case 66: {
            if (deviceAssignment_ == null) {
              DeviceAssignment = new global::Xla.DeviceAssignmentProto();
            }
            input.ReadMessage(DeviceAssignment);
            break;
          }
          case 74: {
            SessionHandle = input.ReadString();
            break;
          }
          case 82: {
            GuaranteedConstFingerprint = input.ReadString();
            break;
          }
          case 90: {
            paddingMaps_.AddEntriesFrom(input, _repeated_paddingMaps_codec);
            break;
          }
          case 96: {
            StepMarkerLocation = (global::Xla.DebugOptions.Types.StepMarkerLocation) input.ReadEnum();
            break;
          }
          case 104: {
            XlaFusionAutotunerThresh = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TPUCompileMetadataProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Description of the types and shapes of the arguments to a computation.
      /// </summary>
      public sealed partial class Arg : pb::IMessage<Arg> {
        private static readonly pb::MessageParser<Arg> _parser = new pb::MessageParser<Arg>(() => new Arg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Arg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.TPUCompileMetadataProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arg(Arg other) : this() {
          dtype_ = other.dtype_;
          shape_ = other.shape_ != null ? other.shape_.Clone() : null;
          kind_ = other.kind_;
          sharding_ = other.sharding_ != null ? other.sharding_.Clone() : null;
          isSameDataAcrossReplicas_ = other.isSameDataAcrossReplicas_;
          enableXlaSharding_ = other.enableXlaSharding_;
          fastMem_ = other.fastMem_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Arg Clone() {
          return new Arg(this);
        }

        /// <summary>Field number for the "dtype" field.</summary>
        public const int DtypeFieldNumber = 1;
        private global::Tensorflow.DataType dtype_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.DataType Dtype {
          get { return dtype_; }
          set {
            dtype_ = value;
          }
        }

        /// <summary>Field number for the "shape" field.</summary>
        public const int ShapeFieldNumber = 2;
        private global::Tensorflow.TensorShapeProto shape_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.TensorShapeProto Shape {
          get { return shape_; }
          set {
            shape_ = value;
          }
        }

        /// <summary>Field number for the "kind" field.</summary>
        public const int KindFieldNumber = 3;
        private global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Types.Kind kind_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Types.Kind Kind {
          get { return kind_; }
          set {
            kind_ = value;
          }
        }

        /// <summary>Field number for the "sharding" field.</summary>
        public const int ShardingFieldNumber = 4;
        private global::Xla.OpSharding sharding_;
        /// <summary>
        /// The cross-core sharding of this input within each replica, e.g.,
        /// assigning to one core, or replicate across all cores.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xla.OpSharding Sharding {
          get { return sharding_; }
          set {
            sharding_ = value;
          }
        }

        /// <summary>Field number for the "is_same_data_across_replicas" field.</summary>
        public const int IsSameDataAcrossReplicasFieldNumber = 5;
        private bool isSameDataAcrossReplicas_;
        /// <summary>
        /// Whether this argument will receive the same data across all replicas.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsSameDataAcrossReplicas {
          get { return isSameDataAcrossReplicas_; }
          set {
            isSameDataAcrossReplicas_ = value;
          }
        }

        /// <summary>Field number for the "enable_xla_sharding" field.</summary>
        public const int EnableXlaShardingFieldNumber = 6;
        private global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Types.EnableXlaSharding enableXlaSharding_ = 0;
        /// <summary>
        /// Whether to allow XLA to produce separate programs to shard/unshard this
        /// argument. Requires this arg to be an on-device variable.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Types.EnableXlaSharding EnableXlaSharding {
          get { return enableXlaSharding_; }
          set {
            enableXlaSharding_ = value;
          }
        }

        /// <summary>Field number for the "fast_mem" field.</summary>
        public const int FastMemFieldNumber = 7;
        private bool fastMem_;
        /// <summary>
        /// Whether this argument is placed on fast memory or not.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool FastMem {
          get { return fastMem_; }
          set {
            fastMem_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Arg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Arg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Dtype != other.Dtype) return false;
          if (!object.Equals(Shape, other.Shape)) return false;
          if (Kind != other.Kind) return false;
          if (!object.Equals(Sharding, other.Sharding)) return false;
          if (IsSameDataAcrossReplicas != other.IsSameDataAcrossReplicas) return false;
          if (EnableXlaSharding != other.EnableXlaSharding) return false;
          if (FastMem != other.FastMem) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Dtype != 0) hash ^= Dtype.GetHashCode();
          if (shape_ != null) hash ^= Shape.GetHashCode();
          if (Kind != 0) hash ^= Kind.GetHashCode();
          if (sharding_ != null) hash ^= Sharding.GetHashCode();
          if (IsSameDataAcrossReplicas != false) hash ^= IsSameDataAcrossReplicas.GetHashCode();
          if (EnableXlaSharding != 0) hash ^= EnableXlaSharding.GetHashCode();
          if (FastMem != false) hash ^= FastMem.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Dtype != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Dtype);
          }
          if (shape_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Shape);
          }
          if (Kind != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Kind);
          }
          if (sharding_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Sharding);
          }
          if (IsSameDataAcrossReplicas != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsSameDataAcrossReplicas);
          }
          if (EnableXlaSharding != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) EnableXlaSharding);
          }
          if (FastMem != false) {
            output.WriteRawTag(56);
            output.WriteBool(FastMem);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Dtype != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtype);
          }
          if (shape_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
          }
          if (Kind != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
          }
          if (sharding_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sharding);
          }
          if (IsSameDataAcrossReplicas != false) {
            size += 1 + 1;
          }
          if (EnableXlaSharding != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnableXlaSharding);
          }
          if (FastMem != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Arg other) {
          if (other == null) {
            return;
          }
          if (other.Dtype != 0) {
            Dtype = other.Dtype;
          }
          if (other.shape_ != null) {
            if (shape_ == null) {
              Shape = new global::Tensorflow.TensorShapeProto();
            }
            Shape.MergeFrom(other.Shape);
          }
          if (other.Kind != 0) {
            Kind = other.Kind;
          }
          if (other.sharding_ != null) {
            if (sharding_ == null) {
              Sharding = new global::Xla.OpSharding();
            }
            Sharding.MergeFrom(other.Sharding);
          }
          if (other.IsSameDataAcrossReplicas != false) {
            IsSameDataAcrossReplicas = other.IsSameDataAcrossReplicas;
          }
          if (other.EnableXlaSharding != 0) {
            EnableXlaSharding = other.EnableXlaSharding;
          }
          if (other.FastMem != false) {
            FastMem = other.FastMem;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Dtype = (global::Tensorflow.DataType) input.ReadEnum();
                break;
              }
              case 18: {
                if (shape_ == null) {
                  Shape = new global::Tensorflow.TensorShapeProto();
                }
                input.ReadMessage(Shape);
                break;
              }
              case 24: {
                Kind = (global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Types.Kind) input.ReadEnum();
                break;
              }
              case 34: {
                if (sharding_ == null) {
                  Sharding = new global::Xla.OpSharding();
                }
                input.ReadMessage(Sharding);
                break;
              }
              case 40: {
                IsSameDataAcrossReplicas = input.ReadBool();
                break;
              }
              case 48: {
                EnableXlaSharding = (global::Tensorflow.Tpu.TPUCompileMetadataProto.Types.Arg.Types.EnableXlaSharding) input.ReadEnum();
                break;
              }
              case 56: {
                FastMem = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Arg message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Kind {
            [pbr::OriginalName("INVALID")] Invalid = 0,
            [pbr::OriginalName("PARAMETER")] Parameter = 1,
            [pbr::OriginalName("VARIABLE")] Variable = 2,
            /// <summary>
            /// These are args which have been guaranteed to be constants during the
            /// session lifetime by the use of the GuaranteeConstOp (or ConstantOp).
            /// </summary>
            [pbr::OriginalName("GUARANTEED_CONSTANT")] GuaranteedConstant = 3,
          }

          public enum EnableXlaSharding {
            [pbr::OriginalName("DISALLOWED")] Disallowed = 0,
            /// <summary>
            /// Sharding is allowed if host training loop exists.
            /// </summary>
            [pbr::OriginalName("TENTATIVE")] Tentative = 1,
            [pbr::OriginalName("ALLOWED")] Allowed = 2,
          }

        }
        #endregion

      }

      /// <summary>
      /// Description of the return values from a computation.
      /// </summary>
      public sealed partial class Retval : pb::IMessage<Retval> {
        private static readonly pb::MessageParser<Retval> _parser = new pb::MessageParser<Retval>(() => new Retval());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Retval> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.TPUCompileMetadataProto.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Retval() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Retval(Retval other) : this() {
          sharding_ = other.sharding_ != null ? other.sharding_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Retval Clone() {
          return new Retval(this);
        }

        /// <summary>Field number for the "sharding" field.</summary>
        public const int ShardingFieldNumber = 1;
        private global::Xla.OpSharding sharding_;
        /// <summary>
        /// The cross-core sharding of this return value within each replica, e.g.,
        /// assigning to one core, or replicate across all cores.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xla.OpSharding Sharding {
          get { return sharding_; }
          set {
            sharding_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Retval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Retval other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Sharding, other.Sharding)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (sharding_ != null) hash ^= Sharding.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (sharding_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Sharding);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (sharding_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sharding);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Retval other) {
          if (other == null) {
            return;
          }
          if (other.sharding_ != null) {
            if (sharding_ == null) {
              Sharding = new global::Xla.OpSharding();
            }
            Sharding.MergeFrom(other.Sharding);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (sharding_ == null) {
                  Sharding = new global::Xla.OpSharding();
                }
                input.ReadMessage(Sharding);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
