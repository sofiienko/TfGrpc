// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/debug_event.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/debug_event.proto</summary>
  public static partial class DebugEventReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/debug_event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DebugEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cip0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvZGVidWdfZXZlbnQucHJvdG8S",
            "CnRlbnNvcmZsb3caJnRlbnNvcmZsb3cvY29yZS9mcmFtZXdvcmsvdGVuc29y",
            "LnByb3RvGi90ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvZ3JhcGhfZGVidWdf",
            "aW5mby5wcm90byLHAwoKRGVidWdFdmVudBIRCgl3YWxsX3RpbWUYASABKAES",
            "DAoEc3RlcBgCIAEoAxIzCg5kZWJ1Z19tZXRhZGF0YRgDIAEoCzIZLnRlbnNv",
            "cmZsb3cuRGVidWdNZXRhZGF0YUgAEi0KC3NvdXJjZV9maWxlGAQgASgLMhYu",
            "dGVuc29yZmxvdy5Tb3VyY2VGaWxlSAASOwoTc3RhY2tfZnJhbWVfd2l0aF9p",
            "ZBgGIAEoCzIcLnRlbnNvcmZsb3cuU3RhY2tGcmFtZVdpdGhJZEgAEjgKEWdy",
            "YXBoX29wX2NyZWF0aW9uGAcgASgLMhsudGVuc29yZmxvdy5HcmFwaE9wQ3Jl",
            "YXRpb25IABIzCg5kZWJ1Z2dlZF9ncmFwaBgIIAEoCzIZLnRlbnNvcmZsb3cu",
            "RGVidWdnZWRHcmFwaEgAEioKCWV4ZWN1dGlvbhgJIAEoCzIVLnRlbnNvcmZs",
            "b3cuRXhlY3V0aW9uSAASQAoVZ3JhcGhfZXhlY3V0aW9uX3RyYWNlGAogASgL",
            "Mh8udGVuc29yZmxvdy5HcmFwaEV4ZWN1dGlvblRyYWNlSAASEgoIZ3JhcGhf",
            "aWQYCyABKAlIAEIGCgR3aGF0IkEKDURlYnVnTWV0YWRhdGESGgoSdGVuc29y",
            "Zmxvd192ZXJzaW9uGAEgASgJEhQKDGZpbGVfdmVyc2lvbhgCIAEoCSJBCgpT",
            "b3VyY2VGaWxlEhEKCWZpbGVfcGF0aBgBIAEoCRIRCglob3N0X25hbWUYAiAB",
            "KAkSDQoFbGluZXMYAyADKAkiXQoQU3RhY2tGcmFtZVdpdGhJZBIKCgJpZBgB",
            "IAEoCRI9Cg1maWxlX2xpbmVfY29sGAIgASgLMiYudGVuc29yZmxvdy5HcmFw",
            "aERlYnVnSW5mby5GaWxlTGluZUNvbCI6CgxDb2RlTG9jYXRpb24SEQoJaG9z",
            "dF9uYW1lGAEgASgJEhcKD3N0YWNrX2ZyYW1lX2lkcxgCIAMoCSLJAQoPR3Jh",
            "cGhPcENyZWF0aW9uEg8KB29wX3R5cGUYASABKAkSDwoHb3BfbmFtZRgCIAEo",
            "CRISCgpncmFwaF9uYW1lGAMgASgJEhAKCGdyYXBoX2lkGAQgASgJEhMKC2Rl",
            "dmljZV9uYW1lGAUgASgJEhMKC2lucHV0X25hbWVzGAYgAygJEhMKC251bV9v",
            "dXRwdXRzGAcgASgFEi8KDWNvZGVfbG9jYXRpb24YCCABKAsyGC50ZW5zb3Jm",
            "bG93LkNvZGVMb2NhdGlvbiKLAQoNRGVidWdnZWRHcmFwaBIQCghncmFwaF9p",
            "ZBgBIAEoCRISCgpncmFwaF9uYW1lGAIgASgJEhgKEGluc3RydW1lbnRlZF9v",
            "cHMYAyADKAkSGgoSb3JpZ2luYWxfZ3JhcGhfZGVmGAQgASgMEh4KFmluc3Ry",
            "dW1lbnRlZF9ncmFwaF9kZWYYBSABKAwikQIKCUV4ZWN1dGlvbhIPCgdvcF90",
            "eXBlGAEgASgJEhMKC251bV9vdXRwdXRzGAIgASgFEhAKCGdyYXBoX2lkGAMg",
            "ASgJEhgKEGlucHV0X3RlbnNvcl9pZHMYBCADKAMSGQoRb3V0cHV0X3RlbnNv",
            "cl9pZHMYBSADKAMSNgoRdGVuc29yX2RlYnVnX21vZGUYBiABKA4yGy50ZW5z",
            "b3JmbG93LlRlbnNvckRlYnVnTW9kZRIuCg10ZW5zb3JfcHJvdG9zGAcgAygL",
            "MhcudGVuc29yZmxvdy5UZW5zb3JQcm90bxIvCg1jb2RlX2xvY2F0aW9uGAgg",
            "ASgLMhgudGVuc29yZmxvdy5Db2RlTG9jYXRpb24i0QEKE0dyYXBoRXhlY3V0",
            "aW9uVHJhY2USGAoQdGZkYmdfY29udGV4dF9pZBgBIAEoCRIPCgdvcF9uYW1l",
            "GAIgASgJEhMKC291dHB1dF9zbG90GAMgASgFEjYKEXRlbnNvcl9kZWJ1Z19t",
            "b2RlGAQgASgOMhsudGVuc29yZmxvdy5UZW5zb3JEZWJ1Z01vZGUSLQoMdGVu",
            "c29yX3Byb3RvGAUgASgLMhcudGVuc29yZmxvdy5UZW5zb3JQcm90bxITCgtk",
            "ZXZpY2VfbmFtZRgGIAEoCSqWAQoPVGVuc29yRGVidWdNb2RlEg8KC1VOU1BF",
            "Q0lGSUVEEAASDQoJTk9fVEVOU09SEAESDwoLQ1VSVF9IRUFMVEgQAhISCg5D",
            "T05DSVNFX0hFQUxUSBADEg8KC0ZVTExfSEVBTFRIEAQSCQoFU0hBUEUQBRIR",
            "Cg1GVUxMX05VTUVSSUNTEAYSDwoLRlVMTF9URU5TT1IQB0IsChNvcmcudGVu",
            "c29yZmxvdy51dGlsQhBEZWJ1Z0V2ZW50UHJvdG9zUAH4AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.TensorReflection.Descriptor, global::Tensorflow.GraphDebugInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tensorflow.TensorDebugMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DebugEvent), global::Tensorflow.DebugEvent.Parser, new[]{ "WallTime", "Step", "DebugMetadata", "SourceFile", "StackFrameWithId", "GraphOpCreation", "DebuggedGraph", "Execution", "GraphExecutionTrace", "GraphId" }, new[]{ "What" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DebugMetadata), global::Tensorflow.DebugMetadata.Parser, new[]{ "TensorflowVersion", "FileVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.SourceFile), global::Tensorflow.SourceFile.Parser, new[]{ "FilePath", "HostName", "Lines" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.StackFrameWithId), global::Tensorflow.StackFrameWithId.Parser, new[]{ "Id", "FileLineCol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CodeLocation), global::Tensorflow.CodeLocation.Parser, new[]{ "HostName", "StackFrameIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.GraphOpCreation), global::Tensorflow.GraphOpCreation.Parser, new[]{ "OpType", "OpName", "GraphName", "GraphId", "DeviceName", "InputNames", "NumOutputs", "CodeLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DebuggedGraph), global::Tensorflow.DebuggedGraph.Parser, new[]{ "GraphId", "GraphName", "InstrumentedOps", "OriginalGraphDef", "InstrumentedGraphDef" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Execution), global::Tensorflow.Execution.Parser, new[]{ "OpType", "NumOutputs", "GraphId", "InputTensorIds", "OutputTensorIds", "TensorDebugMode", "TensorProtos", "CodeLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.GraphExecutionTrace), global::Tensorflow.GraphExecutionTrace.Parser, new[]{ "TfdbgContextId", "OpName", "OutputSlot", "TensorDebugMode", "TensorProto", "DeviceName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Available modes for extracting debugging information from a Tensor.
  /// TODO(cais): Document the detailed column names and semantics in a separate
  /// markdown file once the implementation settles.
  /// </summary>
  public enum TensorDebugMode {
    [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Only records what tensors are computed, eagerly or in graphs.
    /// No information regarding the value of the tensor is available.
    /// </summary>
    [pbr::OriginalName("NO_TENSOR")] NoTensor = 1,
    /// <summary>
    /// A minimalist health summary for float-type tensors.
    /// Contains information only about the presence/absence of pathological
    /// values including Infinity and NaN.
    /// Applicable only to float dtypes.
    /// </summary>
    [pbr::OriginalName("CURT_HEALTH")] CurtHealth = 2,
    /// <summary>
    /// A concise health summary for float-type tensors.
    /// Contains more information that CURT_HEALTH.
    /// Infinity and NaN are treated differently.
    /// Applicable only to float and integer dtypes.
    /// </summary>
    [pbr::OriginalName("CONCISE_HEALTH")] ConciseHealth = 3,
    /// <summary>
    /// A detailed health summary.
    /// Contains further detailed information than `CONCISE_HEALTH`.
    /// Information about device, dtype and shape are included.
    /// Counts for various types of values (Infinity, NaN, negative, zero,
    /// positive) are included.
    /// Applicable to float, integer and boolean dtypes.
    /// </summary>
    [pbr::OriginalName("FULL_HEALTH")] FullHealth = 4,
    /// <summary>
    /// Provides full runtime shape information, up to a maximum rank, beyond
    /// which the dimension sizes are truncated.
    /// </summary>
    [pbr::OriginalName("SHAPE")] Shape = 5,
    /// <summary>
    /// Full numeric summary.
    /// Including device, dtype, shape, counts of various types of values
    /// (Infinity, NaN, negative, zero, positive), and summary statistics
    /// (minimum, maximum, mean and variance).
    /// Applicable to float, integer and boolean dtypes.
    /// </summary>
    [pbr::OriginalName("FULL_NUMERICS")] FullNumerics = 6,
    /// <summary>
    /// Full tensor value.
    /// </summary>
    [pbr::OriginalName("FULL_TENSOR")] FullTensor = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  /// An Event related to the debugging of a TensorFlow program.
  /// </summary>
  public sealed partial class DebugEvent : pb::IMessage<DebugEvent> {
    private static readonly pb::MessageParser<DebugEvent> _parser = new pb::MessageParser<DebugEvent>(() => new DebugEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugEvent(DebugEvent other) : this() {
      wallTime_ = other.wallTime_;
      step_ = other.step_;
      switch (other.WhatCase) {
        case WhatOneofCase.DebugMetadata:
          DebugMetadata = other.DebugMetadata.Clone();
          break;
        case WhatOneofCase.SourceFile:
          SourceFile = other.SourceFile.Clone();
          break;
        case WhatOneofCase.StackFrameWithId:
          StackFrameWithId = other.StackFrameWithId.Clone();
          break;
        case WhatOneofCase.GraphOpCreation:
          GraphOpCreation = other.GraphOpCreation.Clone();
          break;
        case WhatOneofCase.DebuggedGraph:
          DebuggedGraph = other.DebuggedGraph.Clone();
          break;
        case WhatOneofCase.Execution:
          Execution = other.Execution.Clone();
          break;
        case WhatOneofCase.GraphExecutionTrace:
          GraphExecutionTrace = other.GraphExecutionTrace.Clone();
          break;
        case WhatOneofCase.GraphId:
          GraphId = other.GraphId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugEvent Clone() {
      return new DebugEvent(this);
    }

    /// <summary>Field number for the "wall_time" field.</summary>
    public const int WallTimeFieldNumber = 1;
    private double wallTime_;
    /// <summary>
    /// Timestamp in seconds (with microsecond precision).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WallTime {
      get { return wallTime_; }
      set {
        wallTime_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 2;
    private long step_;
    /// <summary>
    /// Step of training (if available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "debug_metadata" field.</summary>
    public const int DebugMetadataFieldNumber = 3;
    /// <summary>
    /// Metadata related to this debugging data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DebugMetadata DebugMetadata {
      get { return whatCase_ == WhatOneofCase.DebugMetadata ? (global::Tensorflow.DebugMetadata) what_ : null; }
      set {
        what_ = value;
        whatCase_ = value == null ? WhatOneofCase.None : WhatOneofCase.DebugMetadata;
      }
    }

    /// <summary>Field number for the "source_file" field.</summary>
    public const int SourceFileFieldNumber = 4;
    /// <summary>
    /// The content of a source file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.SourceFile SourceFile {
      get { return whatCase_ == WhatOneofCase.SourceFile ? (global::Tensorflow.SourceFile) what_ : null; }
      set {
        what_ = value;
        whatCase_ = value == null ? WhatOneofCase.None : WhatOneofCase.SourceFile;
      }
    }

    /// <summary>Field number for the "stack_frame_with_id" field.</summary>
    public const int StackFrameWithIdFieldNumber = 6;
    /// <summary>
    /// A stack frame (filename, line number and column number, function name and
    /// code string) with ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.StackFrameWithId StackFrameWithId {
      get { return whatCase_ == WhatOneofCase.StackFrameWithId ? (global::Tensorflow.StackFrameWithId) what_ : null; }
      set {
        what_ = value;
        whatCase_ = value == null ? WhatOneofCase.None : WhatOneofCase.StackFrameWithId;
      }
    }

    /// <summary>Field number for the "graph_op_creation" field.</summary>
    public const int GraphOpCreationFieldNumber = 7;
    /// <summary>
    /// The creation of an op within a graph (e.g., a FuncGraph compiled from
    /// a Python function).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphOpCreation GraphOpCreation {
      get { return whatCase_ == WhatOneofCase.GraphOpCreation ? (global::Tensorflow.GraphOpCreation) what_ : null; }
      set {
        what_ = value;
        whatCase_ = value == null ? WhatOneofCase.None : WhatOneofCase.GraphOpCreation;
      }
    }

    /// <summary>Field number for the "debugged_graph" field.</summary>
    public const int DebuggedGraphFieldNumber = 8;
    /// <summary>
    /// Information about a debugged graph, including its graph def and
    /// list of the graph's ops that are instrumented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DebuggedGraph DebuggedGraph {
      get { return whatCase_ == WhatOneofCase.DebuggedGraph ? (global::Tensorflow.DebuggedGraph) what_ : null; }
      set {
        what_ = value;
        whatCase_ = value == null ? WhatOneofCase.None : WhatOneofCase.DebuggedGraph;
      }
    }

    /// <summary>Field number for the "execution" field.</summary>
    public const int ExecutionFieldNumber = 9;
    /// <summary>
    /// Execution of an op or a Graph (e.g., a tf.function).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Execution Execution {
      get { return whatCase_ == WhatOneofCase.Execution ? (global::Tensorflow.Execution) what_ : null; }
      set {
        what_ = value;
        whatCase_ = value == null ? WhatOneofCase.None : WhatOneofCase.Execution;
      }
    }

    /// <summary>Field number for the "graph_execution_trace" field.</summary>
    public const int GraphExecutionTraceFieldNumber = 10;
    /// <summary>
    /// A graph execution trace: Contains information about the intermediate
    /// tensors computed during the graph execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphExecutionTrace GraphExecutionTrace {
      get { return whatCase_ == WhatOneofCase.GraphExecutionTrace ? (global::Tensorflow.GraphExecutionTrace) what_ : null; }
      set {
        what_ = value;
        whatCase_ = value == null ? WhatOneofCase.None : WhatOneofCase.GraphExecutionTrace;
      }
    }

    /// <summary>Field number for the "graph_id" field.</summary>
    public const int GraphIdFieldNumber = 11;
    /// <summary>
    /// The ID of the graph (i.e., FuncGraph) executed here: applicable only
    /// to the execution of a FuncGraph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphId {
      get { return whatCase_ == WhatOneofCase.GraphId ? (string) what_ : ""; }
      set {
        what_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        whatCase_ = WhatOneofCase.GraphId;
      }
    }

    private object what_;
    /// <summary>Enum of possible cases for the "what" oneof.</summary>
    public enum WhatOneofCase {
      None = 0,
      DebugMetadata = 3,
      SourceFile = 4,
      StackFrameWithId = 6,
      GraphOpCreation = 7,
      DebuggedGraph = 8,
      Execution = 9,
      GraphExecutionTrace = 10,
      GraphId = 11,
    }
    private WhatOneofCase whatCase_ = WhatOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhatOneofCase WhatCase {
      get { return whatCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWhat() {
      whatCase_ = WhatOneofCase.None;
      what_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WallTime, other.WallTime)) return false;
      if (Step != other.Step) return false;
      if (!object.Equals(DebugMetadata, other.DebugMetadata)) return false;
      if (!object.Equals(SourceFile, other.SourceFile)) return false;
      if (!object.Equals(StackFrameWithId, other.StackFrameWithId)) return false;
      if (!object.Equals(GraphOpCreation, other.GraphOpCreation)) return false;
      if (!object.Equals(DebuggedGraph, other.DebuggedGraph)) return false;
      if (!object.Equals(Execution, other.Execution)) return false;
      if (!object.Equals(GraphExecutionTrace, other.GraphExecutionTrace)) return false;
      if (GraphId != other.GraphId) return false;
      if (WhatCase != other.WhatCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WallTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WallTime);
      if (Step != 0L) hash ^= Step.GetHashCode();
      if (whatCase_ == WhatOneofCase.DebugMetadata) hash ^= DebugMetadata.GetHashCode();
      if (whatCase_ == WhatOneofCase.SourceFile) hash ^= SourceFile.GetHashCode();
      if (whatCase_ == WhatOneofCase.StackFrameWithId) hash ^= StackFrameWithId.GetHashCode();
      if (whatCase_ == WhatOneofCase.GraphOpCreation) hash ^= GraphOpCreation.GetHashCode();
      if (whatCase_ == WhatOneofCase.DebuggedGraph) hash ^= DebuggedGraph.GetHashCode();
      if (whatCase_ == WhatOneofCase.Execution) hash ^= Execution.GetHashCode();
      if (whatCase_ == WhatOneofCase.GraphExecutionTrace) hash ^= GraphExecutionTrace.GetHashCode();
      if (whatCase_ == WhatOneofCase.GraphId) hash ^= GraphId.GetHashCode();
      hash ^= (int) whatCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WallTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(WallTime);
      }
      if (Step != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Step);
      }
      if (whatCase_ == WhatOneofCase.DebugMetadata) {
        output.WriteRawTag(26);
        output.WriteMessage(DebugMetadata);
      }
      if (whatCase_ == WhatOneofCase.SourceFile) {
        output.WriteRawTag(34);
        output.WriteMessage(SourceFile);
      }
      if (whatCase_ == WhatOneofCase.StackFrameWithId) {
        output.WriteRawTag(50);
        output.WriteMessage(StackFrameWithId);
      }
      if (whatCase_ == WhatOneofCase.GraphOpCreation) {
        output.WriteRawTag(58);
        output.WriteMessage(GraphOpCreation);
      }
      if (whatCase_ == WhatOneofCase.DebuggedGraph) {
        output.WriteRawTag(66);
        output.WriteMessage(DebuggedGraph);
      }
      if (whatCase_ == WhatOneofCase.Execution) {
        output.WriteRawTag(74);
        output.WriteMessage(Execution);
      }
      if (whatCase_ == WhatOneofCase.GraphExecutionTrace) {
        output.WriteRawTag(82);
        output.WriteMessage(GraphExecutionTrace);
      }
      if (whatCase_ == WhatOneofCase.GraphId) {
        output.WriteRawTag(90);
        output.WriteString(GraphId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WallTime != 0D) {
        size += 1 + 8;
      }
      if (Step != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Step);
      }
      if (whatCase_ == WhatOneofCase.DebugMetadata) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugMetadata);
      }
      if (whatCase_ == WhatOneofCase.SourceFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceFile);
      }
      if (whatCase_ == WhatOneofCase.StackFrameWithId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StackFrameWithId);
      }
      if (whatCase_ == WhatOneofCase.GraphOpCreation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphOpCreation);
      }
      if (whatCase_ == WhatOneofCase.DebuggedGraph) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebuggedGraph);
      }
      if (whatCase_ == WhatOneofCase.Execution) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Execution);
      }
      if (whatCase_ == WhatOneofCase.GraphExecutionTrace) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphExecutionTrace);
      }
      if (whatCase_ == WhatOneofCase.GraphId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugEvent other) {
      if (other == null) {
        return;
      }
      if (other.WallTime != 0D) {
        WallTime = other.WallTime;
      }
      if (other.Step != 0L) {
        Step = other.Step;
      }
      switch (other.WhatCase) {
        case WhatOneofCase.DebugMetadata:
          if (DebugMetadata == null) {
            DebugMetadata = new global::Tensorflow.DebugMetadata();
          }
          DebugMetadata.MergeFrom(other.DebugMetadata);
          break;
        case WhatOneofCase.SourceFile:
          if (SourceFile == null) {
            SourceFile = new global::Tensorflow.SourceFile();
          }
          SourceFile.MergeFrom(other.SourceFile);
          break;
        case WhatOneofCase.StackFrameWithId:
          if (StackFrameWithId == null) {
            StackFrameWithId = new global::Tensorflow.StackFrameWithId();
          }
          StackFrameWithId.MergeFrom(other.StackFrameWithId);
          break;
        case WhatOneofCase.GraphOpCreation:
          if (GraphOpCreation == null) {
            GraphOpCreation = new global::Tensorflow.GraphOpCreation();
          }
          GraphOpCreation.MergeFrom(other.GraphOpCreation);
          break;
        case WhatOneofCase.DebuggedGraph:
          if (DebuggedGraph == null) {
            DebuggedGraph = new global::Tensorflow.DebuggedGraph();
          }
          DebuggedGraph.MergeFrom(other.DebuggedGraph);
          break;
        case WhatOneofCase.Execution:
          if (Execution == null) {
            Execution = new global::Tensorflow.Execution();
          }
          Execution.MergeFrom(other.Execution);
          break;
        case WhatOneofCase.GraphExecutionTrace:
          if (GraphExecutionTrace == null) {
            GraphExecutionTrace = new global::Tensorflow.GraphExecutionTrace();
          }
          GraphExecutionTrace.MergeFrom(other.GraphExecutionTrace);
          break;
        case WhatOneofCase.GraphId:
          GraphId = other.GraphId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            WallTime = input.ReadDouble();
            break;
          }
          case 16: {
            Step = input.ReadInt64();
            break;
          }
          case 26: {
            global::Tensorflow.DebugMetadata subBuilder = new global::Tensorflow.DebugMetadata();
            if (whatCase_ == WhatOneofCase.DebugMetadata) {
              subBuilder.MergeFrom(DebugMetadata);
            }
            input.ReadMessage(subBuilder);
            DebugMetadata = subBuilder;
            break;
          }
          case 34: {
            global::Tensorflow.SourceFile subBuilder = new global::Tensorflow.SourceFile();
            if (whatCase_ == WhatOneofCase.SourceFile) {
              subBuilder.MergeFrom(SourceFile);
            }
            input.ReadMessage(subBuilder);
            SourceFile = subBuilder;
            break;
          }
          case 50: {
            global::Tensorflow.StackFrameWithId subBuilder = new global::Tensorflow.StackFrameWithId();
            if (whatCase_ == WhatOneofCase.StackFrameWithId) {
              subBuilder.MergeFrom(StackFrameWithId);
            }
            input.ReadMessage(subBuilder);
            StackFrameWithId = subBuilder;
            break;
          }
          case 58: {
            global::Tensorflow.GraphOpCreation subBuilder = new global::Tensorflow.GraphOpCreation();
            if (whatCase_ == WhatOneofCase.GraphOpCreation) {
              subBuilder.MergeFrom(GraphOpCreation);
            }
            input.ReadMessage(subBuilder);
            GraphOpCreation = subBuilder;
            break;
          }
          case 66: {
            global::Tensorflow.DebuggedGraph subBuilder = new global::Tensorflow.DebuggedGraph();
            if (whatCase_ == WhatOneofCase.DebuggedGraph) {
              subBuilder.MergeFrom(DebuggedGraph);
            }
            input.ReadMessage(subBuilder);
            DebuggedGraph = subBuilder;
            break;
          }
          case 74: {
            global::Tensorflow.Execution subBuilder = new global::Tensorflow.Execution();
            if (whatCase_ == WhatOneofCase.Execution) {
              subBuilder.MergeFrom(Execution);
            }
            input.ReadMessage(subBuilder);
            Execution = subBuilder;
            break;
          }
          case 82: {
            global::Tensorflow.GraphExecutionTrace subBuilder = new global::Tensorflow.GraphExecutionTrace();
            if (whatCase_ == WhatOneofCase.GraphExecutionTrace) {
              subBuilder.MergeFrom(GraphExecutionTrace);
            }
            input.ReadMessage(subBuilder);
            GraphExecutionTrace = subBuilder;
            break;
          }
          case 90: {
            GraphId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata about the debugger and the debugged TensorFlow program.
  /// </summary>
  public sealed partial class DebugMetadata : pb::IMessage<DebugMetadata> {
    private static readonly pb::MessageParser<DebugMetadata> _parser = new pb::MessageParser<DebugMetadata>(() => new DebugMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugMetadata(DebugMetadata other) : this() {
      tensorflowVersion_ = other.tensorflowVersion_;
      fileVersion_ = other.fileVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugMetadata Clone() {
      return new DebugMetadata(this);
    }

    /// <summary>Field number for the "tensorflow_version" field.</summary>
    public const int TensorflowVersionFieldNumber = 1;
    private string tensorflowVersion_ = "";
    /// <summary>
    /// Version of TensorFlow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TensorflowVersion {
      get { return tensorflowVersion_; }
      set {
        tensorflowVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_version" field.</summary>
    public const int FileVersionFieldNumber = 2;
    private string fileVersion_ = "";
    /// <summary>
    /// Version of the DebugEvent file format.
    /// Has a format of "debug.Event:&lt;number>", e.g., "debug.Event:1".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileVersion {
      get { return fileVersion_; }
      set {
        fileVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TensorflowVersion != other.TensorflowVersion) return false;
      if (FileVersion != other.FileVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TensorflowVersion.Length != 0) hash ^= TensorflowVersion.GetHashCode();
      if (FileVersion.Length != 0) hash ^= FileVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TensorflowVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TensorflowVersion);
      }
      if (FileVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TensorflowVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TensorflowVersion);
      }
      if (FileVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugMetadata other) {
      if (other == null) {
        return;
      }
      if (other.TensorflowVersion.Length != 0) {
        TensorflowVersion = other.TensorflowVersion;
      }
      if (other.FileVersion.Length != 0) {
        FileVersion = other.FileVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TensorflowVersion = input.ReadString();
            break;
          }
          case 18: {
            FileVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Content of a source file involved in the execution of the debugged TensorFlow
  /// program.
  /// </summary>
  public sealed partial class SourceFile : pb::IMessage<SourceFile> {
    private static readonly pb::MessageParser<SourceFile> _parser = new pb::MessageParser<SourceFile>(() => new SourceFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceFile(SourceFile other) : this() {
      filePath_ = other.filePath_;
      hostName_ = other.hostName_;
      lines_ = other.lines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceFile Clone() {
      return new SourceFile(this);
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 1;
    private string filePath_ = "";
    /// <summary>
    /// Path to the file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 2;
    private string hostName_ = "";
    /// <summary>
    /// Name of the host on which the file is located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_lines_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> lines_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Line-by-line content of the file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Lines {
      get { return lines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilePath != other.FilePath) return false;
      if (HostName != other.HostName) return false;
      if(!lines_.Equals(other.lines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      hash ^= lines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FilePath);
      }
      if (HostName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostName);
      }
      lines_.WriteTo(output, _repeated_lines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      size += lines_.CalculateSize(_repeated_lines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceFile other) {
      if (other == null) {
        return;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      lines_.Add(other.lines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FilePath = input.ReadString();
            break;
          }
          case 18: {
            HostName = input.ReadString();
            break;
          }
          case 26: {
            lines_.AddEntriesFrom(input, _repeated_lines_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A stack frame with ID.
  /// </summary>
  public sealed partial class StackFrameWithId : pb::IMessage<StackFrameWithId> {
    private static readonly pb::MessageParser<StackFrameWithId> _parser = new pb::MessageParser<StackFrameWithId>(() => new StackFrameWithId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StackFrameWithId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrameWithId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrameWithId(StackFrameWithId other) : this() {
      id_ = other.id_;
      fileLineCol_ = other.fileLineCol_ != null ? other.fileLineCol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackFrameWithId Clone() {
      return new StackFrameWithId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A unique ID for the stack frame: A UUID-like string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_line_col" field.</summary>
    public const int FileLineColFieldNumber = 2;
    private global::Tensorflow.GraphDebugInfo.Types.FileLineCol fileLineCol_;
    /// <summary>
    /// Stack frame, i.e., a frame of a stack trace, containing information
    /// regarding the file name, line number, function name, code content
    /// of the line, and column number (if available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphDebugInfo.Types.FileLineCol FileLineCol {
      get { return fileLineCol_; }
      set {
        fileLineCol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StackFrameWithId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StackFrameWithId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(FileLineCol, other.FileLineCol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (fileLineCol_ != null) hash ^= FileLineCol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (fileLineCol_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FileLineCol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (fileLineCol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileLineCol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StackFrameWithId other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.fileLineCol_ != null) {
        if (fileLineCol_ == null) {
          FileLineCol = new global::Tensorflow.GraphDebugInfo.Types.FileLineCol();
        }
        FileLineCol.MergeFrom(other.FileLineCol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (fileLineCol_ == null) {
              FileLineCol = new global::Tensorflow.GraphDebugInfo.Types.FileLineCol();
            }
            input.ReadMessage(FileLineCol);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Code location information: A stack trace with host-name information.
  /// Instead of encoding the detailed stack trace, this proto refers to IDs of
  /// stack frames stored as `StackFrameWithId` protos.
  /// </summary>
  public sealed partial class CodeLocation : pb::IMessage<CodeLocation> {
    private static readonly pb::MessageParser<CodeLocation> _parser = new pb::MessageParser<CodeLocation>(() => new CodeLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CodeLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeLocation(CodeLocation other) : this() {
      hostName_ = other.hostName_;
      stackFrameIds_ = other.stackFrameIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CodeLocation Clone() {
      return new CodeLocation(this);
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 1;
    private string hostName_ = "";
    /// <summary>
    /// Host name on which the source files are located.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stack_frame_ids" field.</summary>
    public const int StackFrameIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_stackFrameIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> stackFrameIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// ID to a stack frame, each of which is pointed to
    /// by a unique ID. The ordering of the frames is consistent with Python's
    /// `traceback.extract_tb()`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StackFrameIds {
      get { return stackFrameIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CodeLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CodeLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostName != other.HostName) return false;
      if(!stackFrameIds_.Equals(other.stackFrameIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      hash ^= stackFrameIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostName);
      }
      stackFrameIds_.WriteTo(output, _repeated_stackFrameIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      size += stackFrameIds_.CalculateSize(_repeated_stackFrameIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CodeLocation other) {
      if (other == null) {
        return;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      stackFrameIds_.Add(other.stackFrameIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HostName = input.ReadString();
            break;
          }
          case 18: {
            stackFrameIds_.AddEntriesFrom(input, _repeated_stackFrameIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The creation of an op in a TensorFlow Graph (e.g., FuncGraph in TF2).
  /// </summary>
  public sealed partial class GraphOpCreation : pb::IMessage<GraphOpCreation> {
    private static readonly pb::MessageParser<GraphOpCreation> _parser = new pb::MessageParser<GraphOpCreation>(() => new GraphOpCreation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphOpCreation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphOpCreation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphOpCreation(GraphOpCreation other) : this() {
      opType_ = other.opType_;
      opName_ = other.opName_;
      graphName_ = other.graphName_;
      graphId_ = other.graphId_;
      deviceName_ = other.deviceName_;
      inputNames_ = other.inputNames_.Clone();
      numOutputs_ = other.numOutputs_;
      codeLocation_ = other.codeLocation_ != null ? other.codeLocation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphOpCreation Clone() {
      return new GraphOpCreation(this);
    }

    /// <summary>Field number for the "op_type" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private string opType_ = "";
    /// <summary>
    /// Type of the op (e.g., "MatMul").
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpType {
      get { return opType_; }
      set {
        opType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op_name" field.</summary>
    public const int OpNameFieldNumber = 2;
    private string opName_ = "";
    /// <summary>
    /// Name of the op (e.g., "Dense/MatMul_1").
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpName {
      get { return opName_; }
      set {
        opName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph_name" field.</summary>
    public const int GraphNameFieldNumber = 3;
    private string graphName_ = "";
    /// <summary>
    /// Name of the graph that the op is a part of (if available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphName {
      get { return graphName_; }
      set {
        graphName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph_id" field.</summary>
    public const int GraphIdFieldNumber = 4;
    private string graphId_ = "";
    /// <summary>
    /// Unique ID of the graph (generated by debugger).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphId {
      get { return graphId_; }
      set {
        graphId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 5;
    private string deviceName_ = "";
    /// <summary>
    /// Name of the device that the op is assigned to (if available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_names" field.</summary>
    public const int InputNamesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_inputNames_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> inputNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Names of the input tensors to the op.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InputNames {
      get { return inputNames_; }
    }

    /// <summary>Field number for the "num_outputs" field.</summary>
    public const int NumOutputsFieldNumber = 7;
    private int numOutputs_;
    /// <summary>
    /// Number of output tensors emitted by the op.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumOutputs {
      get { return numOutputs_; }
      set {
        numOutputs_ = value;
      }
    }

    /// <summary>Field number for the "code_location" field.</summary>
    public const int CodeLocationFieldNumber = 8;
    private global::Tensorflow.CodeLocation codeLocation_;
    /// <summary>
    /// The unique ID for code location (stack trace) of the op's creation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CodeLocation CodeLocation {
      get { return codeLocation_; }
      set {
        codeLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphOpCreation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphOpCreation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpType != other.OpType) return false;
      if (OpName != other.OpName) return false;
      if (GraphName != other.GraphName) return false;
      if (GraphId != other.GraphId) return false;
      if (DeviceName != other.DeviceName) return false;
      if(!inputNames_.Equals(other.inputNames_)) return false;
      if (NumOutputs != other.NumOutputs) return false;
      if (!object.Equals(CodeLocation, other.CodeLocation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpType.Length != 0) hash ^= OpType.GetHashCode();
      if (OpName.Length != 0) hash ^= OpName.GetHashCode();
      if (GraphName.Length != 0) hash ^= GraphName.GetHashCode();
      if (GraphId.Length != 0) hash ^= GraphId.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      hash ^= inputNames_.GetHashCode();
      if (NumOutputs != 0) hash ^= NumOutputs.GetHashCode();
      if (codeLocation_ != null) hash ^= CodeLocation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OpType);
      }
      if (OpName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OpName);
      }
      if (GraphName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GraphName);
      }
      if (GraphId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GraphId);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeviceName);
      }
      inputNames_.WriteTo(output, _repeated_inputNames_codec);
      if (NumOutputs != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NumOutputs);
      }
      if (codeLocation_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CodeLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpType);
      }
      if (OpName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpName);
      }
      if (GraphName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphName);
      }
      if (GraphId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphId);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      size += inputNames_.CalculateSize(_repeated_inputNames_codec);
      if (NumOutputs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumOutputs);
      }
      if (codeLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodeLocation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphOpCreation other) {
      if (other == null) {
        return;
      }
      if (other.OpType.Length != 0) {
        OpType = other.OpType;
      }
      if (other.OpName.Length != 0) {
        OpName = other.OpName;
      }
      if (other.GraphName.Length != 0) {
        GraphName = other.GraphName;
      }
      if (other.GraphId.Length != 0) {
        GraphId = other.GraphId;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      inputNames_.Add(other.inputNames_);
      if (other.NumOutputs != 0) {
        NumOutputs = other.NumOutputs;
      }
      if (other.codeLocation_ != null) {
        if (codeLocation_ == null) {
          CodeLocation = new global::Tensorflow.CodeLocation();
        }
        CodeLocation.MergeFrom(other.CodeLocation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OpType = input.ReadString();
            break;
          }
          case 18: {
            OpName = input.ReadString();
            break;
          }
          case 26: {
            GraphName = input.ReadString();
            break;
          }
          case 34: {
            GraphId = input.ReadString();
            break;
          }
          case 42: {
            DeviceName = input.ReadString();
            break;
          }
          case 50: {
            inputNames_.AddEntriesFrom(input, _repeated_inputNames_codec);
            break;
          }
          case 56: {
            NumOutputs = input.ReadInt32();
            break;
          }
          case 66: {
            if (codeLocation_ == null) {
              CodeLocation = new global::Tensorflow.CodeLocation();
            }
            input.ReadMessage(CodeLocation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A debugger-instrumented graph.
  /// </summary>
  public sealed partial class DebuggedGraph : pb::IMessage<DebuggedGraph> {
    private static readonly pb::MessageParser<DebuggedGraph> _parser = new pb::MessageParser<DebuggedGraph>(() => new DebuggedGraph());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebuggedGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebuggedGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebuggedGraph(DebuggedGraph other) : this() {
      graphId_ = other.graphId_;
      graphName_ = other.graphName_;
      instrumentedOps_ = other.instrumentedOps_.Clone();
      originalGraphDef_ = other.originalGraphDef_;
      instrumentedGraphDef_ = other.instrumentedGraphDef_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebuggedGraph Clone() {
      return new DebuggedGraph(this);
    }

    /// <summary>Field number for the "graph_id" field.</summary>
    public const int GraphIdFieldNumber = 1;
    private string graphId_ = "";
    /// <summary>
    /// An ID for the graph.
    /// This can be used up to look up graph names. Generated by the debugger.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphId {
      get { return graphId_; }
      set {
        graphId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph_name" field.</summary>
    public const int GraphNameFieldNumber = 2;
    private string graphName_ = "";
    /// <summary>
    /// Name of the graph (if available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphName {
      get { return graphName_; }
      set {
        graphName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrumented_ops" field.</summary>
    public const int InstrumentedOpsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_instrumentedOps_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> instrumentedOps_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Names of the instrumented ops. This can be used to look up op name
    /// based on the numeric-summary tensors (2nd column).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InstrumentedOps {
      get { return instrumentedOps_; }
    }

    /// <summary>Field number for the "original_graph_def" field.</summary>
    public const int OriginalGraphDefFieldNumber = 4;
    private pb::ByteString originalGraphDef_ = pb::ByteString.Empty;
    /// <summary>
    /// Original (uninstrumented) GraphDef (if available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginalGraphDef {
      get { return originalGraphDef_; }
      set {
        originalGraphDef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrumented_graph_def" field.</summary>
    public const int InstrumentedGraphDefFieldNumber = 5;
    private pb::ByteString instrumentedGraphDef_ = pb::ByteString.Empty;
    /// <summary>
    /// An encoded version of a GraphDef.
    /// This graph may include the debugger-inserted ops.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InstrumentedGraphDef {
      get { return instrumentedGraphDef_; }
      set {
        instrumentedGraphDef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebuggedGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebuggedGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GraphId != other.GraphId) return false;
      if (GraphName != other.GraphName) return false;
      if(!instrumentedOps_.Equals(other.instrumentedOps_)) return false;
      if (OriginalGraphDef != other.OriginalGraphDef) return false;
      if (InstrumentedGraphDef != other.InstrumentedGraphDef) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GraphId.Length != 0) hash ^= GraphId.GetHashCode();
      if (GraphName.Length != 0) hash ^= GraphName.GetHashCode();
      hash ^= instrumentedOps_.GetHashCode();
      if (OriginalGraphDef.Length != 0) hash ^= OriginalGraphDef.GetHashCode();
      if (InstrumentedGraphDef.Length != 0) hash ^= InstrumentedGraphDef.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GraphId);
      }
      if (GraphName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GraphName);
      }
      instrumentedOps_.WriteTo(output, _repeated_instrumentedOps_codec);
      if (OriginalGraphDef.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(OriginalGraphDef);
      }
      if (InstrumentedGraphDef.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(InstrumentedGraphDef);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GraphId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphId);
      }
      if (GraphName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphName);
      }
      size += instrumentedOps_.CalculateSize(_repeated_instrumentedOps_codec);
      if (OriginalGraphDef.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginalGraphDef);
      }
      if (InstrumentedGraphDef.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InstrumentedGraphDef);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebuggedGraph other) {
      if (other == null) {
        return;
      }
      if (other.GraphId.Length != 0) {
        GraphId = other.GraphId;
      }
      if (other.GraphName.Length != 0) {
        GraphName = other.GraphName;
      }
      instrumentedOps_.Add(other.instrumentedOps_);
      if (other.OriginalGraphDef.Length != 0) {
        OriginalGraphDef = other.OriginalGraphDef;
      }
      if (other.InstrumentedGraphDef.Length != 0) {
        InstrumentedGraphDef = other.InstrumentedGraphDef;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GraphId = input.ReadString();
            break;
          }
          case 18: {
            GraphName = input.ReadString();
            break;
          }
          case 26: {
            instrumentedOps_.AddEntriesFrom(input, _repeated_instrumentedOps_codec);
            break;
          }
          case 34: {
            OriginalGraphDef = input.ReadBytes();
            break;
          }
          case 42: {
            InstrumentedGraphDef = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data relating to the eager execution of an op or a Graph.
  /// For a op that generates N output tensors (N >= 0), only one
  /// Execution proto will be used to describe the execution event.
  /// </summary>
  public sealed partial class Execution : pb::IMessage<Execution> {
    private static readonly pb::MessageParser<Execution> _parser = new pb::MessageParser<Execution>(() => new Execution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Execution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Execution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Execution(Execution other) : this() {
      opType_ = other.opType_;
      numOutputs_ = other.numOutputs_;
      graphId_ = other.graphId_;
      inputTensorIds_ = other.inputTensorIds_.Clone();
      outputTensorIds_ = other.outputTensorIds_.Clone();
      tensorDebugMode_ = other.tensorDebugMode_;
      tensorProtos_ = other.tensorProtos_.Clone();
      codeLocation_ = other.codeLocation_ != null ? other.codeLocation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Execution Clone() {
      return new Execution(this);
    }

    /// <summary>Field number for the "op_type" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private string opType_ = "";
    /// <summary>
    /// Op type (e.g., "MatMul").
    /// In the case of a Graph, this is the name of the Graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpType {
      get { return opType_; }
      set {
        opType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_outputs" field.</summary>
    public const int NumOutputsFieldNumber = 2;
    private int numOutputs_;
    /// <summary>
    /// Number of output tensors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumOutputs {
      get { return numOutputs_; }
      set {
        numOutputs_ = value;
      }
    }

    /// <summary>Field number for the "graph_id" field.</summary>
    public const int GraphIdFieldNumber = 3;
    private string graphId_ = "";
    /// <summary>
    /// The graph that's executed: applicable only to the eager
    /// execution of a FuncGraph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphId {
      get { return graphId_; }
      set {
        graphId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_tensor_ids" field.</summary>
    public const int InputTensorIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_inputTensorIds_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> inputTensorIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// IDs of the input tensors (if available).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> InputTensorIds {
      get { return inputTensorIds_; }
    }

    /// <summary>Field number for the "output_tensor_ids" field.</summary>
    public const int OutputTensorIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_outputTensorIds_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> outputTensorIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// IDs of the output tensors (if availbable).
    /// If specified, must have the same length as tensor_protos.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> OutputTensorIds {
      get { return outputTensorIds_; }
    }

    /// <summary>Field number for the "tensor_debug_mode" field.</summary>
    public const int TensorDebugModeFieldNumber = 6;
    private global::Tensorflow.TensorDebugMode tensorDebugMode_ = 0;
    /// <summary>
    /// Type of the tensor value encapsulated in this proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorDebugMode TensorDebugMode {
      get { return tensorDebugMode_; }
      set {
        tensorDebugMode_ = value;
      }
    }

    /// <summary>Field number for the "tensor_protos" field.</summary>
    public const int TensorProtosFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Tensorflow.TensorProto> _repeated_tensorProtos_codec
        = pb::FieldCodec.ForMessage(58, global::Tensorflow.TensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.TensorProto> tensorProtos_ = new pbc::RepeatedField<global::Tensorflow.TensorProto>();
    /// <summary>
    /// Output Tensor values in the type described by `tensor_value_type`.
    /// The length of this should match `num_outputs`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.TensorProto> TensorProtos {
      get { return tensorProtos_; }
    }

    /// <summary>Field number for the "code_location" field.</summary>
    public const int CodeLocationFieldNumber = 8;
    private global::Tensorflow.CodeLocation codeLocation_;
    /// <summary>
    /// Stack trace of the eager execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CodeLocation CodeLocation {
      get { return codeLocation_; }
      set {
        codeLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Execution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Execution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpType != other.OpType) return false;
      if (NumOutputs != other.NumOutputs) return false;
      if (GraphId != other.GraphId) return false;
      if(!inputTensorIds_.Equals(other.inputTensorIds_)) return false;
      if(!outputTensorIds_.Equals(other.outputTensorIds_)) return false;
      if (TensorDebugMode != other.TensorDebugMode) return false;
      if(!tensorProtos_.Equals(other.tensorProtos_)) return false;
      if (!object.Equals(CodeLocation, other.CodeLocation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpType.Length != 0) hash ^= OpType.GetHashCode();
      if (NumOutputs != 0) hash ^= NumOutputs.GetHashCode();
      if (GraphId.Length != 0) hash ^= GraphId.GetHashCode();
      hash ^= inputTensorIds_.GetHashCode();
      hash ^= outputTensorIds_.GetHashCode();
      if (TensorDebugMode != 0) hash ^= TensorDebugMode.GetHashCode();
      hash ^= tensorProtos_.GetHashCode();
      if (codeLocation_ != null) hash ^= CodeLocation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OpType);
      }
      if (NumOutputs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumOutputs);
      }
      if (GraphId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GraphId);
      }
      inputTensorIds_.WriteTo(output, _repeated_inputTensorIds_codec);
      outputTensorIds_.WriteTo(output, _repeated_outputTensorIds_codec);
      if (TensorDebugMode != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) TensorDebugMode);
      }
      tensorProtos_.WriteTo(output, _repeated_tensorProtos_codec);
      if (codeLocation_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CodeLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpType);
      }
      if (NumOutputs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumOutputs);
      }
      if (GraphId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphId);
      }
      size += inputTensorIds_.CalculateSize(_repeated_inputTensorIds_codec);
      size += outputTensorIds_.CalculateSize(_repeated_outputTensorIds_codec);
      if (TensorDebugMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TensorDebugMode);
      }
      size += tensorProtos_.CalculateSize(_repeated_tensorProtos_codec);
      if (codeLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CodeLocation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Execution other) {
      if (other == null) {
        return;
      }
      if (other.OpType.Length != 0) {
        OpType = other.OpType;
      }
      if (other.NumOutputs != 0) {
        NumOutputs = other.NumOutputs;
      }
      if (other.GraphId.Length != 0) {
        GraphId = other.GraphId;
      }
      inputTensorIds_.Add(other.inputTensorIds_);
      outputTensorIds_.Add(other.outputTensorIds_);
      if (other.TensorDebugMode != 0) {
        TensorDebugMode = other.TensorDebugMode;
      }
      tensorProtos_.Add(other.tensorProtos_);
      if (other.codeLocation_ != null) {
        if (codeLocation_ == null) {
          CodeLocation = new global::Tensorflow.CodeLocation();
        }
        CodeLocation.MergeFrom(other.CodeLocation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OpType = input.ReadString();
            break;
          }
          case 16: {
            NumOutputs = input.ReadInt32();
            break;
          }
          case 26: {
            GraphId = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            inputTensorIds_.AddEntriesFrom(input, _repeated_inputTensorIds_codec);
            break;
          }
          case 42:
          case 40: {
            outputTensorIds_.AddEntriesFrom(input, _repeated_outputTensorIds_codec);
            break;
          }
          case 48: {
            TensorDebugMode = (global::Tensorflow.TensorDebugMode) input.ReadEnum();
            break;
          }
          case 58: {
            tensorProtos_.AddEntriesFrom(input, _repeated_tensorProtos_codec);
            break;
          }
          case 66: {
            if (codeLocation_ == null) {
              CodeLocation = new global::Tensorflow.CodeLocation();
            }
            input.ReadMessage(CodeLocation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data relating to an execution of a Graph (e.g., an eager execution of a
  /// FuncGraph).
  /// The values of the intermediate tensors computed in the graph are recorded
  /// in this proto. A graph execution may correspond to one or more pieces of
  /// `GraphExecutionTrace`, depending on whether the instrumented tensor values
  /// are summarized in an aggregated or separate fashion.
  /// </summary>
  public sealed partial class GraphExecutionTrace : pb::IMessage<GraphExecutionTrace> {
    private static readonly pb::MessageParser<GraphExecutionTrace> _parser = new pb::MessageParser<GraphExecutionTrace>(() => new GraphExecutionTrace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphExecutionTrace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.DebugEventReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphExecutionTrace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphExecutionTrace(GraphExecutionTrace other) : this() {
      tfdbgContextId_ = other.tfdbgContextId_;
      opName_ = other.opName_;
      outputSlot_ = other.outputSlot_;
      tensorDebugMode_ = other.tensorDebugMode_;
      tensorProto_ = other.tensorProto_ != null ? other.tensorProto_.Clone() : null;
      deviceName_ = other.deviceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphExecutionTrace Clone() {
      return new GraphExecutionTrace(this);
    }

    /// <summary>Field number for the "tfdbg_context_id" field.</summary>
    public const int TfdbgContextIdFieldNumber = 1;
    private string tfdbgContextId_ = "";
    /// <summary>
    /// Unique ID of the context that the executed op(s) belong to (e.g., a
    /// compiled concrete tf.function).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TfdbgContextId {
      get { return tfdbgContextId_; }
      set {
        tfdbgContextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op_name" field.</summary>
    public const int OpNameFieldNumber = 2;
    private string opName_ = "";
    /// <summary>
    /// Name of the op (applicable only in the case of the `FULL_TENSOR` trace
    /// level).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpName {
      get { return opName_; }
      set {
        opName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_slot" field.</summary>
    public const int OutputSlotFieldNumber = 3;
    private int outputSlot_;
    /// <summary>
    /// Output slot of the tensor (applicable only in the case of the `FULL_TENSOR`
    /// trace level).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputSlot {
      get { return outputSlot_; }
      set {
        outputSlot_ = value;
      }
    }

    /// <summary>Field number for the "tensor_debug_mode" field.</summary>
    public const int TensorDebugModeFieldNumber = 4;
    private global::Tensorflow.TensorDebugMode tensorDebugMode_ = 0;
    /// <summary>
    /// Type of the tensor value encapsulated in this proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorDebugMode TensorDebugMode {
      get { return tensorDebugMode_; }
      set {
        tensorDebugMode_ = value;
      }
    }

    /// <summary>Field number for the "tensor_proto" field.</summary>
    public const int TensorProtoFieldNumber = 5;
    private global::Tensorflow.TensorProto tensorProto_;
    /// <summary>
    /// Tensor value in the type described by `tensor_value_type`.
    /// This tensor may summarize the value of a single intermediate op of the
    /// graph, or those of multiple intermediate tensors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorProto TensorProto {
      get { return tensorProto_; }
      set {
        tensorProto_ = value;
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 6;
    private string deviceName_ = "";
    /// <summary>
    /// Name of the device that the op belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphExecutionTrace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphExecutionTrace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TfdbgContextId != other.TfdbgContextId) return false;
      if (OpName != other.OpName) return false;
      if (OutputSlot != other.OutputSlot) return false;
      if (TensorDebugMode != other.TensorDebugMode) return false;
      if (!object.Equals(TensorProto, other.TensorProto)) return false;
      if (DeviceName != other.DeviceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TfdbgContextId.Length != 0) hash ^= TfdbgContextId.GetHashCode();
      if (OpName.Length != 0) hash ^= OpName.GetHashCode();
      if (OutputSlot != 0) hash ^= OutputSlot.GetHashCode();
      if (TensorDebugMode != 0) hash ^= TensorDebugMode.GetHashCode();
      if (tensorProto_ != null) hash ^= TensorProto.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TfdbgContextId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TfdbgContextId);
      }
      if (OpName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OpName);
      }
      if (OutputSlot != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OutputSlot);
      }
      if (TensorDebugMode != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TensorDebugMode);
      }
      if (tensorProto_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TensorProto);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TfdbgContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TfdbgContextId);
      }
      if (OpName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpName);
      }
      if (OutputSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputSlot);
      }
      if (TensorDebugMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TensorDebugMode);
      }
      if (tensorProto_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TensorProto);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphExecutionTrace other) {
      if (other == null) {
        return;
      }
      if (other.TfdbgContextId.Length != 0) {
        TfdbgContextId = other.TfdbgContextId;
      }
      if (other.OpName.Length != 0) {
        OpName = other.OpName;
      }
      if (other.OutputSlot != 0) {
        OutputSlot = other.OutputSlot;
      }
      if (other.TensorDebugMode != 0) {
        TensorDebugMode = other.TensorDebugMode;
      }
      if (other.tensorProto_ != null) {
        if (tensorProto_ == null) {
          TensorProto = new global::Tensorflow.TensorProto();
        }
        TensorProto.MergeFrom(other.TensorProto);
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TfdbgContextId = input.ReadString();
            break;
          }
          case 18: {
            OpName = input.ReadString();
            break;
          }
          case 24: {
            OutputSlot = input.ReadInt32();
            break;
          }
          case 32: {
            TensorDebugMode = (global::Tensorflow.TensorDebugMode) input.ReadEnum();
            break;
          }
          case 42: {
            if (tensorProto_ == null) {
              TensorProto = new global::Tensorflow.TensorProto();
            }
            input.ReadMessage(TensorProto);
            break;
          }
          case 50: {
            DeviceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
