// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/data/experimental/snapshot.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Data.Experimental {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/data/experimental/snapshot.proto</summary>
  public static partial class SnapshotReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/data/experimental/snapshot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SnapshotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjl0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvZGF0YS9leHBlcmltZW50YWwv",
            "c25hcHNob3QucHJvdG8SHHRlbnNvcmZsb3cuZGF0YS5leHBlcmltZW50YWwa",
            "JnRlbnNvcmZsb3cvY29yZS9mcmFtZXdvcmsvdGVuc29yLnByb3RvIjkKDlNu",
            "YXBzaG90UmVjb3JkEicKBnRlbnNvchgBIAMoCzIXLnRlbnNvcmZsb3cuVGVu",
            "c29yUHJvdG8ibAoWU25hcHNob3RNZXRhZGF0YVJlY29yZBISCgpncmFwaF9o",
            "YXNoGAEgASgJEg4KBnJ1bl9pZBgCIAEoCRIaChJjcmVhdGlvbl90aW1lc3Rh",
            "bXAYAyABKAMSEgoJZmluYWxpemVkGOgHIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.TensorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Data.Experimental.SnapshotRecord), global::Tensorflow.Data.Experimental.SnapshotRecord.Parser, new[]{ "Tensor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Data.Experimental.SnapshotMetadataRecord), global::Tensorflow.Data.Experimental.SnapshotMetadataRecord.Parser, new[]{ "GraphHash", "RunId", "CreationTimestamp", "Finalized" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Each SnapshotRecord represents one batch of pre-processed input data. A batch
  /// consists of a list of tensors that we encode as TensorProtos. This message
  /// doesn't store the structure of the batch.
  /// </summary>
  public sealed partial class SnapshotRecord : pb::IMessage<SnapshotRecord> {
    private static readonly pb::MessageParser<SnapshotRecord> _parser = new pb::MessageParser<SnapshotRecord>(() => new SnapshotRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Data.Experimental.SnapshotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRecord(SnapshotRecord other) : this() {
      tensor_ = other.tensor_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRecord Clone() {
      return new SnapshotRecord(this);
    }

    /// <summary>Field number for the "tensor" field.</summary>
    public const int TensorFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.TensorProto> _repeated_tensor_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.TensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.TensorProto> tensor_ = new pbc::RepeatedField<global::Tensorflow.TensorProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.TensorProto> Tensor {
      get { return tensor_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tensor_.Equals(other.tensor_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tensor_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tensor_.WriteTo(output, _repeated_tensor_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tensor_.CalculateSize(_repeated_tensor_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotRecord other) {
      if (other == null) {
        return;
      }
      tensor_.Add(other.tensor_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tensor_.AddEntriesFrom(input, _repeated_tensor_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This stores the metadata information present in each snapshot record.
  /// </summary>
  public sealed partial class SnapshotMetadataRecord : pb::IMessage<SnapshotMetadataRecord> {
    private static readonly pb::MessageParser<SnapshotMetadataRecord> _parser = new pb::MessageParser<SnapshotMetadataRecord>(() => new SnapshotMetadataRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotMetadataRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Data.Experimental.SnapshotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotMetadataRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotMetadataRecord(SnapshotMetadataRecord other) : this() {
      graphHash_ = other.graphHash_;
      runId_ = other.runId_;
      creationTimestamp_ = other.creationTimestamp_;
      finalized_ = other.finalized_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotMetadataRecord Clone() {
      return new SnapshotMetadataRecord(this);
    }

    /// <summary>Field number for the "graph_hash" field.</summary>
    public const int GraphHashFieldNumber = 1;
    private string graphHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphHash {
      get { return graphHash_; }
      set {
        graphHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 2;
    private string runId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creation_timestamp" field.</summary>
    public const int CreationTimestampFieldNumber = 3;
    private long creationTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationTimestamp {
      get { return creationTimestamp_; }
      set {
        creationTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "finalized" field.</summary>
    public const int FinalizedFieldNumber = 1000;
    private bool finalized_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finalized {
      get { return finalized_; }
      set {
        finalized_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotMetadataRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotMetadataRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GraphHash != other.GraphHash) return false;
      if (RunId != other.RunId) return false;
      if (CreationTimestamp != other.CreationTimestamp) return false;
      if (Finalized != other.Finalized) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GraphHash.Length != 0) hash ^= GraphHash.GetHashCode();
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (CreationTimestamp != 0L) hash ^= CreationTimestamp.GetHashCode();
      if (Finalized != false) hash ^= Finalized.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GraphHash);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RunId);
      }
      if (CreationTimestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreationTimestamp);
      }
      if (Finalized != false) {
        output.WriteRawTag(192, 62);
        output.WriteBool(Finalized);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GraphHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphHash);
      }
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (CreationTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTimestamp);
      }
      if (Finalized != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotMetadataRecord other) {
      if (other == null) {
        return;
      }
      if (other.GraphHash.Length != 0) {
        GraphHash = other.GraphHash;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.CreationTimestamp != 0L) {
        CreationTimestamp = other.CreationTimestamp;
      }
      if (other.Finalized != false) {
        Finalized = other.Finalized;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GraphHash = input.ReadString();
            break;
          }
          case 18: {
            RunId = input.ReadString();
            break;
          }
          case 24: {
            CreationTimestamp = input.ReadInt64();
            break;
          }
          case 8000: {
            Finalized = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
