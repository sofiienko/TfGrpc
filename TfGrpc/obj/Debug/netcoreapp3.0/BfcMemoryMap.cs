// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/bfc_memory_map.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/bfc_memory_map.proto</summary>
  public static partial class BfcMemoryMapReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/bfc_memory_map.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BfcMemoryMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci10ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvYmZjX21lbW9yeV9tYXAucHJv",
            "dG8SCnRlbnNvcmZsb3cikgEKEU1lbUFsbG9jYXRvclN0YXRzEhIKCm51bV9h",
            "bGxvY3MYASABKAMSFAoMYnl0ZXNfaW5fdXNlGAIgASgDEhkKEXBlYWtfYnl0",
            "ZXNfaW5fdXNlGAMgASgDEhoKEmxhcmdlc3RfYWxsb2Nfc2l6ZRgEIAEoAxIc",
            "ChRmcmFnbWVudGF0aW9uX21ldHJpYxgFIAEoAiKuAQoITWVtQ2h1bmsSDwoH",
            "YWRkcmVzcxgBIAEoBBIMCgRzaXplGAIgASgDEhYKDnJlcXVlc3RlZF9zaXpl",
            "GAMgASgDEgsKA2JpbhgEIAEoBRIPCgdvcF9uYW1lGAUgASgJEhYKDmZyZWVk",
            "X2F0X2NvdW50GAYgASgEEhQKDGFjdGlvbl9jb3VudBgHIAEoBBIOCgZpbl91",
            "c2UYCCABKAgSDwoHc3RlcF9pZBgJIAEoBCKLAQoKQmluU3VtbWFyeRILCgNi",
            "aW4YASABKAUSGgoSdG90YWxfYnl0ZXNfaW5fdXNlGAIgASgDEhoKEnRvdGFs",
            "X2J5dGVzX2luX2JpbhgDIAEoAxIbChN0b3RhbF9jaHVua3NfaW5fdXNlGAQg",
            "ASgDEhsKE3RvdGFsX2NodW5rc19pbl9iaW4YBSABKAMiLgoIU25hcFNob3QS",
            "FAoMYWN0aW9uX2NvdW50GAEgASgEEgwKBHNpemUYAiABKAMizQEKCk1lbW9y",
            "eUR1bXASFgoOYWxsb2NhdG9yX25hbWUYASABKAkSKwoLYmluX3N1bW1hcnkY",
            "AiADKAsyFi50ZW5zb3JmbG93LkJpblN1bW1hcnkSIwoFY2h1bmsYAyADKAsy",
            "FC50ZW5zb3JmbG93Lk1lbUNodW5rEicKCXNuYXBfc2hvdBgEIAMoCzIULnRl",
            "bnNvcmZsb3cuU25hcFNob3QSLAoFc3RhdHMYBSABKAsyHS50ZW5zb3JmbG93",
            "Lk1lbUFsbG9jYXRvclN0YXRzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.MemAllocatorStats), global::Tensorflow.MemAllocatorStats.Parser, new[]{ "NumAllocs", "BytesInUse", "PeakBytesInUse", "LargestAllocSize", "FragmentationMetric" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.MemChunk), global::Tensorflow.MemChunk.Parser, new[]{ "Address", "Size", "RequestedSize", "Bin", "OpName", "FreedAtCount", "ActionCount", "InUse", "StepId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.BinSummary), global::Tensorflow.BinSummary.Parser, new[]{ "Bin", "TotalBytesInUse", "TotalBytesInBin", "TotalChunksInUse", "TotalChunksInBin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.SnapShot), global::Tensorflow.SnapShot.Parser, new[]{ "ActionCount", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.MemoryDump), global::Tensorflow.MemoryDump.Parser, new[]{ "AllocatorName", "BinSummary", "Chunk", "SnapShot", "Stats" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Some of the data from AllocatorStats
  /// </summary>
  public sealed partial class MemAllocatorStats : pb::IMessage<MemAllocatorStats> {
    private static readonly pb::MessageParser<MemAllocatorStats> _parser = new pb::MessageParser<MemAllocatorStats>(() => new MemAllocatorStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemAllocatorStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.BfcMemoryMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemAllocatorStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemAllocatorStats(MemAllocatorStats other) : this() {
      numAllocs_ = other.numAllocs_;
      bytesInUse_ = other.bytesInUse_;
      peakBytesInUse_ = other.peakBytesInUse_;
      largestAllocSize_ = other.largestAllocSize_;
      fragmentationMetric_ = other.fragmentationMetric_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemAllocatorStats Clone() {
      return new MemAllocatorStats(this);
    }

    /// <summary>Field number for the "num_allocs" field.</summary>
    public const int NumAllocsFieldNumber = 1;
    private long numAllocs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumAllocs {
      get { return numAllocs_; }
      set {
        numAllocs_ = value;
      }
    }

    /// <summary>Field number for the "bytes_in_use" field.</summary>
    public const int BytesInUseFieldNumber = 2;
    private long bytesInUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BytesInUse {
      get { return bytesInUse_; }
      set {
        bytesInUse_ = value;
      }
    }

    /// <summary>Field number for the "peak_bytes_in_use" field.</summary>
    public const int PeakBytesInUseFieldNumber = 3;
    private long peakBytesInUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PeakBytesInUse {
      get { return peakBytesInUse_; }
      set {
        peakBytesInUse_ = value;
      }
    }

    /// <summary>Field number for the "largest_alloc_size" field.</summary>
    public const int LargestAllocSizeFieldNumber = 4;
    private long largestAllocSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LargestAllocSize {
      get { return largestAllocSize_; }
      set {
        largestAllocSize_ = value;
      }
    }

    /// <summary>Field number for the "fragmentation_metric" field.</summary>
    public const int FragmentationMetricFieldNumber = 5;
    private float fragmentationMetric_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FragmentationMetric {
      get { return fragmentationMetric_; }
      set {
        fragmentationMetric_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemAllocatorStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemAllocatorStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumAllocs != other.NumAllocs) return false;
      if (BytesInUse != other.BytesInUse) return false;
      if (PeakBytesInUse != other.PeakBytesInUse) return false;
      if (LargestAllocSize != other.LargestAllocSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FragmentationMetric, other.FragmentationMetric)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumAllocs != 0L) hash ^= NumAllocs.GetHashCode();
      if (BytesInUse != 0L) hash ^= BytesInUse.GetHashCode();
      if (PeakBytesInUse != 0L) hash ^= PeakBytesInUse.GetHashCode();
      if (LargestAllocSize != 0L) hash ^= LargestAllocSize.GetHashCode();
      if (FragmentationMetric != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FragmentationMetric);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumAllocs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NumAllocs);
      }
      if (BytesInUse != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BytesInUse);
      }
      if (PeakBytesInUse != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PeakBytesInUse);
      }
      if (LargestAllocSize != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LargestAllocSize);
      }
      if (FragmentationMetric != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(FragmentationMetric);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumAllocs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumAllocs);
      }
      if (BytesInUse != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BytesInUse);
      }
      if (PeakBytesInUse != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PeakBytesInUse);
      }
      if (LargestAllocSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LargestAllocSize);
      }
      if (FragmentationMetric != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemAllocatorStats other) {
      if (other == null) {
        return;
      }
      if (other.NumAllocs != 0L) {
        NumAllocs = other.NumAllocs;
      }
      if (other.BytesInUse != 0L) {
        BytesInUse = other.BytesInUse;
      }
      if (other.PeakBytesInUse != 0L) {
        PeakBytesInUse = other.PeakBytesInUse;
      }
      if (other.LargestAllocSize != 0L) {
        LargestAllocSize = other.LargestAllocSize;
      }
      if (other.FragmentationMetric != 0F) {
        FragmentationMetric = other.FragmentationMetric;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumAllocs = input.ReadInt64();
            break;
          }
          case 16: {
            BytesInUse = input.ReadInt64();
            break;
          }
          case 24: {
            PeakBytesInUse = input.ReadInt64();
            break;
          }
          case 32: {
            LargestAllocSize = input.ReadInt64();
            break;
          }
          case 45: {
            FragmentationMetric = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemChunk : pb::IMessage<MemChunk> {
    private static readonly pb::MessageParser<MemChunk> _parser = new pb::MessageParser<MemChunk>(() => new MemChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.BfcMemoryMapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemChunk(MemChunk other) : this() {
      address_ = other.address_;
      size_ = other.size_;
      requestedSize_ = other.requestedSize_;
      bin_ = other.bin_;
      opName_ = other.opName_;
      freedAtCount_ = other.freedAtCount_;
      actionCount_ = other.actionCount_;
      inUse_ = other.inUse_;
      stepId_ = other.stepId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemChunk Clone() {
      return new MemChunk(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private ulong address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private long size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "requested_size" field.</summary>
    public const int RequestedSizeFieldNumber = 3;
    private long requestedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestedSize {
      get { return requestedSize_; }
      set {
        requestedSize_ = value;
      }
    }

    /// <summary>Field number for the "bin" field.</summary>
    public const int BinFieldNumber = 4;
    private int bin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bin {
      get { return bin_; }
      set {
        bin_ = value;
      }
    }

    /// <summary>Field number for the "op_name" field.</summary>
    public const int OpNameFieldNumber = 5;
    private string opName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpName {
      get { return opName_; }
      set {
        opName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "freed_at_count" field.</summary>
    public const int FreedAtCountFieldNumber = 6;
    private ulong freedAtCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FreedAtCount {
      get { return freedAtCount_; }
      set {
        freedAtCount_ = value;
      }
    }

    /// <summary>Field number for the "action_count" field.</summary>
    public const int ActionCountFieldNumber = 7;
    private ulong actionCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ActionCount {
      get { return actionCount_; }
      set {
        actionCount_ = value;
      }
    }

    /// <summary>Field number for the "in_use" field.</summary>
    public const int InUseFieldNumber = 8;
    private bool inUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InUse {
      get { return inUse_; }
      set {
        inUse_ = value;
      }
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 9;
    private ulong stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Size != other.Size) return false;
      if (RequestedSize != other.RequestedSize) return false;
      if (Bin != other.Bin) return false;
      if (OpName != other.OpName) return false;
      if (FreedAtCount != other.FreedAtCount) return false;
      if (ActionCount != other.ActionCount) return false;
      if (InUse != other.InUse) return false;
      if (StepId != other.StepId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0UL) hash ^= Address.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (RequestedSize != 0L) hash ^= RequestedSize.GetHashCode();
      if (Bin != 0) hash ^= Bin.GetHashCode();
      if (OpName.Length != 0) hash ^= OpName.GetHashCode();
      if (FreedAtCount != 0UL) hash ^= FreedAtCount.GetHashCode();
      if (ActionCount != 0UL) hash ^= ActionCount.GetHashCode();
      if (InUse != false) hash ^= InUse.GetHashCode();
      if (StepId != 0UL) hash ^= StepId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Address);
      }
      if (Size != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Size);
      }
      if (RequestedSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RequestedSize);
      }
      if (Bin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Bin);
      }
      if (OpName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OpName);
      }
      if (FreedAtCount != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FreedAtCount);
      }
      if (ActionCount != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ActionCount);
      }
      if (InUse != false) {
        output.WriteRawTag(64);
        output.WriteBool(InUse);
      }
      if (StepId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(StepId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Address);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (RequestedSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestedSize);
      }
      if (Bin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bin);
      }
      if (OpName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpName);
      }
      if (FreedAtCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FreedAtCount);
      }
      if (ActionCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActionCount);
      }
      if (InUse != false) {
        size += 1 + 1;
      }
      if (StepId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StepId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemChunk other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0UL) {
        Address = other.Address;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      if (other.RequestedSize != 0L) {
        RequestedSize = other.RequestedSize;
      }
      if (other.Bin != 0) {
        Bin = other.Bin;
      }
      if (other.OpName.Length != 0) {
        OpName = other.OpName;
      }
      if (other.FreedAtCount != 0UL) {
        FreedAtCount = other.FreedAtCount;
      }
      if (other.ActionCount != 0UL) {
        ActionCount = other.ActionCount;
      }
      if (other.InUse != false) {
        InUse = other.InUse;
      }
      if (other.StepId != 0UL) {
        StepId = other.StepId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = input.ReadUInt64();
            break;
          }
          case 16: {
            Size = input.ReadInt64();
            break;
          }
          case 24: {
            RequestedSize = input.ReadInt64();
            break;
          }
          case 32: {
            Bin = input.ReadInt32();
            break;
          }
          case 42: {
            OpName = input.ReadString();
            break;
          }
          case 48: {
            FreedAtCount = input.ReadUInt64();
            break;
          }
          case 56: {
            ActionCount = input.ReadUInt64();
            break;
          }
          case 64: {
            InUse = input.ReadBool();
            break;
          }
          case 72: {
            StepId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinSummary : pb::IMessage<BinSummary> {
    private static readonly pb::MessageParser<BinSummary> _parser = new pb::MessageParser<BinSummary>(() => new BinSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.BfcMemoryMapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinSummary(BinSummary other) : this() {
      bin_ = other.bin_;
      totalBytesInUse_ = other.totalBytesInUse_;
      totalBytesInBin_ = other.totalBytesInBin_;
      totalChunksInUse_ = other.totalChunksInUse_;
      totalChunksInBin_ = other.totalChunksInBin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinSummary Clone() {
      return new BinSummary(this);
    }

    /// <summary>Field number for the "bin" field.</summary>
    public const int BinFieldNumber = 1;
    private int bin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bin {
      get { return bin_; }
      set {
        bin_ = value;
      }
    }

    /// <summary>Field number for the "total_bytes_in_use" field.</summary>
    public const int TotalBytesInUseFieldNumber = 2;
    private long totalBytesInUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBytesInUse {
      get { return totalBytesInUse_; }
      set {
        totalBytesInUse_ = value;
      }
    }

    /// <summary>Field number for the "total_bytes_in_bin" field.</summary>
    public const int TotalBytesInBinFieldNumber = 3;
    private long totalBytesInBin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBytesInBin {
      get { return totalBytesInBin_; }
      set {
        totalBytesInBin_ = value;
      }
    }

    /// <summary>Field number for the "total_chunks_in_use" field.</summary>
    public const int TotalChunksInUseFieldNumber = 4;
    private long totalChunksInUse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalChunksInUse {
      get { return totalChunksInUse_; }
      set {
        totalChunksInUse_ = value;
      }
    }

    /// <summary>Field number for the "total_chunks_in_bin" field.</summary>
    public const int TotalChunksInBinFieldNumber = 5;
    private long totalChunksInBin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalChunksInBin {
      get { return totalChunksInBin_; }
      set {
        totalChunksInBin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bin != other.Bin) return false;
      if (TotalBytesInUse != other.TotalBytesInUse) return false;
      if (TotalBytesInBin != other.TotalBytesInBin) return false;
      if (TotalChunksInUse != other.TotalChunksInUse) return false;
      if (TotalChunksInBin != other.TotalChunksInBin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bin != 0) hash ^= Bin.GetHashCode();
      if (TotalBytesInUse != 0L) hash ^= TotalBytesInUse.GetHashCode();
      if (TotalBytesInBin != 0L) hash ^= TotalBytesInBin.GetHashCode();
      if (TotalChunksInUse != 0L) hash ^= TotalChunksInUse.GetHashCode();
      if (TotalChunksInBin != 0L) hash ^= TotalChunksInBin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Bin);
      }
      if (TotalBytesInUse != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalBytesInUse);
      }
      if (TotalBytesInBin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalBytesInBin);
      }
      if (TotalChunksInUse != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalChunksInUse);
      }
      if (TotalChunksInBin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalChunksInBin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bin);
      }
      if (TotalBytesInUse != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBytesInUse);
      }
      if (TotalBytesInBin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBytesInBin);
      }
      if (TotalChunksInUse != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalChunksInUse);
      }
      if (TotalChunksInBin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalChunksInBin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinSummary other) {
      if (other == null) {
        return;
      }
      if (other.Bin != 0) {
        Bin = other.Bin;
      }
      if (other.TotalBytesInUse != 0L) {
        TotalBytesInUse = other.TotalBytesInUse;
      }
      if (other.TotalBytesInBin != 0L) {
        TotalBytesInBin = other.TotalBytesInBin;
      }
      if (other.TotalChunksInUse != 0L) {
        TotalChunksInUse = other.TotalChunksInUse;
      }
      if (other.TotalChunksInBin != 0L) {
        TotalChunksInBin = other.TotalChunksInBin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Bin = input.ReadInt32();
            break;
          }
          case 16: {
            TotalBytesInUse = input.ReadInt64();
            break;
          }
          case 24: {
            TotalBytesInBin = input.ReadInt64();
            break;
          }
          case 32: {
            TotalChunksInUse = input.ReadInt64();
            break;
          }
          case 40: {
            TotalChunksInBin = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SnapShot : pb::IMessage<SnapShot> {
    private static readonly pb::MessageParser<SnapShot> _parser = new pb::MessageParser<SnapShot>(() => new SnapShot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapShot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.BfcMemoryMapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShot(SnapShot other) : this() {
      actionCount_ = other.actionCount_;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShot Clone() {
      return new SnapShot(this);
    }

    /// <summary>Field number for the "action_count" field.</summary>
    public const int ActionCountFieldNumber = 1;
    private ulong actionCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ActionCount {
      get { return actionCount_; }
      set {
        actionCount_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private long size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapShot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapShot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionCount != other.ActionCount) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionCount != 0UL) hash ^= ActionCount.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionCount != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ActionCount);
      }
      if (Size != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActionCount);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapShot other) {
      if (other == null) {
        return;
      }
      if (other.ActionCount != 0UL) {
        ActionCount = other.ActionCount;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActionCount = input.ReadUInt64();
            break;
          }
          case 16: {
            Size = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemoryDump : pb::IMessage<MemoryDump> {
    private static readonly pb::MessageParser<MemoryDump> _parser = new pb::MessageParser<MemoryDump>(() => new MemoryDump());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemoryDump> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.BfcMemoryMapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDump() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDump(MemoryDump other) : this() {
      allocatorName_ = other.allocatorName_;
      binSummary_ = other.binSummary_.Clone();
      chunk_ = other.chunk_.Clone();
      snapShot_ = other.snapShot_.Clone();
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDump Clone() {
      return new MemoryDump(this);
    }

    /// <summary>Field number for the "allocator_name" field.</summary>
    public const int AllocatorNameFieldNumber = 1;
    private string allocatorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllocatorName {
      get { return allocatorName_; }
      set {
        allocatorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bin_summary" field.</summary>
    public const int BinSummaryFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.BinSummary> _repeated_binSummary_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.BinSummary.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.BinSummary> binSummary_ = new pbc::RepeatedField<global::Tensorflow.BinSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.BinSummary> BinSummary {
      get { return binSummary_; }
    }

    /// <summary>Field number for the "chunk" field.</summary>
    public const int ChunkFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tensorflow.MemChunk> _repeated_chunk_codec
        = pb::FieldCodec.ForMessage(26, global::Tensorflow.MemChunk.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.MemChunk> chunk_ = new pbc::RepeatedField<global::Tensorflow.MemChunk>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.MemChunk> Chunk {
      get { return chunk_; }
    }

    /// <summary>Field number for the "snap_shot" field.</summary>
    public const int SnapShotFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tensorflow.SnapShot> _repeated_snapShot_codec
        = pb::FieldCodec.ForMessage(34, global::Tensorflow.SnapShot.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.SnapShot> snapShot_ = new pbc::RepeatedField<global::Tensorflow.SnapShot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.SnapShot> SnapShot {
      get { return snapShot_; }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 5;
    private global::Tensorflow.MemAllocatorStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.MemAllocatorStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemoryDump);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemoryDump other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllocatorName != other.AllocatorName) return false;
      if(!binSummary_.Equals(other.binSummary_)) return false;
      if(!chunk_.Equals(other.chunk_)) return false;
      if(!snapShot_.Equals(other.snapShot_)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllocatorName.Length != 0) hash ^= AllocatorName.GetHashCode();
      hash ^= binSummary_.GetHashCode();
      hash ^= chunk_.GetHashCode();
      hash ^= snapShot_.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllocatorName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AllocatorName);
      }
      binSummary_.WriteTo(output, _repeated_binSummary_codec);
      chunk_.WriteTo(output, _repeated_chunk_codec);
      snapShot_.WriteTo(output, _repeated_snapShot_codec);
      if (stats_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Stats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllocatorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllocatorName);
      }
      size += binSummary_.CalculateSize(_repeated_binSummary_codec);
      size += chunk_.CalculateSize(_repeated_chunk_codec);
      size += snapShot_.CalculateSize(_repeated_snapShot_codec);
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemoryDump other) {
      if (other == null) {
        return;
      }
      if (other.AllocatorName.Length != 0) {
        AllocatorName = other.AllocatorName;
      }
      binSummary_.Add(other.binSummary_);
      chunk_.Add(other.chunk_);
      snapShot_.Add(other.snapShot_);
      if (other.stats_ != null) {
        if (stats_ == null) {
          Stats = new global::Tensorflow.MemAllocatorStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AllocatorName = input.ReadString();
            break;
          }
          case 18: {
            binSummary_.AddEntriesFrom(input, _repeated_binSummary_codec);
            break;
          }
          case 26: {
            chunk_.AddEntriesFrom(input, _repeated_chunk_codec);
            break;
          }
          case 34: {
            snapShot_.AddEntriesFrom(input, _repeated_snapShot_codec);
            break;
          }
          case 42: {
            if (stats_ == null) {
              Stats = new global::Tensorflow.MemAllocatorStats();
            }
            input.ReadMessage(Stats);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
