// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/remote_tensor_handle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Eager {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/remote_tensor_handle.proto</summary>
  public static partial class RemoteTensorHandleReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/remote_tensor_handle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RemoteTensorHandleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjN0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvcmVtb3RlX3RlbnNvcl9oYW5k",
            "bGUucHJvdG8SEHRlbnNvcmZsb3cuZWFnZXIaJXRlbnNvcmZsb3cvY29yZS9m",
            "cmFtZXdvcmsvdHlwZXMucHJvdG8ifwoSUmVtb3RlVGVuc29ySGFuZGxlEg0K",
            "BW9wX2lkGAEgASgDEhIKCm91dHB1dF9udW0YAiABKAUSDgoGZGV2aWNlGAMg",
            "ASgJEhEKCW9wX2RldmljZRgEIAEoCRIjCgVkdHlwZRgFIAEoDjIULnRlbnNv",
            "cmZsb3cuRGF0YVR5cGVCOQoYb3JnLnRlbnNvcmZsb3cuZnJhbWV3b3JrQhhS",
            "ZW1vdGVUZW5zb3JIYW5kbGVQcm90b3NQAfgBAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.RemoteTensorHandle), global::Tensorflow.Eager.RemoteTensorHandle.Parser, new[]{ "OpId", "OutputNum", "Device", "OpDevice", "Dtype" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RemoteTensorHandle : pb::IMessage<RemoteTensorHandle> {
    private static readonly pb::MessageParser<RemoteTensorHandle> _parser = new pb::MessageParser<RemoteTensorHandle>(() => new RemoteTensorHandle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteTensorHandle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.RemoteTensorHandleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteTensorHandle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteTensorHandle(RemoteTensorHandle other) : this() {
      opId_ = other.opId_;
      outputNum_ = other.outputNum_;
      device_ = other.device_;
      opDevice_ = other.opDevice_;
      dtype_ = other.dtype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteTensorHandle Clone() {
      return new RemoteTensorHandle(this);
    }

    /// <summary>Field number for the "op_id" field.</summary>
    public const int OpIdFieldNumber = 1;
    private long opId_;
    /// <summary>
    /// The ID of the operation that produced this tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpId {
      get { return opId_; }
      set {
        opId_ = value;
      }
    }

    /// <summary>Field number for the "output_num" field.</summary>
    public const int OutputNumFieldNumber = 2;
    private int outputNum_;
    /// <summary>
    /// The index into the outputs of the operation that produced this tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutputNum {
      get { return outputNum_; }
      set {
        outputNum_ = value;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 3;
    private string device_ = "";
    /// <summary>
    /// Device of the operation that produced this tensor. Cannot be empty.
    /// For multi-device functions, it's the default device passed to placer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op_device" field.</summary>
    public const int OpDeviceFieldNumber = 4;
    private string opDevice_ = "";
    /// <summary>
    /// Device where the tensor is located. Can be empty if the operation producing
    /// this tensor is a multi-device function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpDevice {
      get { return opDevice_; }
      set {
        opDevice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dtype" field.</summary>
    public const int DtypeFieldNumber = 5;
    private global::Tensorflow.DataType dtype_ = 0;
    /// <summary>
    /// Tensor type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DataType Dtype {
      get { return dtype_; }
      set {
        dtype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteTensorHandle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteTensorHandle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpId != other.OpId) return false;
      if (OutputNum != other.OutputNum) return false;
      if (Device != other.Device) return false;
      if (OpDevice != other.OpDevice) return false;
      if (Dtype != other.Dtype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpId != 0L) hash ^= OpId.GetHashCode();
      if (OutputNum != 0) hash ^= OutputNum.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (OpDevice.Length != 0) hash ^= OpDevice.GetHashCode();
      if (Dtype != 0) hash ^= Dtype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OpId);
      }
      if (OutputNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputNum);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Device);
      }
      if (OpDevice.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OpDevice);
      }
      if (Dtype != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Dtype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpId);
      }
      if (OutputNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputNum);
      }
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (OpDevice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpDevice);
      }
      if (Dtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dtype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteTensorHandle other) {
      if (other == null) {
        return;
      }
      if (other.OpId != 0L) {
        OpId = other.OpId;
      }
      if (other.OutputNum != 0) {
        OutputNum = other.OutputNum;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.OpDevice.Length != 0) {
        OpDevice = other.OpDevice;
      }
      if (other.Dtype != 0) {
        Dtype = other.Dtype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpId = input.ReadInt64();
            break;
          }
          case 16: {
            OutputNum = input.ReadInt32();
            break;
          }
          case 26: {
            Device = input.ReadString();
            break;
          }
          case 34: {
            OpDevice = input.ReadString();
            break;
          }
          case 40: {
            Dtype = (global::Tensorflow.DataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
