// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/tpu/tpu_embedding_output_layout.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Tpu {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/tpu/tpu_embedding_output_layout.proto</summary>
  public static partial class TpuEmbeddingOutputLayoutReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/tpu/tpu_embedding_output_layout.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TpuEmbeddingOutputLayoutReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj50ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvdHB1L3RwdV9lbWJlZGRpbmdf",
            "b3V0cHV0X2xheW91dC5wcm90bxIOdGVuc29yZmxvdy50cHUihwUKGFRQVUVt",
            "YmVkZGluZ091dHB1dExheW91dBJHCgV0YWJsZRgBIAMoCzI4LnRlbnNvcmZs",
            "b3cudHB1LlRQVUVtYmVkZGluZ091dHB1dExheW91dC5UYWJsZURlc2NyaXB0",
            "b3ISTgoGb3V0cHV0GAIgAygLMj4udGVuc29yZmxvdy50cHUuVFBVRW1iZWRk",
            "aW5nT3V0cHV0TGF5b3V0LkVtYmVkZGluZ091dHB1dFRlbnNvchpQCg5PdXRw",
            "dXRMb2NhdGlvbhIUCgx0ZW5zb3JfaW5kZXgYASABKAUSEwoLZGltMF9vZmZz",
            "ZXQYAiABKAUSEwoLZGltMV9vZmZzZXQYAyABKAUaZQoRRmVhdHVyZURlc2Ny",
            "aXB0b3ISUAoPb3V0cHV0X2xvY2F0aW9uGAEgAygLMjcudGVuc29yZmxvdy50",
            "cHUuVFBVRW1iZWRkaW5nT3V0cHV0TGF5b3V0Lk91dHB1dExvY2F0aW9uGl4K",
            "D1RhYmxlRGVzY3JpcHRvchJLCgdmZWF0dXJlGAEgAygLMjoudGVuc29yZmxv",
            "dy50cHUuVFBVRW1iZWRkaW5nT3V0cHV0TGF5b3V0LkZlYXR1cmVEZXNjcmlw",
            "dG9yGkMKEFR3b0RPdXRwdXRUZW5zb3ISHAoUZGltMF9zaXplX3Blcl9zYW1w",
            "bGUYAiABKAUSEQoJZGltMV9zaXplGAEgASgFGnQKFUVtYmVkZGluZ091dHB1",
            "dFRlbnNvchJKCgV0d29fZBgEIAEoCzI5LnRlbnNvcmZsb3cudHB1LlRQVUVt",
            "YmVkZGluZ091dHB1dExheW91dC5Ud29ET3V0cHV0VGVuc29ySABCDwoNb3V0",
            "cHV0X2Zvcm1hdGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUEmbeddingOutputLayout), global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Parser, new[]{ "Table", "Output" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.OutputLocation), global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.OutputLocation.Parser, new[]{ "TensorIndex", "Dim0Offset", "Dim1Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.FeatureDescriptor), global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.FeatureDescriptor.Parser, new[]{ "OutputLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TableDescriptor), global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TableDescriptor.Parser, new[]{ "Feature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TwoDOutputTensor), global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TwoDOutputTensor.Parser, new[]{ "Dim0SizePerSample", "Dim1Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.EmbeddingOutputTensor), global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.EmbeddingOutputTensor.Parser, new[]{ "TwoD" }, new[]{ "OutputFormat" }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TPUEmbeddingOutputLayout : pb::IMessage<TPUEmbeddingOutputLayout> {
    private static readonly pb::MessageParser<TPUEmbeddingOutputLayout> _parser = new pb::MessageParser<TPUEmbeddingOutputLayout>(() => new TPUEmbeddingOutputLayout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TPUEmbeddingOutputLayout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.TpuEmbeddingOutputLayoutReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPUEmbeddingOutputLayout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPUEmbeddingOutputLayout(TPUEmbeddingOutputLayout other) : this() {
      table_ = other.table_.Clone();
      output_ = other.output_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TPUEmbeddingOutputLayout Clone() {
      return new TPUEmbeddingOutputLayout(this);
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TableDescriptor> _repeated_table_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TableDescriptor.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TableDescriptor> table_ = new pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TableDescriptor>();
    /// <summary>
    /// Output locations for each feature of each table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TableDescriptor> Table {
      get { return table_; }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.EmbeddingOutputTensor> _repeated_output_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.EmbeddingOutputTensor.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.EmbeddingOutputTensor> output_ = new pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.EmbeddingOutputTensor>();
    /// <summary>
    /// Shape and layout information for each tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.EmbeddingOutputTensor> Output {
      get { return output_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TPUEmbeddingOutputLayout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TPUEmbeddingOutputLayout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!table_.Equals(other.table_)) return false;
      if(!output_.Equals(other.output_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= table_.GetHashCode();
      hash ^= output_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      table_.WriteTo(output, _repeated_table_codec);
      output_.WriteTo(output, _repeated_output_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += table_.CalculateSize(_repeated_table_codec);
      size += output_.CalculateSize(_repeated_output_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TPUEmbeddingOutputLayout other) {
      if (other == null) {
        return;
      }
      table_.Add(other.table_);
      output_.Add(other.output_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            table_.AddEntriesFrom(input, _repeated_table_codec);
            break;
          }
          case 18: {
            output_.AddEntriesFrom(input, _repeated_output_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TPUEmbeddingOutputLayout message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Location of one copy of the feature's data.
      /// </summary>
      public sealed partial class OutputLocation : pb::IMessage<OutputLocation> {
        private static readonly pb::MessageParser<OutputLocation> _parser = new pb::MessageParser<OutputLocation>(() => new OutputLocation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OutputLocation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutputLocation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutputLocation(OutputLocation other) : this() {
          tensorIndex_ = other.tensorIndex_;
          dim0Offset_ = other.dim0Offset_;
          dim1Offset_ = other.dim1Offset_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutputLocation Clone() {
          return new OutputLocation(this);
        }

        /// <summary>Field number for the "tensor_index" field.</summary>
        public const int TensorIndexFieldNumber = 1;
        private int tensorIndex_;
        /// <summary>
        /// Which output tensor this copy of the feature will go into. Must be
        /// between 0 and layout.output_size().
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TensorIndex {
          get { return tensorIndex_; }
          set {
            tensorIndex_ = value;
          }
        }

        /// <summary>Field number for the "dim0_offset" field.</summary>
        public const int Dim0OffsetFieldNumber = 2;
        private int dim0Offset_;
        /// <summary>
        /// Offset in dimension 0 for this feature copy. Must be between 0 and
        /// layout.output(tensor_index).dim0_size_per_sample().
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Dim0Offset {
          get { return dim0Offset_; }
          set {
            dim0Offset_ = value;
          }
        }

        /// <summary>Field number for the "dim1_offset" field.</summary>
        public const int Dim1OffsetFieldNumber = 3;
        private int dim1Offset_;
        /// <summary>
        /// Offset in dimension 1 for this feature copy. Must be between 0 and
        /// layout.output(tensor_index).dim1_size() - table width; repeated or
        /// partially/fully overlapping values are allowed and results in the same
        /// range will be summed (with the gradients replicated in the backward
        /// pass).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Dim1Offset {
          get { return dim1Offset_; }
          set {
            dim1Offset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OutputLocation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OutputLocation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TensorIndex != other.TensorIndex) return false;
          if (Dim0Offset != other.Dim0Offset) return false;
          if (Dim1Offset != other.Dim1Offset) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TensorIndex != 0) hash ^= TensorIndex.GetHashCode();
          if (Dim0Offset != 0) hash ^= Dim0Offset.GetHashCode();
          if (Dim1Offset != 0) hash ^= Dim1Offset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TensorIndex != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TensorIndex);
          }
          if (Dim0Offset != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Dim0Offset);
          }
          if (Dim1Offset != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Dim1Offset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TensorIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TensorIndex);
          }
          if (Dim0Offset != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dim0Offset);
          }
          if (Dim1Offset != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dim1Offset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OutputLocation other) {
          if (other == null) {
            return;
          }
          if (other.TensorIndex != 0) {
            TensorIndex = other.TensorIndex;
          }
          if (other.Dim0Offset != 0) {
            Dim0Offset = other.Dim0Offset;
          }
          if (other.Dim1Offset != 0) {
            Dim1Offset = other.Dim1Offset;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TensorIndex = input.ReadInt32();
                break;
              }
              case 16: {
                Dim0Offset = input.ReadInt32();
                break;
              }
              case 24: {
                Dim1Offset = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Description of the output placement for one feature.
      /// </summary>
      public sealed partial class FeatureDescriptor : pb::IMessage<FeatureDescriptor> {
        private static readonly pb::MessageParser<FeatureDescriptor> _parser = new pb::MessageParser<FeatureDescriptor>(() => new FeatureDescriptor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FeatureDescriptor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureDescriptor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureDescriptor(FeatureDescriptor other) : this() {
          outputLocation_ = other.outputLocation_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FeatureDescriptor Clone() {
          return new FeatureDescriptor(this);
        }

        /// <summary>Field number for the "output_location" field.</summary>
        public const int OutputLocationFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.OutputLocation> _repeated_outputLocation_codec
            = pb::FieldCodec.ForMessage(10, global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.OutputLocation.Parser);
        private readonly pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.OutputLocation> outputLocation_ = new pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.OutputLocation>();
        /// <summary>
        /// Typically, only one copy of each feature is used, but multiple are
        /// allowed and the same data will be copied to all of them (with the
        /// gradients summed in the backward pass).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.OutputLocation> OutputLocation {
          get { return outputLocation_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FeatureDescriptor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FeatureDescriptor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!outputLocation_.Equals(other.outputLocation_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= outputLocation_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          outputLocation_.WriteTo(output, _repeated_outputLocation_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += outputLocation_.CalculateSize(_repeated_outputLocation_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FeatureDescriptor other) {
          if (other == null) {
            return;
          }
          outputLocation_.Add(other.outputLocation_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                outputLocation_.AddEntriesFrom(input, _repeated_outputLocation_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Description of the output placement for features of one table.
      /// </summary>
      public sealed partial class TableDescriptor : pb::IMessage<TableDescriptor> {
        private static readonly pb::MessageParser<TableDescriptor> _parser = new pb::MessageParser<TableDescriptor>(() => new TableDescriptor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TableDescriptor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDescriptor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDescriptor(TableDescriptor other) : this() {
          feature_ = other.feature_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDescriptor Clone() {
          return new TableDescriptor(this);
        }

        /// <summary>Field number for the "feature" field.</summary>
        public const int FeatureFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.FeatureDescriptor> _repeated_feature_codec
            = pb::FieldCodec.ForMessage(10, global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.FeatureDescriptor.Parser);
        private readonly pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.FeatureDescriptor> feature_ = new pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.FeatureDescriptor>();
        /// <summary>
        /// Output locations for each feature loaded from this table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.FeatureDescriptor> Feature {
          get { return feature_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TableDescriptor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TableDescriptor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!feature_.Equals(other.feature_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= feature_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          feature_.WriteTo(output, _repeated_feature_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += feature_.CalculateSize(_repeated_feature_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TableDescriptor other) {
          if (other == null) {
            return;
          }
          feature_.Add(other.feature_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                feature_.AddEntriesFrom(input, _repeated_feature_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Size and layout information for 2-D tensors.
      /// </summary>
      public sealed partial class TwoDOutputTensor : pb::IMessage<TwoDOutputTensor> {
        private static readonly pb::MessageParser<TwoDOutputTensor> _parser = new pb::MessageParser<TwoDOutputTensor>(() => new TwoDOutputTensor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TwoDOutputTensor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TwoDOutputTensor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TwoDOutputTensor(TwoDOutputTensor other) : this() {
          dim0SizePerSample_ = other.dim0SizePerSample_;
          dim1Size_ = other.dim1Size_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TwoDOutputTensor Clone() {
          return new TwoDOutputTensor(this);
        }

        /// <summary>Field number for the "dim0_size_per_sample" field.</summary>
        public const int Dim0SizePerSampleFieldNumber = 2;
        private int dim0SizePerSample_;
        /// <summary>
        /// Multiplier for output dimension 0 size; used to match legacy format that
        /// stacks features within a sample in dimension 0.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Dim0SizePerSample {
          get { return dim0SizePerSample_; }
          set {
            dim0SizePerSample_ = value;
          }
        }

        /// <summary>Field number for the "dim1_size" field.</summary>
        public const int Dim1SizeFieldNumber = 1;
        private int dim1Size_;
        /// <summary>
        /// The size (in dimension 1) of this output tensor.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Dim1Size {
          get { return dim1Size_; }
          set {
            dim1Size_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TwoDOutputTensor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TwoDOutputTensor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Dim0SizePerSample != other.Dim0SizePerSample) return false;
          if (Dim1Size != other.Dim1Size) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Dim0SizePerSample != 0) hash ^= Dim0SizePerSample.GetHashCode();
          if (Dim1Size != 0) hash ^= Dim1Size.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Dim1Size != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Dim1Size);
          }
          if (Dim0SizePerSample != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Dim0SizePerSample);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Dim0SizePerSample != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dim0SizePerSample);
          }
          if (Dim1Size != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dim1Size);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TwoDOutputTensor other) {
          if (other == null) {
            return;
          }
          if (other.Dim0SizePerSample != 0) {
            Dim0SizePerSample = other.Dim0SizePerSample;
          }
          if (other.Dim1Size != 0) {
            Dim1Size = other.Dim1Size;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Dim1Size = input.ReadInt32();
                break;
              }
              case 16: {
                Dim0SizePerSample = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Format information for a single output tensor.
      /// </summary>
      public sealed partial class EmbeddingOutputTensor : pb::IMessage<EmbeddingOutputTensor> {
        private static readonly pb::MessageParser<EmbeddingOutputTensor> _parser = new pb::MessageParser<EmbeddingOutputTensor>(() => new EmbeddingOutputTensor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmbeddingOutputTensor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddingOutputTensor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddingOutputTensor(EmbeddingOutputTensor other) : this() {
          switch (other.OutputFormatCase) {
            case OutputFormatOneofCase.TwoD:
              TwoD = other.TwoD.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddingOutputTensor Clone() {
          return new EmbeddingOutputTensor(this);
        }

        /// <summary>Field number for the "two_d" field.</summary>
        public const int TwoDFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TwoDOutputTensor TwoD {
          get { return outputFormatCase_ == OutputFormatOneofCase.TwoD ? (global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TwoDOutputTensor) outputFormat_ : null; }
          set {
            outputFormat_ = value;
            outputFormatCase_ = value == null ? OutputFormatOneofCase.None : OutputFormatOneofCase.TwoD;
          }
        }

        private object outputFormat_;
        /// <summary>Enum of possible cases for the "output_format" oneof.</summary>
        public enum OutputFormatOneofCase {
          None = 0,
          TwoD = 4,
        }
        private OutputFormatOneofCase outputFormatCase_ = OutputFormatOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutputFormatOneofCase OutputFormatCase {
          get { return outputFormatCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOutputFormat() {
          outputFormatCase_ = OutputFormatOneofCase.None;
          outputFormat_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmbeddingOutputTensor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmbeddingOutputTensor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TwoD, other.TwoD)) return false;
          if (OutputFormatCase != other.OutputFormatCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (outputFormatCase_ == OutputFormatOneofCase.TwoD) hash ^= TwoD.GetHashCode();
          hash ^= (int) outputFormatCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (outputFormatCase_ == OutputFormatOneofCase.TwoD) {
            output.WriteRawTag(34);
            output.WriteMessage(TwoD);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (outputFormatCase_ == OutputFormatOneofCase.TwoD) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TwoD);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmbeddingOutputTensor other) {
          if (other == null) {
            return;
          }
          switch (other.OutputFormatCase) {
            case OutputFormatOneofCase.TwoD:
              if (TwoD == null) {
                TwoD = new global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TwoDOutputTensor();
              }
              TwoD.MergeFrom(other.TwoD);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 34: {
                global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TwoDOutputTensor subBuilder = new global::Tensorflow.Tpu.TPUEmbeddingOutputLayout.Types.TwoDOutputTensor();
                if (outputFormatCase_ == OutputFormatOneofCase.TwoD) {
                  subBuilder.MergeFrom(TwoD);
                }
                input.ReadMessage(subBuilder);
                TwoD = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
