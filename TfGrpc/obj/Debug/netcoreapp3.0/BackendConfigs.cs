// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/compiler/xla/service/gpu/backend_configs.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xla.Gpu {

  /// <summary>Holder for reflection information generated from tensorflow/compiler/xla/service/gpu/backend_configs.proto</summary>
  public static partial class BackendConfigsReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/compiler/xla/service/gpu/backend_configs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BackendConfigsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjl0ZW5zb3JmbG93L2NvbXBpbGVyL3hsYS9zZXJ2aWNlL2dwdS9iYWNrZW5k",
            "X2NvbmZpZ3MucHJvdG8SB3hsYS5ncHUaJnRlbnNvcmZsb3cvY29tcGlsZXIv",
            "eGxhL3hsYV9kYXRhLnByb3RvIpUBChZDdWRubkNvbnZCYWNrZW5kQ29uZmln",
            "EhEKCWFsZ29yaXRobRgBIAEoAxIaChJ0ZW5zb3Jfb3BzX2VuYWJsZWQYAiAB",
            "KAgSGQoRY29udl9yZXN1bHRfc2NhbGUYBCABKAESFwoPYWN0aXZhdGlvbl9t",
            "b2RlGAMgASgDEhgKEHNpZGVfaW5wdXRfc2NhbGUYBSABKAEiwQEKEUdlbW1C",
            "YWNrZW5kQ29uZmlnEhwKEnNlbGVjdGVkX2FsZ29yaXRobRgBIAEoA0gAEhIK",
            "CmFscGhhX3JlYWwYAiABKAESEgoKYWxwaGFfaW1hZxgJIAEoARIMCgRiZXRh",
            "GAMgASgBEjcKFWRvdF9kaW1lbnNpb25fbnVtYmVycxgHIAEoCzIYLnhsYS5E",
            "b3REaW1lbnNpb25OdW1iZXJzEhIKCmJhdGNoX3NpemUYCCABKANCCwoJYWxn",
            "b3JpdGhtYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Xla.XlaDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.Gpu.CudnnConvBackendConfig), global::Xla.Gpu.CudnnConvBackendConfig.Parser, new[]{ "Algorithm", "TensorOpsEnabled", "ConvResultScale", "ActivationMode", "SideInputScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xla.Gpu.GemmBackendConfig), global::Xla.Gpu.GemmBackendConfig.Parser, new[]{ "SelectedAlgorithm", "AlphaReal", "AlphaImag", "Beta", "DotDimensionNumbers", "BatchSize" }, new[]{ "Algorithm" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Backend config for a convolution that runs through cudnn.
  /// </summary>
  public sealed partial class CudnnConvBackendConfig : pb::IMessage<CudnnConvBackendConfig> {
    private static readonly pb::MessageParser<CudnnConvBackendConfig> _parser = new pb::MessageParser<CudnnConvBackendConfig>(() => new CudnnConvBackendConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CudnnConvBackendConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.Gpu.BackendConfigsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CudnnConvBackendConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CudnnConvBackendConfig(CudnnConvBackendConfig other) : this() {
      algorithm_ = other.algorithm_;
      tensorOpsEnabled_ = other.tensorOpsEnabled_;
      convResultScale_ = other.convResultScale_;
      activationMode_ = other.activationMode_;
      sideInputScale_ = other.sideInputScale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CudnnConvBackendConfig Clone() {
      return new CudnnConvBackendConfig(this);
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 1;
    private long algorithm_;
    /// <summary>
    /// Opaque algorithm number of cudnn algorithm chosen for this conv.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Algorithm {
      get { return algorithm_; }
      set {
        algorithm_ = value;
      }
    }

    /// <summary>Field number for the "tensor_ops_enabled" field.</summary>
    public const int TensorOpsEnabledFieldNumber = 2;
    private bool tensorOpsEnabled_;
    /// <summary>
    /// Whether we may use tensor cores when running this conv.  Even if this is
    /// true, cudnn may choose not to use tensor cores, e.g. because the GPU or
    /// selected algorithm doesn't support it.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TensorOpsEnabled {
      get { return tensorOpsEnabled_; }
      set {
        tensorOpsEnabled_ = value;
      }
    }

    /// <summary>Field number for the "conv_result_scale" field.</summary>
    public const int ConvResultScaleFieldNumber = 4;
    private double convResultScale_;
    /// <summary>
    /// The scaling factor multiplied with the convolution result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ConvResultScale {
      get { return convResultScale_; }
      set {
        convResultScale_ = value;
      }
    }

    /// <summary>Field number for the "activation_mode" field.</summary>
    public const int ActivationModeFieldNumber = 3;
    private long activationMode_;
    /// <summary>
    /// The requested activation (e.g. relu) after the convolution. It is with type
    /// stream_executor::dnn::ActivationMode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActivationMode {
      get { return activationMode_; }
      set {
        activationMode_ = value;
      }
    }

    /// <summary>Field number for the "side_input_scale" field.</summary>
    public const int SideInputScaleFieldNumber = 5;
    private double sideInputScale_;
    /// <summary>
    /// The scaling factor multiplied with the side input. If no side input buffer
    /// is provided, this field must be 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SideInputScale {
      get { return sideInputScale_; }
      set {
        sideInputScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CudnnConvBackendConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CudnnConvBackendConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Algorithm != other.Algorithm) return false;
      if (TensorOpsEnabled != other.TensorOpsEnabled) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ConvResultScale, other.ConvResultScale)) return false;
      if (ActivationMode != other.ActivationMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SideInputScale, other.SideInputScale)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Algorithm != 0L) hash ^= Algorithm.GetHashCode();
      if (TensorOpsEnabled != false) hash ^= TensorOpsEnabled.GetHashCode();
      if (ConvResultScale != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ConvResultScale);
      if (ActivationMode != 0L) hash ^= ActivationMode.GetHashCode();
      if (SideInputScale != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SideInputScale);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Algorithm != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Algorithm);
      }
      if (TensorOpsEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(TensorOpsEnabled);
      }
      if (ActivationMode != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ActivationMode);
      }
      if (ConvResultScale != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ConvResultScale);
      }
      if (SideInputScale != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SideInputScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Algorithm != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Algorithm);
      }
      if (TensorOpsEnabled != false) {
        size += 1 + 1;
      }
      if (ConvResultScale != 0D) {
        size += 1 + 8;
      }
      if (ActivationMode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivationMode);
      }
      if (SideInputScale != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CudnnConvBackendConfig other) {
      if (other == null) {
        return;
      }
      if (other.Algorithm != 0L) {
        Algorithm = other.Algorithm;
      }
      if (other.TensorOpsEnabled != false) {
        TensorOpsEnabled = other.TensorOpsEnabled;
      }
      if (other.ConvResultScale != 0D) {
        ConvResultScale = other.ConvResultScale;
      }
      if (other.ActivationMode != 0L) {
        ActivationMode = other.ActivationMode;
      }
      if (other.SideInputScale != 0D) {
        SideInputScale = other.SideInputScale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Algorithm = input.ReadInt64();
            break;
          }
          case 16: {
            TensorOpsEnabled = input.ReadBool();
            break;
          }
          case 24: {
            ActivationMode = input.ReadInt64();
            break;
          }
          case 33: {
            ConvResultScale = input.ReadDouble();
            break;
          }
          case 41: {
            SideInputScale = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Backend config for the GEMM operation running through cuBLAS.
  /// </summary>
  public sealed partial class GemmBackendConfig : pb::IMessage<GemmBackendConfig> {
    private static readonly pb::MessageParser<GemmBackendConfig> _parser = new pb::MessageParser<GemmBackendConfig>(() => new GemmBackendConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GemmBackendConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xla.Gpu.BackendConfigsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemmBackendConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemmBackendConfig(GemmBackendConfig other) : this() {
      alphaReal_ = other.alphaReal_;
      alphaImag_ = other.alphaImag_;
      beta_ = other.beta_;
      dotDimensionNumbers_ = other.dotDimensionNumbers_ != null ? other.dotDimensionNumbers_.Clone() : null;
      batchSize_ = other.batchSize_;
      switch (other.AlgorithmCase) {
        case AlgorithmOneofCase.SelectedAlgorithm:
          SelectedAlgorithm = other.SelectedAlgorithm;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GemmBackendConfig Clone() {
      return new GemmBackendConfig(this);
    }

    /// <summary>Field number for the "selected_algorithm" field.</summary>
    public const int SelectedAlgorithmFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelectedAlgorithm {
      get { return algorithmCase_ == AlgorithmOneofCase.SelectedAlgorithm ? (long) algorithm_ : 0L; }
      set {
        algorithm_ = value;
        algorithmCase_ = AlgorithmOneofCase.SelectedAlgorithm;
      }
    }

    /// <summary>Field number for the "alpha_real" field.</summary>
    public const int AlphaRealFieldNumber = 2;
    private double alphaReal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AlphaReal {
      get { return alphaReal_; }
      set {
        alphaReal_ = value;
      }
    }

    /// <summary>Field number for the "alpha_imag" field.</summary>
    public const int AlphaImagFieldNumber = 9;
    private double alphaImag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AlphaImag {
      get { return alphaImag_; }
      set {
        alphaImag_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 3;
    private double beta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "dot_dimension_numbers" field.</summary>
    public const int DotDimensionNumbersFieldNumber = 7;
    private global::Xla.DotDimensionNumbers dotDimensionNumbers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Xla.DotDimensionNumbers DotDimensionNumbers {
      get { return dotDimensionNumbers_; }
      set {
        dotDimensionNumbers_ = value;
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 8;
    private long batchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    private object algorithm_;
    /// <summary>Enum of possible cases for the "algorithm" oneof.</summary>
    public enum AlgorithmOneofCase {
      None = 0,
      SelectedAlgorithm = 1,
    }
    private AlgorithmOneofCase algorithmCase_ = AlgorithmOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlgorithmOneofCase AlgorithmCase {
      get { return algorithmCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAlgorithm() {
      algorithmCase_ = AlgorithmOneofCase.None;
      algorithm_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GemmBackendConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GemmBackendConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelectedAlgorithm != other.SelectedAlgorithm) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AlphaReal, other.AlphaReal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AlphaImag, other.AlphaImag)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (!object.Equals(DotDimensionNumbers, other.DotDimensionNumbers)) return false;
      if (BatchSize != other.BatchSize) return false;
      if (AlgorithmCase != other.AlgorithmCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (algorithmCase_ == AlgorithmOneofCase.SelectedAlgorithm) hash ^= SelectedAlgorithm.GetHashCode();
      if (AlphaReal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AlphaReal);
      if (AlphaImag != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AlphaImag);
      if (Beta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Beta);
      if (dotDimensionNumbers_ != null) hash ^= DotDimensionNumbers.GetHashCode();
      if (BatchSize != 0L) hash ^= BatchSize.GetHashCode();
      hash ^= (int) algorithmCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (algorithmCase_ == AlgorithmOneofCase.SelectedAlgorithm) {
        output.WriteRawTag(8);
        output.WriteInt64(SelectedAlgorithm);
      }
      if (AlphaReal != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AlphaReal);
      }
      if (Beta != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Beta);
      }
      if (dotDimensionNumbers_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DotDimensionNumbers);
      }
      if (BatchSize != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(BatchSize);
      }
      if (AlphaImag != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(AlphaImag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (algorithmCase_ == AlgorithmOneofCase.SelectedAlgorithm) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelectedAlgorithm);
      }
      if (AlphaReal != 0D) {
        size += 1 + 8;
      }
      if (AlphaImag != 0D) {
        size += 1 + 8;
      }
      if (Beta != 0D) {
        size += 1 + 8;
      }
      if (dotDimensionNumbers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DotDimensionNumbers);
      }
      if (BatchSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BatchSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GemmBackendConfig other) {
      if (other == null) {
        return;
      }
      if (other.AlphaReal != 0D) {
        AlphaReal = other.AlphaReal;
      }
      if (other.AlphaImag != 0D) {
        AlphaImag = other.AlphaImag;
      }
      if (other.Beta != 0D) {
        Beta = other.Beta;
      }
      if (other.dotDimensionNumbers_ != null) {
        if (dotDimensionNumbers_ == null) {
          DotDimensionNumbers = new global::Xla.DotDimensionNumbers();
        }
        DotDimensionNumbers.MergeFrom(other.DotDimensionNumbers);
      }
      if (other.BatchSize != 0L) {
        BatchSize = other.BatchSize;
      }
      switch (other.AlgorithmCase) {
        case AlgorithmOneofCase.SelectedAlgorithm:
          SelectedAlgorithm = other.SelectedAlgorithm;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SelectedAlgorithm = input.ReadInt64();
            break;
          }
          case 17: {
            AlphaReal = input.ReadDouble();
            break;
          }
          case 25: {
            Beta = input.ReadDouble();
            break;
          }
          case 58: {
            if (dotDimensionNumbers_ == null) {
              DotDimensionNumbers = new global::Xla.DotDimensionNumbers();
            }
            input.ReadMessage(DotDimensionNumbers);
            break;
          }
          case 64: {
            BatchSize = input.ReadInt64();
            break;
          }
          case 73: {
            AlphaImag = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
