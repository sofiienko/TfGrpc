// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/compiler/tf2xla/tf2xla.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Tf2Xla {

  /// <summary>Holder for reflection information generated from tensorflow/compiler/tf2xla/tf2xla.proto</summary>
  public static partial class Tf2XlaReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/compiler/tf2xla/tf2xla.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Tf2XlaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cid0ZW5zb3JmbG93L2NvbXBpbGVyL3RmMnhsYS90ZjJ4bGEucHJvdG8SEXRl",
            "bnNvcmZsb3cudGYyeGxhGix0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3JrL3Rl",
            "bnNvcl9zaGFwZS5wcm90bxoldGVuc29yZmxvdy9jb3JlL2ZyYW1ld29yay90",
            "eXBlcy5wcm90byIzCghUZW5zb3JJZBIRCglub2RlX25hbWUYASABKAkSFAoM",
            "b3V0cHV0X2luZGV4GAIgASgDIo4BCgRGZWVkEicKAmlkGAEgASgLMhsudGVu",
            "c29yZmxvdy50ZjJ4bGEuVGVuc29ySWQSKwoFc2hhcGUYAiABKAsyHC50ZW5z",
            "b3JmbG93LlRlbnNvclNoYXBlUHJvdG8SDAoEbmFtZRgDIAEoCRIiCgR0eXBl",
            "GAQgASgOMhQudGVuc29yZmxvdy5EYXRhVHlwZSKPAQoFRmV0Y2gSJwoCaWQY",
            "ASABKAsyGy50ZW5zb3JmbG93LnRmMnhsYS5UZW5zb3JJZBIMCgRuYW1lGAIg",
            "ASgJEisKBXNoYXBlGAMgASgLMhwudGVuc29yZmxvdy5UZW5zb3JTaGFwZVBy",
            "b3RvEiIKBHR5cGUYBCABKA4yFC50ZW5zb3JmbG93LkRhdGFUeXBlIo4BCghW",
            "YXJpYWJsZRIRCglub2RlX25hbWUYASABKAkSDAoEbmFtZRgCIAEoCRIrCgVz",
            "aGFwZRgDIAEoCzIcLnRlbnNvcmZsb3cuVGVuc29yU2hhcGVQcm90bxIiCgR0",
            "eXBlGAQgASgOMhQudGVuc29yZmxvdy5EYXRhVHlwZRIQCghyZWFkb25seRgF",
            "IAEoCCI3ChFDb252ZXJzaW9uT3B0aW9ucxIiChpjdXN0b21fZmFrZV9xdWFu",
            "dF9vcF9jYWxscxgBIAEoCCLJAQoGQ29uZmlnEiUKBGZlZWQYASADKAsyFy50",
            "ZW5zb3JmbG93LnRmMnhsYS5GZWVkEicKBWZldGNoGAIgAygLMhgudGVuc29y",
            "Zmxvdy50ZjJ4bGEuRmV0Y2gSLQoIdmFyaWFibGUYAyADKAsyGy50ZW5zb3Jm",
            "bG93LnRmMnhsYS5WYXJpYWJsZRJAChJjb252ZXJzaW9uX29wdGlvbnMYBCAB",
            "KAsyJC50ZW5zb3JmbG93LnRmMnhsYS5Db252ZXJzaW9uT3B0aW9uc0IqChVv",
            "cmcudGVuc29yZmxvdy50ZjJ4bGFCDFRmMlhsYVByb3Rvc1AB+AEBYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.TensorShapeReflection.Descriptor, global::Tensorflow.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.TensorId), global::Tensorflow.Tf2Xla.TensorId.Parser, new[]{ "NodeName", "OutputIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.Feed), global::Tensorflow.Tf2Xla.Feed.Parser, new[]{ "Id", "Shape", "Name", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.Fetch), global::Tensorflow.Tf2Xla.Fetch.Parser, new[]{ "Id", "Name", "Shape", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.Variable), global::Tensorflow.Tf2Xla.Variable.Parser, new[]{ "NodeName", "Name", "Shape", "Type", "Readonly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.ConversionOptions), global::Tensorflow.Tf2Xla.ConversionOptions.Parser, new[]{ "CustomFakeQuantOpCalls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.Config), global::Tensorflow.Tf2Xla.Config.Parser, new[]{ "Feed", "Fetch", "Variable", "ConversionOptions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// TensorId identifies a tensor in a TensorFlow graph, by specifying the output
  /// index of a particular node in the graph.  If the output of the named node
  /// feeds into other node(s), this corresponds to one or more edges.  Otherwise
  /// it doesn't correspond to any existing edges at all, e.g. for output nodes.
  /// </summary>
  public sealed partial class TensorId : pb::IMessage<TensorId> {
    private static readonly pb::MessageParser<TensorId> _parser = new pb::MessageParser<TensorId>(() => new TensorId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TensorId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.Tf2XlaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorId(TensorId other) : this() {
      nodeName_ = other.nodeName_;
      outputIndex_ = other.outputIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorId Clone() {
      return new TensorId(this);
    }

    /// <summary>Field number for the "node_name" field.</summary>
    public const int NodeNameFieldNumber = 1;
    private string nodeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeName {
      get { return nodeName_; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 2;
    private long outputIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TensorId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TensorId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeName != other.NodeName) return false;
      if (OutputIndex != other.OutputIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
      if (OutputIndex != 0L) hash ^= OutputIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeName);
      }
      if (OutputIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (OutputIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutputIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TensorId other) {
      if (other == null) {
        return;
      }
      if (other.NodeName.Length != 0) {
        NodeName = other.NodeName;
      }
      if (other.OutputIndex != 0L) {
        OutputIndex = other.OutputIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeName = input.ReadString();
            break;
          }
          case 16: {
            OutputIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Feed represents a single feed tensor in the graph, which corresponds to an
  /// input argument for the generated computation.
  /// </summary>
  public sealed partial class Feed : pb::IMessage<Feed> {
    private static readonly pb::MessageParser<Feed> _parser = new pb::MessageParser<Feed>(() => new Feed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Feed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.Tf2XlaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feed(Feed other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      name_ = other.name_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feed Clone() {
      return new Feed(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Tensorflow.Tf2Xla.TensorId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tf2Xla.TensorId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 2;
    private global::Tensorflow.TensorShapeProto shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorShapeProto Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Optional name for generated code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Tensorflow.DataType type_ = 0;
    /// <summary>
    /// Optional data type. This is not normally required, as the graph itself
    /// contains this information. However, if the node being fed is an op that is
    /// not linked into the binary, then the type cannot be inferred from the node;
    /// in this case, the type should be set here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Feed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Feed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Shape, other.Shape)) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (shape_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Shape);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Feed other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Tensorflow.Tf2Xla.TensorId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          Shape = new global::Tensorflow.TensorShapeProto();
        }
        Shape.MergeFrom(other.Shape);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Tensorflow.Tf2Xla.TensorId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (shape_ == null) {
              Shape = new global::Tensorflow.TensorShapeProto();
            }
            input.ReadMessage(Shape);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::Tensorflow.DataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Fetch represents a single fetch tensor in the graph, which corresponds to an
  /// output argument for the generated computation.
  /// </summary>
  public sealed partial class Fetch : pb::IMessage<Fetch> {
    private static readonly pb::MessageParser<Fetch> _parser = new pb::MessageParser<Fetch>(() => new Fetch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Fetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.Tf2XlaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fetch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fetch(Fetch other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      name_ = other.name_;
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fetch Clone() {
      return new Fetch(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Tensorflow.Tf2Xla.TensorId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tf2Xla.TensorId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Optional name for generated code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 3;
    private global::Tensorflow.TensorShapeProto shape_;
    /// <summary>
    /// Optional shape and data type. If specified, may be used for validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorShapeProto Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Tensorflow.DataType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Fetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Fetch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Shape, other.Shape)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (shape_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Shape);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Fetch other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Tensorflow.Tf2Xla.TensorId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          Shape = new global::Tensorflow.TensorShapeProto();
        }
        Shape.MergeFrom(other.Shape);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Tensorflow.Tf2Xla.TensorId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (shape_ == null) {
              Shape = new global::Tensorflow.TensorShapeProto();
            }
            input.ReadMessage(Shape);
            break;
          }
          case 32: {
            Type = (global::Tensorflow.DataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Variable represents a resource variable with the given name, shape and type.
  /// </summary>
  public sealed partial class Variable : pb::IMessage<Variable> {
    private static readonly pb::MessageParser<Variable> _parser = new pb::MessageParser<Variable>(() => new Variable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.Tf2XlaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable(Variable other) : this() {
      nodeName_ = other.nodeName_;
      name_ = other.name_;
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      type_ = other.type_;
      readonly_ = other.readonly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable Clone() {
      return new Variable(this);
    }

    /// <summary>Field number for the "node_name" field.</summary>
    public const int NodeNameFieldNumber = 1;
    private string nodeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeName {
      get { return nodeName_; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Optional name for generated code. If empty, node_name will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 3;
    private global::Tensorflow.TensorShapeProto shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorShapeProto Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Tensorflow.DataType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "readonly" field.</summary>
    public const int ReadonlyFieldNumber = 5;
    private bool readonly_;
    /// <summary>
    /// Flag for variables that are never assigned. Assigments to a read-only
    /// variable or unassigned variables that are not read-only are invalid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Readonly {
      get { return readonly_; }
      set {
        readonly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeName != other.NodeName) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Shape, other.Shape)) return false;
      if (Type != other.Type) return false;
      if (Readonly != other.Readonly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Readonly != false) hash ^= Readonly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeName);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (shape_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Shape);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Readonly != false) {
        output.WriteRawTag(40);
        output.WriteBool(Readonly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Readonly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variable other) {
      if (other == null) {
        return;
      }
      if (other.NodeName.Length != 0) {
        NodeName = other.NodeName;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          Shape = new global::Tensorflow.TensorShapeProto();
        }
        Shape.MergeFrom(other.Shape);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Readonly != false) {
        Readonly = other.Readonly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeName = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (shape_ == null) {
              Shape = new global::Tensorflow.TensorShapeProto();
            }
            input.ReadMessage(Shape);
            break;
          }
          case 32: {
            Type = (global::Tensorflow.DataType) input.ReadEnum();
            break;
          }
          case 40: {
            Readonly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Options used during the conversion and compilation process.
  /// </summary>
  public sealed partial class ConversionOptions : pb::IMessage<ConversionOptions> {
    private static readonly pb::MessageParser<ConversionOptions> _parser = new pb::MessageParser<ConversionOptions>(() => new ConversionOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversionOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.Tf2XlaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionOptions(ConversionOptions other) : this() {
      customFakeQuantOpCalls_ = other.customFakeQuantOpCalls_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversionOptions Clone() {
      return new ConversionOptions(this);
    }

    /// <summary>Field number for the "custom_fake_quant_op_calls" field.</summary>
    public const int CustomFakeQuantOpCallsFieldNumber = 1;
    private bool customFakeQuantOpCalls_;
    /// <summary>
    /// When true tf.fake_quant_* ops will be emitted as custom calls to a
    /// 'fake_quant_with_min_max_vars' function accepting the input, min, max,
    /// num_bits, and narrow_range values as runtime arguments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CustomFakeQuantOpCalls {
      get { return customFakeQuantOpCalls_; }
      set {
        customFakeQuantOpCalls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversionOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversionOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomFakeQuantOpCalls != other.CustomFakeQuantOpCalls) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomFakeQuantOpCalls != false) hash ^= CustomFakeQuantOpCalls.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomFakeQuantOpCalls != false) {
        output.WriteRawTag(8);
        output.WriteBool(CustomFakeQuantOpCalls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomFakeQuantOpCalls != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversionOptions other) {
      if (other == null) {
        return;
      }
      if (other.CustomFakeQuantOpCalls != false) {
        CustomFakeQuantOpCalls = other.CustomFakeQuantOpCalls;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CustomFakeQuantOpCalls = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Config represents configuration information for tf2xla conversion.
  /// </summary>
  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.Tf2XlaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      feed_ = other.feed_.Clone();
      fetch_ = other.fetch_.Clone();
      variable_ = other.variable_.Clone();
      conversionOptions_ = other.conversionOptions_ != null ? other.conversionOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "feed" field.</summary>
    public const int FeedFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.Tf2Xla.Feed> _repeated_feed_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.Tf2Xla.Feed.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tf2Xla.Feed> feed_ = new pbc::RepeatedField<global::Tensorflow.Tf2Xla.Feed>();
    /// <summary>
    /// Each feed is a positional input argument for the generated computation.
    /// The order of each entry matches the order of each input argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tf2Xla.Feed> Feed {
      get { return feed_; }
    }

    /// <summary>Field number for the "fetch" field.</summary>
    public const int FetchFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.Tf2Xla.Fetch> _repeated_fetch_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.Tf2Xla.Fetch.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tf2Xla.Fetch> fetch_ = new pbc::RepeatedField<global::Tensorflow.Tf2Xla.Fetch>();
    /// <summary>
    /// Each fetch is a positional output argument for the generated computation.
    /// The order of each entry matches the order of each output argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tf2Xla.Fetch> Fetch {
      get { return fetch_; }
    }

    /// <summary>Field number for the "variable" field.</summary>
    public const int VariableFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tensorflow.Tf2Xla.Variable> _repeated_variable_codec
        = pb::FieldCodec.ForMessage(26, global::Tensorflow.Tf2Xla.Variable.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tf2Xla.Variable> variable_ = new pbc::RepeatedField<global::Tensorflow.Tf2Xla.Variable>();
    /// <summary>
    /// Each variable is a named input and output of the generated computation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tf2Xla.Variable> Variable {
      get { return variable_; }
    }

    /// <summary>Field number for the "conversion_options" field.</summary>
    public const int ConversionOptionsFieldNumber = 4;
    private global::Tensorflow.Tf2Xla.ConversionOptions conversionOptions_;
    /// <summary>
    /// Optional conversion options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tf2Xla.ConversionOptions ConversionOptions {
      get { return conversionOptions_; }
      set {
        conversionOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!feed_.Equals(other.feed_)) return false;
      if(!fetch_.Equals(other.fetch_)) return false;
      if(!variable_.Equals(other.variable_)) return false;
      if (!object.Equals(ConversionOptions, other.ConversionOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= feed_.GetHashCode();
      hash ^= fetch_.GetHashCode();
      hash ^= variable_.GetHashCode();
      if (conversionOptions_ != null) hash ^= ConversionOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      feed_.WriteTo(output, _repeated_feed_codec);
      fetch_.WriteTo(output, _repeated_fetch_codec);
      variable_.WriteTo(output, _repeated_variable_codec);
      if (conversionOptions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConversionOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += feed_.CalculateSize(_repeated_feed_codec);
      size += fetch_.CalculateSize(_repeated_fetch_codec);
      size += variable_.CalculateSize(_repeated_variable_codec);
      if (conversionOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversionOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      feed_.Add(other.feed_);
      fetch_.Add(other.fetch_);
      variable_.Add(other.variable_);
      if (other.conversionOptions_ != null) {
        if (conversionOptions_ == null) {
          ConversionOptions = new global::Tensorflow.Tf2Xla.ConversionOptions();
        }
        ConversionOptions.MergeFrom(other.ConversionOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            feed_.AddEntriesFrom(input, _repeated_feed_codec);
            break;
          }
          case 18: {
            fetch_.AddEntriesFrom(input, _repeated_fetch_codec);
            break;
          }
          case 26: {
            variable_.AddEntriesFrom(input, _repeated_variable_codec);
            break;
          }
          case 34: {
            if (conversionOptions_ == null) {
              ConversionOptions = new global::Tensorflow.Tf2Xla.ConversionOptions();
            }
            input.ReadMessage(ConversionOptions);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
