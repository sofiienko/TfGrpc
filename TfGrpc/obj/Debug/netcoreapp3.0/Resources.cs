// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow_serving/resources/resources.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Serving {

  /// <summary>Holder for reflection information generated from tensorflow_serving/resources/resources.proto</summary>
  public static partial class ResourcesReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow_serving/resources/resources.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResourcesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cix0ZW5zb3JmbG93X3NlcnZpbmcvcmVzb3VyY2VzL3Jlc291cmNlcy5wcm90",
            "bxISdGVuc29yZmxvdy5zZXJ2aW5nGh5nb29nbGUvcHJvdG9idWYvd3JhcHBl",
            "cnMucHJvdG8iXwoIUmVzb3VyY2USDgoGZGV2aWNlGAEgASgJEjUKD2Rldmlj",
            "ZV9pbnN0YW5jZRgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1",
            "ZRIMCgRraW5kGAMgASgJIqoBChJSZXNvdXJjZUFsbG9jYXRpb24SSQoTcmVz",
            "b3VyY2VfcXVhbnRpdGllcxgBIAMoCzIsLnRlbnNvcmZsb3cuc2VydmluZy5S",
            "ZXNvdXJjZUFsbG9jYXRpb24uRW50cnkaSQoFRW50cnkSLgoIcmVzb3VyY2UY",
            "ASABKAsyHC50ZW5zb3JmbG93LnNlcnZpbmcuUmVzb3VyY2USEAoIcXVhbnRp",
            "dHkYAiABKARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.Resource), global::Tensorflow.Serving.Resource.Parser, new[]{ "Device", "DeviceInstance", "Kind" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.ResourceAllocation), global::Tensorflow.Serving.ResourceAllocation.Parser, new[]{ "ResourceQuantities" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.ResourceAllocation.Types.Entry), global::Tensorflow.Serving.ResourceAllocation.Types.Entry.Parser, new[]{ "Resource", "Quantity" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// One kind of resource on one device (or type of device).
  /// </summary>
  public sealed partial class Resource : pb::IMessage<Resource> {
    private static readonly pb::MessageParser<Resource> _parser = new pb::MessageParser<Resource>(() => new Resource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.ResourcesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource(Resource other) : this() {
      device_ = other.device_;
      DeviceInstance = other.DeviceInstance;
      kind_ = other.kind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource Clone() {
      return new Resource(this);
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 1;
    private string device_ = "";
    /// <summary>
    /// The type of device on which the resource resides, e.g. CPU or GPU.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_instance" field.</summary>
    public const int DeviceInstanceFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_deviceInstance_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? deviceInstance_;
    /// <summary>
    /// A specific instance of the device of type 'device' to which the resources
    /// are bound (instances are assumed to be numbered 0, 1, ...).
    ///
    /// When representing the resources required by a servable that has yet to be
    /// loaded, this field is optional. If not set, it denotes that the servable's
    /// resources are not (yet) bound to a specific instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? DeviceInstance {
      get { return deviceInstance_; }
      set {
        deviceInstance_ = value;
      }
    }


    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private string kind_ = "";
    /// <summary>
    /// The kind of resource on the device (instance), e.g. RAM or compute share.
    ///
    /// A given type of resource should have a standard unit that represents the
    /// smallest useful quantization. We strongly recommend including the unit
    /// (e.g. bytes or millicores) in this string, as in "ram_bytes".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kind {
      get { return kind_; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Device != other.Device) return false;
      if (DeviceInstance != other.DeviceInstance) return false;
      if (Kind != other.Kind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (deviceInstance_ != null) hash ^= DeviceInstance.GetHashCode();
      if (Kind.Length != 0) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Device.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Device);
      }
      if (deviceInstance_ != null) {
        _single_deviceInstance_codec.WriteTagAndValue(output, DeviceInstance);
      }
      if (Kind.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (deviceInstance_ != null) {
        size += _single_deviceInstance_codec.CalculateSizeWithTag(DeviceInstance);
      }
      if (Kind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resource other) {
      if (other == null) {
        return;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.deviceInstance_ != null) {
        if (deviceInstance_ == null || other.DeviceInstance != 0) {
          DeviceInstance = other.DeviceInstance;
        }
      }
      if (other.Kind.Length != 0) {
        Kind = other.Kind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Device = input.ReadString();
            break;
          }
          case 18: {
            uint? value = _single_deviceInstance_codec.Read(input);
            if (deviceInstance_ == null || value != 0) {
              DeviceInstance = value;
            }
            break;
          }
          case 26: {
            Kind = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An allocation of one or more kinds of resources, along with the quantity of
  /// each. Used to denote the resources that a servable (or collection of
  /// servables) will use or is currently using. Also used to denote resources
  /// available to the serving system for loading more servables.
  /// </summary>
  public sealed partial class ResourceAllocation : pb::IMessage<ResourceAllocation> {
    private static readonly pb::MessageParser<ResourceAllocation> _parser = new pb::MessageParser<ResourceAllocation>(() => new ResourceAllocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceAllocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.ResourcesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceAllocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceAllocation(ResourceAllocation other) : this() {
      resourceQuantities_ = other.resourceQuantities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceAllocation Clone() {
      return new ResourceAllocation(this);
    }

    /// <summary>Field number for the "resource_quantities" field.</summary>
    public const int ResourceQuantitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.Serving.ResourceAllocation.Types.Entry> _repeated_resourceQuantities_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.Serving.ResourceAllocation.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Serving.ResourceAllocation.Types.Entry> resourceQuantities_ = new pbc::RepeatedField<global::Tensorflow.Serving.ResourceAllocation.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Serving.ResourceAllocation.Types.Entry> ResourceQuantities {
      get { return resourceQuantities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceAllocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceAllocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!resourceQuantities_.Equals(other.resourceQuantities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= resourceQuantities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceQuantities_.WriteTo(output, _repeated_resourceQuantities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceQuantities_.CalculateSize(_repeated_resourceQuantities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceAllocation other) {
      if (other == null) {
        return;
      }
      resourceQuantities_.Add(other.resourceQuantities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resourceQuantities_.AddEntriesFrom(input, _repeated_resourceQuantities_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ResourceAllocation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A collection of resources, each with a quantity. Treated as a resource->
      /// quantity map, i.e. no resource can repeat and the order is immaterial.
      /// </summary>
      public sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Serving.ResourceAllocation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          resource_ = other.resource_ != null ? other.resource_.Clone() : null;
          quantity_ = other.quantity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "resource" field.</summary>
        public const int ResourceFieldNumber = 1;
        private global::Tensorflow.Serving.Resource resource_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.Serving.Resource Resource {
          get { return resource_; }
          set {
            resource_ = value;
          }
        }

        /// <summary>Field number for the "quantity" field.</summary>
        public const int QuantityFieldNumber = 2;
        private ulong quantity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Quantity {
          get { return quantity_; }
          set {
            quantity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Resource, other.Resource)) return false;
          if (Quantity != other.Quantity) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (resource_ != null) hash ^= Resource.GetHashCode();
          if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (resource_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Resource);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (resource_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
          }
          if (Quantity != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          if (other.resource_ != null) {
            if (resource_ == null) {
              Resource = new global::Tensorflow.Serving.Resource();
            }
            Resource.MergeFrom(other.Resource);
          }
          if (other.Quantity != 0UL) {
            Quantity = other.Quantity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resource_ == null) {
                  Resource = new global::Tensorflow.Serving.Resource();
                }
                input.ReadMessage(Resource);
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
