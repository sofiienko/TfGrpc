// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/tpu/optimization_parameters.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Tpu {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/tpu/optimization_parameters.proto</summary>
  public static partial class OptimizationParametersReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/tpu/optimization_parameters.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptimizationParametersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjp0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvdHB1L29wdGltaXphdGlvbl9w",
            "YXJhbWV0ZXJzLnByb3RvEg50ZW5zb3JmbG93LnRwdRoeZ29vZ2xlL3Byb3Rv",
            "YnVmL3dyYXBwZXJzLnByb3RvImgKDkNsaXBwaW5nTGltaXRzEioKBWxvd2Vy",
            "GAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSKgoFdXBwZXIY",
            "AiABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZSIiChNEeW5hbWlj",
            "TGVhcm5pbmdSYXRlEgsKA3RhZxgBIAEoBSJrCgxMZWFybmluZ1JhdGUSEgoI",
            "Y29uc3RhbnQYASABKAJIABI2CgdkeW5hbWljGAIgASgLMiMudGVuc29yZmxv",
            "dy50cHUuRHluYW1pY0xlYXJuaW5nUmF0ZUgAQg8KDWxlYXJuaW5nX3JhdGUi",
            "MAoRQWRhZ3JhZFBhcmFtZXRlcnMSGwoTaW5pdGlhbF9hY2N1bXVsYXRvchgB",
            "IAEoAiJtChhCb3VuZGVkQWRhZ3JhZFBhcmFtZXRlcnMSIAoYdXBkYXRlX2Fj",
            "Y3VtdWxhdG9yX2ZpcnN0GAEgASgIEhYKDm1heF92YXJfdXBkYXRlGAIgASgC",
            "EhcKD21heF9hY2N1bXVsYXRvchgDIAEoAiIlCiNTdG9jaGFzdGljR3JhZGll",
            "bnREZXNjZW50UGFyYW1ldGVycyJpCg5GdHJsUGFyYW1ldGVycxIKCgJsMRgB",
            "IAEoAhIKCgJsMhgCIAEoAhIQCghscl9wb3dlchgDIAEoAhIVCg1pbml0aWFs",
            "X2FjY3VtGAQgASgCEhYKDmluaXRpYWxfbGluZWFyGAUgASgCIp0BCg5BZGFt",
            "UGFyYW1ldGVycxINCgViZXRhMRgDIAEoAhINCgViZXRhMhgEIAEoAhIPCgdl",
            "cHNpbG9uGAUgASgCEhEKCWluaXRpYWxfbRgGIAEoAhIRCglpbml0aWFsX3YY",
            "ByABKAISGQoRdXNlX25vbl9sYXp5X2FkYW0YCCABKAgSGwoTdXNlX3N1bV9p",
            "bnNpZGVfc3FydBgKIAEoCCJTChJNb21lbnR1bVBhcmFtZXRlcnMSEAoIbW9t",
            "ZW50dW0YASABKAISFAoMdXNlX25lc3Rlcm92GAIgASgIEhUKDWluaXRpYWxf",
            "YWNjdW0YAyABKAIibAoRUm1zUHJvcFBhcmFtZXRlcnMSCwoDcmhvGAEgASgC",
            "EhAKCG1vbWVudHVtGAIgASgCEg8KB2Vwc2lsb24YAyABKAISEgoKaW5pdGlh",
            "bF9tcxgEIAEoAhITCgtpbml0aWFsX21vbRgFIAEoAiKIAQoZQ2VudGVyZWRS",
            "bXNQcm9wUGFyYW1ldGVycxILCgNyaG8YASABKAISEAoIbW9tZW50dW0YAiAB",
            "KAISDwoHZXBzaWxvbhgDIAEoAhISCgppbml0aWFsX21zGAQgASgCEhMKC2lu",
            "aXRpYWxfbW9tGAUgASgCEhIKCmluaXRpYWxfbWcYBiABKAIiowMKGU1kbEFk",
            "YWdyYWRMaWdodFBhcmFtZXRlcnMSCgoCbDIYASABKAISEAoIbHJfcG93ZXIY",
            "AiABKAISIAoYbWluX3NlcnZhYmxlX21kbF9iZW5lZml0GAMgASgCEhkKEW1k",
            "bF9taXhfaW5fbWFyZ2luGAQgASgCEiAKGG1kbF9iZW5lZml0X3JhbXB1cF9j",
            "b2VmZhgFIAEoAhIWCg5tZGxfbWluX3dlaWdodBgGIAEoAhIdChViZW5lZml0",
            "X3JldmlzaXRfc2NhbGUYByABKAISGQoRbWF4X2V2ZW50X2JlbmVmaXQYCCAB",
            "KAISGQoRbWF4X3RvdGFsX2JlbmVmaXQYCSABKAISFgoObWRsX2hhcmRfbGlt",
            "aXQYCiABKAISHgoWaGFyZF9saW1pdF9taW5fYmVuZWZpdBgLIAEoCBIWCg5t",
            "ZGxfcmVndWxhcml6ZRgMIAEoCBIbChNpbml0aWFsX2FjY3VtdWxhdG9yGA0g",
            "ASgCEhYKDmluaXRpYWxfd2VpZ2h0GA4gASgCEhcKD2luaXRpYWxfYmVuZWZp",
            "dBgPIAEoAiJnChJBZGFkZWx0YVBhcmFtZXRlcnMSCwoDcmhvGAEgASgCEg8K",
            "B2Vwc2lsb24YAiABKAISGwoTaW5pdGlhbF9hY2N1bXVsYXRvchgDIAEoAhIW",
            "Cg5pbml0aWFsX3VwZGF0ZRgEIAEoAiJQChlQcm94aW1hbEFkYWdyYWRQYXJh",
            "bWV0ZXJzEgoKAmwxGAEgASgCEgoKAmwyGAIgASgCEhsKE2luaXRpYWxfYWNj",
            "dW11bGF0b3IYAyABKAIi+QEKFE9ubGluZVlvZ2lQYXJhbWV0ZXJzEgoKAmwx",
            "GAEgASgCEgoKAmwyGAIgASgCEg0KBWJldGEyGAMgASgCEkMKBHNpZ24YBiAB",
            "KAsyMy50ZW5zb3JmbG93LnRwdS5PbmxpbmVZb2dpUGFyYW1ldGVycy5TaWdu",
            "QWN0aXZhdGlvbkgAEkMKBHRhbmgYByABKAsyMy50ZW5zb3JmbG93LnRwdS5P",
            "bmxpbmVZb2dpUGFyYW1ldGVycy5UYW5oQWN0aXZhdGlvbkgAGhAKDlNpZ25B",
            "Y3RpdmF0aW9uGhAKDlRhbmhBY3RpdmF0aW9uQgwKCmFjdGl2YXRpb24inwIK",
            "FlByb3hpbWFsWW9naVBhcmFtZXRlcnMSCgoCbDEYASABKAISCgoCbDIYAiAB",
            "KAISDQoFYmV0YTEYAyABKAISDQoFYmV0YTIYBCABKAISDwoHZXBzaWxvbhgF",
            "IAEoAhJFCgRzaWduGAggASgLMjUudGVuc29yZmxvdy50cHUuUHJveGltYWxZ",
            "b2dpUGFyYW1ldGVycy5TaWduQWN0aXZhdGlvbkgAEkUKBHRhbmgYCSABKAsy",
            "NS50ZW5zb3JmbG93LnRwdS5Qcm94aW1hbFlvZ2lQYXJhbWV0ZXJzLlRhbmhB",
            "Y3RpdmF0aW9uSAAaEAoOU2lnbkFjdGl2YXRpb24aEAoOVGFuaEFjdGl2YXRp",
            "b25CDAoKYWN0aXZhdGlvbiJSChpHcmFkaWVudEFjY3VtdWxhdGlvblN0YXR1",
            "cyI0CgZTdGF0dXMSDwoLVU5TUEVDSUZJRUQQABILCgdFTkFCTEVEEAESDAoI",
            "RElTQUJMRUQQAiKbAQodSG90SWRSZXBsaWNhdGlvbkNvbmZpZ3VyYXRpb24S",
            "RAoGc3RhdHVzGAEgASgOMjQudGVuc29yZmxvdy50cHUuSG90SWRSZXBsaWNh",
            "dGlvbkNvbmZpZ3VyYXRpb24uU3RhdHVzIjQKBlN0YXR1cxIPCgtVTlNQRUNJ",
            "RklFRBAAEgsKB0VOQUJMRUQQARIMCghESVNBQkxFRBACIuQJChZPcHRpbWl6",
            "YXRpb25QYXJhbWV0ZXJzEjMKDWxlYXJuaW5nX3JhdGUYDSABKAsyHC50ZW5z",
            "b3JmbG93LnRwdS5MZWFybmluZ1JhdGUSNwoPY2xpcHBpbmdfbGltaXRzGAIg",
            "ASgLMh4udGVuc29yZmxvdy50cHUuQ2xpcHBpbmdMaW1pdHMSQAoYZ3JhZGll",
            "bnRfY2xpcHBpbmdfbGltaXRzGAcgASgLMh4udGVuc29yZmxvdy50cHUuQ2xp",
            "cHBpbmdMaW1pdHMSGwoTd2VpZ2h0X2RlY2F5X2ZhY3RvchgQIAEoAhJXChxn",
            "cmFkaWVudF9hY2N1bXVsYXRpb25fc3RhdHVzGBEgASgOMjEudGVuc29yZmxv",
            "dy50cHUuR3JhZGllbnRBY2N1bXVsYXRpb25TdGF0dXMuU3RhdHVzElcKIGhv",
            "dF9pZF9yZXBsaWNhdGlvbl9jb25maWd1cmF0aW9uGBIgASgLMi0udGVuc29y",
            "Zmxvdy50cHUuSG90SWRSZXBsaWNhdGlvbkNvbmZpZ3VyYXRpb24SNAoHYWRh",
            "Z3JhZBgDIAEoCzIhLnRlbnNvcmZsb3cudHB1LkFkYWdyYWRQYXJhbWV0ZXJz",
            "SAASQwoPYm91bmRlZF9hZGFncmFkGBMgASgLMigudGVuc29yZmxvdy50cHUu",
            "Qm91bmRlZEFkYWdyYWRQYXJhbWV0ZXJzSAASWgobc3RvY2hhc3RpY19ncmFk",
            "aWVudF9kZXNjZW50GAQgASgLMjMudGVuc29yZmxvdy50cHUuU3RvY2hhc3Rp",
            "Y0dyYWRpZW50RGVzY2VudFBhcmFtZXRlcnNIABIuCgRmdHJsGAUgASgLMh4u",
            "dGVuc29yZmxvdy50cHUuRnRybFBhcmFtZXRlcnNIABIuCgRhZGFtGAYgASgL",
            "Mh4udGVuc29yZmxvdy50cHUuQWRhbVBhcmFtZXRlcnNIABI2Cghtb21lbnR1",
            "bRgIIAEoCzIiLnRlbnNvcmZsb3cudHB1Lk1vbWVudHVtUGFyYW1ldGVyc0gA",
            "EjUKCHJtc19wcm9wGAkgASgLMiEudGVuc29yZmxvdy50cHUuUm1zUHJvcFBh",
            "cmFtZXRlcnNIABJGChFjZW50ZXJlZF9ybXNfcHJvcBgKIAEoCzIpLnRlbnNv",
            "cmZsb3cudHB1LkNlbnRlcmVkUm1zUHJvcFBhcmFtZXRlcnNIABJGChFtZGxf",
            "YWRhZ3JhZF9saWdodBgLIAEoCzIpLnRlbnNvcmZsb3cudHB1Lk1kbEFkYWdy",
            "YWRMaWdodFBhcmFtZXRlcnNIABI2CghhZGFkZWx0YRgMIAEoCzIiLnRlbnNv",
            "cmZsb3cudHB1LkFkYWRlbHRhUGFyYW1ldGVyc0gAEkUKEHByb3hpbWFsX2Fk",
            "YWdyYWQYDiABKAsyKS50ZW5zb3JmbG93LnRwdS5Qcm94aW1hbEFkYWdyYWRQ",
            "YXJhbWV0ZXJzSAASOwoLb25saW5lX3lvZ2kYFCABKAsyJC50ZW5zb3JmbG93",
            "LnRwdS5PbmxpbmVZb2dpUGFyYW1ldGVyc0gAEj8KDXByb3hpbWFsX3lvZ2kY",
            "FSABKAsyJi50ZW5zb3JmbG93LnRwdS5Qcm94aW1hbFlvZ2lQYXJhbWV0ZXJz",
            "SABCDAoKcGFyYW1ldGVyc0oECAEQAkoECA8QECK3AgoaU3RhdGVWYXJpYWJs",
            "ZVNwZWNpZmljYXRpb24SDAoEbmFtZRgBIAEoCRJOCgx1c2VyX2RlZmluZWQY",
            "AiABKAsyNi50ZW5zb3JmbG93LnRwdS5TdGF0ZVZhcmlhYmxlU3BlY2lmaWNh",
            "dGlvbi5Vc2VyRGVmaW5lZEgAElkKEmZpbGxfd2l0aF9jb25zdGFudBgDIAEo",
            "CzI7LnRlbnNvcmZsb3cudHB1LlN0YXRlVmFyaWFibGVTcGVjaWZpY2F0aW9u",
            "LkZpbGxXaXRoQ29uc3RhbnRIABosCgtVc2VyRGVmaW5lZBIdChVwYWRkaW5n",
            "X2luaXRpYWxfdmFsdWUYASABKAEaKQoQRmlsbFdpdGhDb25zdGFudBIVCg1p",
            "bml0aWFsX3ZhbHVlGAEgASgBQgcKBXVzYWdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.ClippingLimits), global::Tensorflow.Tpu.ClippingLimits.Parser, new[]{ "Lower", "Upper" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.DynamicLearningRate), global::Tensorflow.Tpu.DynamicLearningRate.Parser, new[]{ "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.LearningRate), global::Tensorflow.Tpu.LearningRate.Parser, new[]{ "Constant", "Dynamic" }, new[]{ "LearningRate" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.AdagradParameters), global::Tensorflow.Tpu.AdagradParameters.Parser, new[]{ "InitialAccumulator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.BoundedAdagradParameters), global::Tensorflow.Tpu.BoundedAdagradParameters.Parser, new[]{ "UpdateAccumulatorFirst", "MaxVarUpdate", "MaxAccumulator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.StochasticGradientDescentParameters), global::Tensorflow.Tpu.StochasticGradientDescentParameters.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.FtrlParameters), global::Tensorflow.Tpu.FtrlParameters.Parser, new[]{ "L1", "L2", "LrPower", "InitialAccum", "InitialLinear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.AdamParameters), global::Tensorflow.Tpu.AdamParameters.Parser, new[]{ "Beta1", "Beta2", "Epsilon", "InitialM", "InitialV", "UseNonLazyAdam", "UseSumInsideSqrt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.MomentumParameters), global::Tensorflow.Tpu.MomentumParameters.Parser, new[]{ "Momentum", "UseNesterov", "InitialAccum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.RmsPropParameters), global::Tensorflow.Tpu.RmsPropParameters.Parser, new[]{ "Rho", "Momentum", "Epsilon", "InitialMs", "InitialMom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.CenteredRmsPropParameters), global::Tensorflow.Tpu.CenteredRmsPropParameters.Parser, new[]{ "Rho", "Momentum", "Epsilon", "InitialMs", "InitialMom", "InitialMg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.MdlAdagradLightParameters), global::Tensorflow.Tpu.MdlAdagradLightParameters.Parser, new[]{ "L2", "LrPower", "MinServableMdlBenefit", "MdlMixInMargin", "MdlBenefitRampupCoeff", "MdlMinWeight", "BenefitRevisitScale", "MaxEventBenefit", "MaxTotalBenefit", "MdlHardLimit", "HardLimitMinBenefit", "MdlRegularize", "InitialAccumulator", "InitialWeight", "InitialBenefit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.AdadeltaParameters), global::Tensorflow.Tpu.AdadeltaParameters.Parser, new[]{ "Rho", "Epsilon", "InitialAccumulator", "InitialUpdate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.ProximalAdagradParameters), global::Tensorflow.Tpu.ProximalAdagradParameters.Parser, new[]{ "L1", "L2", "InitialAccumulator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.OnlineYogiParameters), global::Tensorflow.Tpu.OnlineYogiParameters.Parser, new[]{ "L1", "L2", "Beta2", "Sign", "Tanh" }, new[]{ "Activation" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.OnlineYogiParameters.Types.SignActivation), global::Tensorflow.Tpu.OnlineYogiParameters.Types.SignActivation.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.OnlineYogiParameters.Types.TanhActivation), global::Tensorflow.Tpu.OnlineYogiParameters.Types.TanhActivation.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.ProximalYogiParameters), global::Tensorflow.Tpu.ProximalYogiParameters.Parser, new[]{ "L1", "L2", "Beta1", "Beta2", "Epsilon", "Sign", "Tanh" }, new[]{ "Activation" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.ProximalYogiParameters.Types.SignActivation), global::Tensorflow.Tpu.ProximalYogiParameters.Types.SignActivation.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.ProximalYogiParameters.Types.TanhActivation), global::Tensorflow.Tpu.ProximalYogiParameters.Types.TanhActivation.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.GradientAccumulationStatus), global::Tensorflow.Tpu.GradientAccumulationStatus.Parser, null, null, new[]{ typeof(global::Tensorflow.Tpu.GradientAccumulationStatus.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.HotIdReplicationConfiguration), global::Tensorflow.Tpu.HotIdReplicationConfiguration.Parser, new[]{ "Status" }, null, new[]{ typeof(global::Tensorflow.Tpu.HotIdReplicationConfiguration.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.OptimizationParameters), global::Tensorflow.Tpu.OptimizationParameters.Parser, new[]{ "LearningRate", "ClippingLimits", "GradientClippingLimits", "WeightDecayFactor", "GradientAccumulationStatus", "HotIdReplicationConfiguration", "Adagrad", "BoundedAdagrad", "StochasticGradientDescent", "Ftrl", "Adam", "Momentum", "RmsProp", "CenteredRmsProp", "MdlAdagradLight", "Adadelta", "ProximalAdagrad", "OnlineYogi", "ProximalYogi" }, new[]{ "Parameters" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.StateVariableSpecification), global::Tensorflow.Tpu.StateVariableSpecification.Parser, new[]{ "Name", "UserDefined", "FillWithConstant" }, new[]{ "Usage" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.StateVariableSpecification.Types.UserDefined), global::Tensorflow.Tpu.StateVariableSpecification.Types.UserDefined.Parser, new[]{ "PaddingInitialValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tpu.StateVariableSpecification.Types.FillWithConstant), global::Tensorflow.Tpu.StateVariableSpecification.Types.FillWithConstant.Parser, new[]{ "InitialValue" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClippingLimits : pb::IMessage<ClippingLimits> {
    private static readonly pb::MessageParser<ClippingLimits> _parser = new pb::MessageParser<ClippingLimits>(() => new ClippingLimits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClippingLimits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClippingLimits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClippingLimits(ClippingLimits other) : this() {
      Lower = other.Lower;
      Upper = other.Upper;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClippingLimits Clone() {
      return new ClippingLimits(this);
    }

    /// <summary>Field number for the "lower" field.</summary>
    public const int LowerFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_lower_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? lower_;
    /// <summary>
    /// -inf if not set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Lower {
      get { return lower_; }
      set {
        lower_ = value;
      }
    }


    /// <summary>Field number for the "upper" field.</summary>
    public const int UpperFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_upper_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? upper_;
    /// <summary>
    /// +inf if not set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Upper {
      get { return upper_; }
      set {
        upper_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClippingLimits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClippingLimits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Lower, other.Lower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Upper, other.Upper)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lower_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Lower);
      if (upper_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Upper);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lower_ != null) {
        _single_lower_codec.WriteTagAndValue(output, Lower);
      }
      if (upper_ != null) {
        _single_upper_codec.WriteTagAndValue(output, Upper);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lower_ != null) {
        size += _single_lower_codec.CalculateSizeWithTag(Lower);
      }
      if (upper_ != null) {
        size += _single_upper_codec.CalculateSizeWithTag(Upper);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClippingLimits other) {
      if (other == null) {
        return;
      }
      if (other.lower_ != null) {
        if (lower_ == null || other.Lower != 0F) {
          Lower = other.Lower;
        }
      }
      if (other.upper_ != null) {
        if (upper_ == null || other.Upper != 0F) {
          Upper = other.Upper;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_lower_codec.Read(input);
            if (lower_ == null || value != 0F) {
              Lower = value;
            }
            break;
          }
          case 18: {
            float? value = _single_upper_codec.Read(input);
            if (upper_ == null || value != 0F) {
              Upper = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Dynamic learning rate specification in the TPUEmbeddingConfiguration. The
  /// actual learning rates are provided as a scalar input list to the
  /// SendTPUEmbeddingGradients Op indexed by their tag specified through the
  /// following proto.
  /// </summary>
  public sealed partial class DynamicLearningRate : pb::IMessage<DynamicLearningRate> {
    private static readonly pb::MessageParser<DynamicLearningRate> _parser = new pb::MessageParser<DynamicLearningRate>(() => new DynamicLearningRate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicLearningRate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLearningRate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLearningRate(DynamicLearningRate other) : this() {
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLearningRate Clone() {
      return new DynamicLearningRate(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private int tag_;
    /// <summary>
    /// For tables where learning rates are dynamically computed and communicated
    /// to the TPU embedding program, a tag must be specified for the learning
    /// rate.
    ///
    /// The tag must be a non-negative  integer. The total number of unique tags
    /// must be less than or equal to the number of tables in the TPU embedding
    /// configuration (a table does not specify any tag if it uses a constant
    /// learning rate, and specifies exactly one tag if it uses dynamic learning
    /// rates).
    ///
    /// All tags in the range [0, number_of_unique_tags) must be present in the TPU
    /// embedding configuration, i.e. a tag cannot be skipped if a different tag
    /// numerically greater than it is used in the configuration.
    ///
    /// If multiple tables specify the same tag, they *MUST* have
    /// the same dynamic learning rate, for example, their dynamic learning rate
    /// could be computed by the same TensorFlow sub-graph. The partitioning of the
    /// embedding layer would be more optimal if the number_of_unique_tags is as
    /// *LOW* as possible, i.e., if many tables share the same tag.
    ///
    /// The learning_rate input of the SendTPUEmbeddingGradients op is used to
    /// communicate dynamic learning rates to the TPU embedding program.
    /// The learning_rate input is a list of scalars where the size of the list is
    /// equal to the number of unique tags. The learning rate associated with a
    /// particular tag is specified by populating its corresponding index in the
    /// list of learning_rate scalars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicLearningRate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicLearningRate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicLearningRate other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Source of learning rate to use.
  /// </summary>
  public sealed partial class LearningRate : pb::IMessage<LearningRate> {
    private static readonly pb::MessageParser<LearningRate> _parser = new pb::MessageParser<LearningRate>(() => new LearningRate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LearningRate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearningRate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearningRate(LearningRate other) : this() {
      switch (other.LearningRateCase) {
        case LearningRateOneofCase.Constant:
          Constant = other.Constant;
          break;
        case LearningRateOneofCase.Dynamic:
          Dynamic = other.Dynamic.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearningRate Clone() {
      return new LearningRate(this);
    }

    /// <summary>Field number for the "constant" field.</summary>
    public const int ConstantFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Constant {
      get { return learningRateCase_ == LearningRateOneofCase.Constant ? (float) learningRate_ : 0F; }
      set {
        learningRate_ = value;
        learningRateCase_ = LearningRateOneofCase.Constant;
      }
    }

    /// <summary>Field number for the "dynamic" field.</summary>
    public const int DynamicFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.DynamicLearningRate Dynamic {
      get { return learningRateCase_ == LearningRateOneofCase.Dynamic ? (global::Tensorflow.Tpu.DynamicLearningRate) learningRate_ : null; }
      set {
        learningRate_ = value;
        learningRateCase_ = value == null ? LearningRateOneofCase.None : LearningRateOneofCase.Dynamic;
      }
    }

    private object learningRate_;
    /// <summary>Enum of possible cases for the "learning_rate" oneof.</summary>
    public enum LearningRateOneofCase {
      None = 0,
      Constant = 1,
      Dynamic = 2,
    }
    private LearningRateOneofCase learningRateCase_ = LearningRateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearningRateOneofCase LearningRateCase {
      get { return learningRateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLearningRate() {
      learningRateCase_ = LearningRateOneofCase.None;
      learningRate_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LearningRate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LearningRate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Constant, other.Constant)) return false;
      if (!object.Equals(Dynamic, other.Dynamic)) return false;
      if (LearningRateCase != other.LearningRateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (learningRateCase_ == LearningRateOneofCase.Constant) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Constant);
      if (learningRateCase_ == LearningRateOneofCase.Dynamic) hash ^= Dynamic.GetHashCode();
      hash ^= (int) learningRateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (learningRateCase_ == LearningRateOneofCase.Constant) {
        output.WriteRawTag(13);
        output.WriteFloat(Constant);
      }
      if (learningRateCase_ == LearningRateOneofCase.Dynamic) {
        output.WriteRawTag(18);
        output.WriteMessage(Dynamic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (learningRateCase_ == LearningRateOneofCase.Constant) {
        size += 1 + 4;
      }
      if (learningRateCase_ == LearningRateOneofCase.Dynamic) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dynamic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LearningRate other) {
      if (other == null) {
        return;
      }
      switch (other.LearningRateCase) {
        case LearningRateOneofCase.Constant:
          Constant = other.Constant;
          break;
        case LearningRateOneofCase.Dynamic:
          if (Dynamic == null) {
            Dynamic = new global::Tensorflow.Tpu.DynamicLearningRate();
          }
          Dynamic.MergeFrom(other.Dynamic);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Constant = input.ReadFloat();
            break;
          }
          case 18: {
            global::Tensorflow.Tpu.DynamicLearningRate subBuilder = new global::Tensorflow.Tpu.DynamicLearningRate();
            if (learningRateCase_ == LearningRateOneofCase.Dynamic) {
              subBuilder.MergeFrom(Dynamic);
            }
            input.ReadMessage(subBuilder);
            Dynamic = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://www.tensorflow.org/api_docs/python/tf/train/AdagradOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/core/kernels/training_ops.cc#L151
  /// </summary>
  public sealed partial class AdagradParameters : pb::IMessage<AdagradParameters> {
    private static readonly pb::MessageParser<AdagradParameters> _parser = new pb::MessageParser<AdagradParameters>(() => new AdagradParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdagradParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdagradParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdagradParameters(AdagradParameters other) : this() {
      initialAccumulator_ = other.initialAccumulator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdagradParameters Clone() {
      return new AdagradParameters(this);
    }

    /// <summary>Field number for the "initial_accumulator" field.</summary>
    public const int InitialAccumulatorFieldNumber = 1;
    private float initialAccumulator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialAccumulator {
      get { return initialAccumulator_; }
      set {
        initialAccumulator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdagradParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdagradParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialAccumulator, other.InitialAccumulator)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InitialAccumulator != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialAccumulator);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InitialAccumulator != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(InitialAccumulator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InitialAccumulator != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdagradParameters other) {
      if (other == null) {
        return;
      }
      if (other.InitialAccumulator != 0F) {
        InitialAccumulator = other.InitialAccumulator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            InitialAccumulator = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Algorithm in http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf.
  /// </summary>
  public sealed partial class BoundedAdagradParameters : pb::IMessage<BoundedAdagradParameters> {
    private static readonly pb::MessageParser<BoundedAdagradParameters> _parser = new pb::MessageParser<BoundedAdagradParameters>(() => new BoundedAdagradParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoundedAdagradParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundedAdagradParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundedAdagradParameters(BoundedAdagradParameters other) : this() {
      updateAccumulatorFirst_ = other.updateAccumulatorFirst_;
      maxVarUpdate_ = other.maxVarUpdate_;
      maxAccumulator_ = other.maxAccumulator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoundedAdagradParameters Clone() {
      return new BoundedAdagradParameters(this);
    }

    /// <summary>Field number for the "update_accumulator_first" field.</summary>
    public const int UpdateAccumulatorFirstFieldNumber = 1;
    private bool updateAccumulatorFirst_;
    /// <summary>
    /// Whether to use the updated or the old value of the accumulator when
    /// computing the effective learning rate. When update_accumulator_first is set
    /// to True, the updated value of the accumulator is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateAccumulatorFirst {
      get { return updateAccumulatorFirst_; }
      set {
        updateAccumulatorFirst_ = value;
      }
    }

    /// <summary>Field number for the "max_var_update" field.</summary>
    public const int MaxVarUpdateFieldNumber = 2;
    private float maxVarUpdate_;
    /// <summary>
    /// The max_var_update value to use. Set value to 0 (default) to disable using
    /// max_var_update to clip the gradient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxVarUpdate {
      get { return maxVarUpdate_; }
      set {
        maxVarUpdate_ = value;
      }
    }

    /// <summary>Field number for the "max_accumulator" field.</summary>
    public const int MaxAccumulatorFieldNumber = 3;
    private float maxAccumulator_;
    /// <summary>
    /// The maximum value of the accumulator. Set max_accumulator to 0 (default)
    /// to disable using max_accumulator to clip the accumulator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxAccumulator {
      get { return maxAccumulator_; }
      set {
        maxAccumulator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoundedAdagradParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoundedAdagradParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpdateAccumulatorFirst != other.UpdateAccumulatorFirst) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxVarUpdate, other.MaxVarUpdate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxAccumulator, other.MaxAccumulator)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpdateAccumulatorFirst != false) hash ^= UpdateAccumulatorFirst.GetHashCode();
      if (MaxVarUpdate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxVarUpdate);
      if (MaxAccumulator != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxAccumulator);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpdateAccumulatorFirst != false) {
        output.WriteRawTag(8);
        output.WriteBool(UpdateAccumulatorFirst);
      }
      if (MaxVarUpdate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxVarUpdate);
      }
      if (MaxAccumulator != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MaxAccumulator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpdateAccumulatorFirst != false) {
        size += 1 + 1;
      }
      if (MaxVarUpdate != 0F) {
        size += 1 + 4;
      }
      if (MaxAccumulator != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoundedAdagradParameters other) {
      if (other == null) {
        return;
      }
      if (other.UpdateAccumulatorFirst != false) {
        UpdateAccumulatorFirst = other.UpdateAccumulatorFirst;
      }
      if (other.MaxVarUpdate != 0F) {
        MaxVarUpdate = other.MaxVarUpdate;
      }
      if (other.MaxAccumulator != 0F) {
        MaxAccumulator = other.MaxAccumulator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UpdateAccumulatorFirst = input.ReadBool();
            break;
          }
          case 21: {
            MaxVarUpdate = input.ReadFloat();
            break;
          }
          case 29: {
            MaxAccumulator = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://www.tensorflow.org/api_docs/python/tf/train/GradientDescentOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/core/kernels/training_ops.cc#L423
  /// </summary>
  public sealed partial class StochasticGradientDescentParameters : pb::IMessage<StochasticGradientDescentParameters> {
    private static readonly pb::MessageParser<StochasticGradientDescentParameters> _parser = new pb::MessageParser<StochasticGradientDescentParameters>(() => new StochasticGradientDescentParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StochasticGradientDescentParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StochasticGradientDescentParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StochasticGradientDescentParameters(StochasticGradientDescentParameters other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StochasticGradientDescentParameters Clone() {
      return new StochasticGradientDescentParameters(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StochasticGradientDescentParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StochasticGradientDescentParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StochasticGradientDescentParameters other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// https://www.tensorflow.org/api_docs/python/tf/train/FtrlOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/core/kernels/training_ops.cc#L192
  /// </summary>
  public sealed partial class FtrlParameters : pb::IMessage<FtrlParameters> {
    private static readonly pb::MessageParser<FtrlParameters> _parser = new pb::MessageParser<FtrlParameters>(() => new FtrlParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FtrlParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FtrlParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FtrlParameters(FtrlParameters other) : this() {
      l1_ = other.l1_;
      l2_ = other.l2_;
      lrPower_ = other.lrPower_;
      initialAccum_ = other.initialAccum_;
      initialLinear_ = other.initialLinear_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FtrlParameters Clone() {
      return new FtrlParameters(this);
    }

    /// <summary>Field number for the "l1" field.</summary>
    public const int L1FieldNumber = 1;
    private float l1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L1 {
      get { return l1_; }
      set {
        l1_ = value;
      }
    }

    /// <summary>Field number for the "l2" field.</summary>
    public const int L2FieldNumber = 2;
    private float l2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L2 {
      get { return l2_; }
      set {
        l2_ = value;
      }
    }

    /// <summary>Field number for the "lr_power" field.</summary>
    public const int LrPowerFieldNumber = 3;
    private float lrPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LrPower {
      get { return lrPower_; }
      set {
        lrPower_ = value;
      }
    }

    /// <summary>Field number for the "initial_accum" field.</summary>
    public const int InitialAccumFieldNumber = 4;
    private float initialAccum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialAccum {
      get { return initialAccum_; }
      set {
        initialAccum_ = value;
      }
    }

    /// <summary>Field number for the "initial_linear" field.</summary>
    public const int InitialLinearFieldNumber = 5;
    private float initialLinear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialLinear {
      get { return initialLinear_; }
      set {
        initialLinear_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FtrlParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FtrlParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L1, other.L1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L2, other.L2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LrPower, other.LrPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialAccum, other.InitialAccum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialLinear, other.InitialLinear)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L1);
      if (L2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L2);
      if (LrPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LrPower);
      if (InitialAccum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialAccum);
      if (InitialLinear != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialLinear);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L1 != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(L1);
      }
      if (L2 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(L2);
      }
      if (LrPower != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LrPower);
      }
      if (InitialAccum != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(InitialAccum);
      }
      if (InitialLinear != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(InitialLinear);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L1 != 0F) {
        size += 1 + 4;
      }
      if (L2 != 0F) {
        size += 1 + 4;
      }
      if (LrPower != 0F) {
        size += 1 + 4;
      }
      if (InitialAccum != 0F) {
        size += 1 + 4;
      }
      if (InitialLinear != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FtrlParameters other) {
      if (other == null) {
        return;
      }
      if (other.L1 != 0F) {
        L1 = other.L1;
      }
      if (other.L2 != 0F) {
        L2 = other.L2;
      }
      if (other.LrPower != 0F) {
        LrPower = other.LrPower;
      }
      if (other.InitialAccum != 0F) {
        InitialAccum = other.InitialAccum;
      }
      if (other.InitialLinear != 0F) {
        InitialLinear = other.InitialLinear;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            L1 = input.ReadFloat();
            break;
          }
          case 21: {
            L2 = input.ReadFloat();
            break;
          }
          case 29: {
            LrPower = input.ReadFloat();
            break;
          }
          case 37: {
            InitialAccum = input.ReadFloat();
            break;
          }
          case 45: {
            InitialLinear = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The Adam optimizer does not implement hyper-parameter update; use the dynamic
  /// learning rate feature instead, setting the learning rate to:
  /// user learning_rate * sqrt(1 - beta2^t) / (1 - beta1^t)
  /// Here, t is the current timestep.
  ///
  /// https://www.tensorflow.org/api_docs/python/tf/train/AdamOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/ab51450c817674c8ff08a7ae4f8ac50cdc4bed8b/tensorflow/python/training/adam.py#L54
  ///
  /// Note that the code by default implements the lazy version of Adam
  /// (https://www.tensorflow.org/api_docs/python/tf/contrib/opt/LazyAdamOptimizer)
  /// unless the use_non_lazy_adam parameter is set, in which case it implements
  /// the normal version of Adam that updates all parameters in the embedding
  /// table, even for entries that are not used in the current minibatch
  /// (https://www.tensorflow.org/api_docs/python/tf/contrib/opt/AdamOptimizer). If
  /// use_non_lazy_adam is enabled, gradient accumulation is also required to be
  /// enabled in order to get correct results; a warning will be printed otherwise
  /// (which may change to an error in the future). If use_sum_inside_sqrt is set,
  /// the Adam variable update formula will be changed from m / (sqrt(v) + epsilon)
  /// to m / sqrt(v + epsilon**2); this option improves the performance of TPU
  /// training and is not expected to harm model quality.
  /// </summary>
  public sealed partial class AdamParameters : pb::IMessage<AdamParameters> {
    private static readonly pb::MessageParser<AdamParameters> _parser = new pb::MessageParser<AdamParameters>(() => new AdamParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdamParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdamParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdamParameters(AdamParameters other) : this() {
      beta1_ = other.beta1_;
      beta2_ = other.beta2_;
      epsilon_ = other.epsilon_;
      initialM_ = other.initialM_;
      initialV_ = other.initialV_;
      useNonLazyAdam_ = other.useNonLazyAdam_;
      useSumInsideSqrt_ = other.useSumInsideSqrt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdamParameters Clone() {
      return new AdamParameters(this);
    }

    /// <summary>Field number for the "beta1" field.</summary>
    public const int Beta1FieldNumber = 3;
    private float beta1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta1 {
      get { return beta1_; }
      set {
        beta1_ = value;
      }
    }

    /// <summary>Field number for the "beta2" field.</summary>
    public const int Beta2FieldNumber = 4;
    private float beta2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta2 {
      get { return beta2_; }
      set {
        beta2_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 5;
    private float epsilon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    /// <summary>Field number for the "initial_m" field.</summary>
    public const int InitialMFieldNumber = 6;
    private float initialM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialM {
      get { return initialM_; }
      set {
        initialM_ = value;
      }
    }

    /// <summary>Field number for the "initial_v" field.</summary>
    public const int InitialVFieldNumber = 7;
    private float initialV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialV {
      get { return initialV_; }
      set {
        initialV_ = value;
      }
    }

    /// <summary>Field number for the "use_non_lazy_adam" field.</summary>
    public const int UseNonLazyAdamFieldNumber = 8;
    private bool useNonLazyAdam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseNonLazyAdam {
      get { return useNonLazyAdam_; }
      set {
        useNonLazyAdam_ = value;
      }
    }

    /// <summary>Field number for the "use_sum_inside_sqrt" field.</summary>
    public const int UseSumInsideSqrtFieldNumber = 10;
    private bool useSumInsideSqrt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSumInsideSqrt {
      get { return useSumInsideSqrt_; }
      set {
        useSumInsideSqrt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdamParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdamParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta1, other.Beta1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta2, other.Beta2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialM, other.InitialM)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialV, other.InitialV)) return false;
      if (UseNonLazyAdam != other.UseNonLazyAdam) return false;
      if (UseSumInsideSqrt != other.UseSumInsideSqrt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Beta1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta1);
      if (Beta2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta2);
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (InitialM != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialM);
      if (InitialV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialV);
      if (UseNonLazyAdam != false) hash ^= UseNonLazyAdam.GetHashCode();
      if (UseSumInsideSqrt != false) hash ^= UseSumInsideSqrt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Beta1 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Beta1);
      }
      if (Beta2 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Beta2);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Epsilon);
      }
      if (InitialM != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(InitialM);
      }
      if (InitialV != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(InitialV);
      }
      if (UseNonLazyAdam != false) {
        output.WriteRawTag(64);
        output.WriteBool(UseNonLazyAdam);
      }
      if (UseSumInsideSqrt != false) {
        output.WriteRawTag(80);
        output.WriteBool(UseSumInsideSqrt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Beta1 != 0F) {
        size += 1 + 4;
      }
      if (Beta2 != 0F) {
        size += 1 + 4;
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (InitialM != 0F) {
        size += 1 + 4;
      }
      if (InitialV != 0F) {
        size += 1 + 4;
      }
      if (UseNonLazyAdam != false) {
        size += 1 + 1;
      }
      if (UseSumInsideSqrt != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdamParameters other) {
      if (other == null) {
        return;
      }
      if (other.Beta1 != 0F) {
        Beta1 = other.Beta1;
      }
      if (other.Beta2 != 0F) {
        Beta2 = other.Beta2;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      if (other.InitialM != 0F) {
        InitialM = other.InitialM;
      }
      if (other.InitialV != 0F) {
        InitialV = other.InitialV;
      }
      if (other.UseNonLazyAdam != false) {
        UseNonLazyAdam = other.UseNonLazyAdam;
      }
      if (other.UseSumInsideSqrt != false) {
        UseSumInsideSqrt = other.UseSumInsideSqrt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 29: {
            Beta1 = input.ReadFloat();
            break;
          }
          case 37: {
            Beta2 = input.ReadFloat();
            break;
          }
          case 45: {
            Epsilon = input.ReadFloat();
            break;
          }
          case 53: {
            InitialM = input.ReadFloat();
            break;
          }
          case 61: {
            InitialV = input.ReadFloat();
            break;
          }
          case 64: {
            UseNonLazyAdam = input.ReadBool();
            break;
          }
          case 80: {
            UseSumInsideSqrt = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://www.tensorflow.org/api_docs/python/tf/train/MomentumOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/core/kernels/training_ops.cc#L271
  /// </summary>
  public sealed partial class MomentumParameters : pb::IMessage<MomentumParameters> {
    private static readonly pb::MessageParser<MomentumParameters> _parser = new pb::MessageParser<MomentumParameters>(() => new MomentumParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MomentumParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MomentumParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MomentumParameters(MomentumParameters other) : this() {
      momentum_ = other.momentum_;
      useNesterov_ = other.useNesterov_;
      initialAccum_ = other.initialAccum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MomentumParameters Clone() {
      return new MomentumParameters(this);
    }

    /// <summary>Field number for the "momentum" field.</summary>
    public const int MomentumFieldNumber = 1;
    private float momentum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Momentum {
      get { return momentum_; }
      set {
        momentum_ = value;
      }
    }

    /// <summary>Field number for the "use_nesterov" field.</summary>
    public const int UseNesterovFieldNumber = 2;
    private bool useNesterov_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseNesterov {
      get { return useNesterov_; }
      set {
        useNesterov_ = value;
      }
    }

    /// <summary>Field number for the "initial_accum" field.</summary>
    public const int InitialAccumFieldNumber = 3;
    private float initialAccum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialAccum {
      get { return initialAccum_; }
      set {
        initialAccum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MomentumParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MomentumParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Momentum, other.Momentum)) return false;
      if (UseNesterov != other.UseNesterov) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialAccum, other.InitialAccum)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Momentum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Momentum);
      if (UseNesterov != false) hash ^= UseNesterov.GetHashCode();
      if (InitialAccum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialAccum);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Momentum != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Momentum);
      }
      if (UseNesterov != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseNesterov);
      }
      if (InitialAccum != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InitialAccum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Momentum != 0F) {
        size += 1 + 4;
      }
      if (UseNesterov != false) {
        size += 1 + 1;
      }
      if (InitialAccum != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MomentumParameters other) {
      if (other == null) {
        return;
      }
      if (other.Momentum != 0F) {
        Momentum = other.Momentum;
      }
      if (other.UseNesterov != false) {
        UseNesterov = other.UseNesterov;
      }
      if (other.InitialAccum != 0F) {
        InitialAccum = other.InitialAccum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Momentum = input.ReadFloat();
            break;
          }
          case 16: {
            UseNesterov = input.ReadBool();
            break;
          }
          case 29: {
            InitialAccum = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://www.tensorflow.org/api_docs/python/tf/train/RMSPropOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/core/kernels/training_ops.cc#L356
  /// </summary>
  public sealed partial class RmsPropParameters : pb::IMessage<RmsPropParameters> {
    private static readonly pb::MessageParser<RmsPropParameters> _parser = new pb::MessageParser<RmsPropParameters>(() => new RmsPropParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RmsPropParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmsPropParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmsPropParameters(RmsPropParameters other) : this() {
      rho_ = other.rho_;
      momentum_ = other.momentum_;
      epsilon_ = other.epsilon_;
      initialMs_ = other.initialMs_;
      initialMom_ = other.initialMom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RmsPropParameters Clone() {
      return new RmsPropParameters(this);
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 1;
    private float rho_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rho {
      get { return rho_; }
      set {
        rho_ = value;
      }
    }

    /// <summary>Field number for the "momentum" field.</summary>
    public const int MomentumFieldNumber = 2;
    private float momentum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Momentum {
      get { return momentum_; }
      set {
        momentum_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 3;
    private float epsilon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    /// <summary>Field number for the "initial_ms" field.</summary>
    public const int InitialMsFieldNumber = 4;
    private float initialMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialMs {
      get { return initialMs_; }
      set {
        initialMs_ = value;
      }
    }

    /// <summary>Field number for the "initial_mom" field.</summary>
    public const int InitialMomFieldNumber = 5;
    private float initialMom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialMom {
      get { return initialMom_; }
      set {
        initialMom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RmsPropParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RmsPropParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rho, other.Rho)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Momentum, other.Momentum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialMs, other.InitialMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialMom, other.InitialMom)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rho != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rho);
      if (Momentum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Momentum);
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (InitialMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialMs);
      if (InitialMom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialMom);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rho != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Rho);
      }
      if (Momentum != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Momentum);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Epsilon);
      }
      if (InitialMs != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(InitialMs);
      }
      if (InitialMom != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(InitialMom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rho != 0F) {
        size += 1 + 4;
      }
      if (Momentum != 0F) {
        size += 1 + 4;
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (InitialMs != 0F) {
        size += 1 + 4;
      }
      if (InitialMom != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RmsPropParameters other) {
      if (other == null) {
        return;
      }
      if (other.Rho != 0F) {
        Rho = other.Rho;
      }
      if (other.Momentum != 0F) {
        Momentum = other.Momentum;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      if (other.InitialMs != 0F) {
        InitialMs = other.InitialMs;
      }
      if (other.InitialMom != 0F) {
        InitialMom = other.InitialMom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Rho = input.ReadFloat();
            break;
          }
          case 21: {
            Momentum = input.ReadFloat();
            break;
          }
          case 29: {
            Epsilon = input.ReadFloat();
            break;
          }
          case 37: {
            InitialMs = input.ReadFloat();
            break;
          }
          case 45: {
            InitialMom = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://www.tensorflow.org/api_docs/python/tf/train/RMSPropOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/core/kernels/training_ops.cc#L372
  /// </summary>
  public sealed partial class CenteredRmsPropParameters : pb::IMessage<CenteredRmsPropParameters> {
    private static readonly pb::MessageParser<CenteredRmsPropParameters> _parser = new pb::MessageParser<CenteredRmsPropParameters>(() => new CenteredRmsPropParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CenteredRmsPropParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CenteredRmsPropParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CenteredRmsPropParameters(CenteredRmsPropParameters other) : this() {
      rho_ = other.rho_;
      momentum_ = other.momentum_;
      epsilon_ = other.epsilon_;
      initialMs_ = other.initialMs_;
      initialMom_ = other.initialMom_;
      initialMg_ = other.initialMg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CenteredRmsPropParameters Clone() {
      return new CenteredRmsPropParameters(this);
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 1;
    private float rho_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rho {
      get { return rho_; }
      set {
        rho_ = value;
      }
    }

    /// <summary>Field number for the "momentum" field.</summary>
    public const int MomentumFieldNumber = 2;
    private float momentum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Momentum {
      get { return momentum_; }
      set {
        momentum_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 3;
    private float epsilon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    /// <summary>Field number for the "initial_ms" field.</summary>
    public const int InitialMsFieldNumber = 4;
    private float initialMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialMs {
      get { return initialMs_; }
      set {
        initialMs_ = value;
      }
    }

    /// <summary>Field number for the "initial_mom" field.</summary>
    public const int InitialMomFieldNumber = 5;
    private float initialMom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialMom {
      get { return initialMom_; }
      set {
        initialMom_ = value;
      }
    }

    /// <summary>Field number for the "initial_mg" field.</summary>
    public const int InitialMgFieldNumber = 6;
    private float initialMg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialMg {
      get { return initialMg_; }
      set {
        initialMg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CenteredRmsPropParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CenteredRmsPropParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rho, other.Rho)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Momentum, other.Momentum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialMs, other.InitialMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialMom, other.InitialMom)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialMg, other.InitialMg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rho != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rho);
      if (Momentum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Momentum);
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (InitialMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialMs);
      if (InitialMom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialMom);
      if (InitialMg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialMg);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rho != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Rho);
      }
      if (Momentum != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Momentum);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Epsilon);
      }
      if (InitialMs != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(InitialMs);
      }
      if (InitialMom != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(InitialMom);
      }
      if (InitialMg != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(InitialMg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rho != 0F) {
        size += 1 + 4;
      }
      if (Momentum != 0F) {
        size += 1 + 4;
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (InitialMs != 0F) {
        size += 1 + 4;
      }
      if (InitialMom != 0F) {
        size += 1 + 4;
      }
      if (InitialMg != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CenteredRmsPropParameters other) {
      if (other == null) {
        return;
      }
      if (other.Rho != 0F) {
        Rho = other.Rho;
      }
      if (other.Momentum != 0F) {
        Momentum = other.Momentum;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      if (other.InitialMs != 0F) {
        InitialMs = other.InitialMs;
      }
      if (other.InitialMom != 0F) {
        InitialMom = other.InitialMom;
      }
      if (other.InitialMg != 0F) {
        InitialMg = other.InitialMg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Rho = input.ReadFloat();
            break;
          }
          case 21: {
            Momentum = input.ReadFloat();
            break;
          }
          case 29: {
            Epsilon = input.ReadFloat();
            break;
          }
          case 37: {
            InitialMs = input.ReadFloat();
            break;
          }
          case 45: {
            InitialMom = input.ReadFloat();
            break;
          }
          case 53: {
            InitialMg = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Variant of algorithm in http://proceedings.mlr.press/v44/shamir15.pdf
  /// </summary>
  public sealed partial class MdlAdagradLightParameters : pb::IMessage<MdlAdagradLightParameters> {
    private static readonly pb::MessageParser<MdlAdagradLightParameters> _parser = new pb::MessageParser<MdlAdagradLightParameters>(() => new MdlAdagradLightParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MdlAdagradLightParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdlAdagradLightParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdlAdagradLightParameters(MdlAdagradLightParameters other) : this() {
      l2_ = other.l2_;
      lrPower_ = other.lrPower_;
      minServableMdlBenefit_ = other.minServableMdlBenefit_;
      mdlMixInMargin_ = other.mdlMixInMargin_;
      mdlBenefitRampupCoeff_ = other.mdlBenefitRampupCoeff_;
      mdlMinWeight_ = other.mdlMinWeight_;
      benefitRevisitScale_ = other.benefitRevisitScale_;
      maxEventBenefit_ = other.maxEventBenefit_;
      maxTotalBenefit_ = other.maxTotalBenefit_;
      mdlHardLimit_ = other.mdlHardLimit_;
      hardLimitMinBenefit_ = other.hardLimitMinBenefit_;
      mdlRegularize_ = other.mdlRegularize_;
      initialAccumulator_ = other.initialAccumulator_;
      initialWeight_ = other.initialWeight_;
      initialBenefit_ = other.initialBenefit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MdlAdagradLightParameters Clone() {
      return new MdlAdagradLightParameters(this);
    }

    /// <summary>Field number for the "l2" field.</summary>
    public const int L2FieldNumber = 1;
    private float l2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L2 {
      get { return l2_; }
      set {
        l2_ = value;
      }
    }

    /// <summary>Field number for the "lr_power" field.</summary>
    public const int LrPowerFieldNumber = 2;
    private float lrPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LrPower {
      get { return lrPower_; }
      set {
        lrPower_ = value;
      }
    }

    /// <summary>Field number for the "min_servable_mdl_benefit" field.</summary>
    public const int MinServableMdlBenefitFieldNumber = 3;
    private float minServableMdlBenefit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinServableMdlBenefit {
      get { return minServableMdlBenefit_; }
      set {
        minServableMdlBenefit_ = value;
      }
    }

    /// <summary>Field number for the "mdl_mix_in_margin" field.</summary>
    public const int MdlMixInMarginFieldNumber = 4;
    private float mdlMixInMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MdlMixInMargin {
      get { return mdlMixInMargin_; }
      set {
        mdlMixInMargin_ = value;
      }
    }

    /// <summary>Field number for the "mdl_benefit_rampup_coeff" field.</summary>
    public const int MdlBenefitRampupCoeffFieldNumber = 5;
    private float mdlBenefitRampupCoeff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MdlBenefitRampupCoeff {
      get { return mdlBenefitRampupCoeff_; }
      set {
        mdlBenefitRampupCoeff_ = value;
      }
    }

    /// <summary>Field number for the "mdl_min_weight" field.</summary>
    public const int MdlMinWeightFieldNumber = 6;
    private float mdlMinWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MdlMinWeight {
      get { return mdlMinWeight_; }
      set {
        mdlMinWeight_ = value;
      }
    }

    /// <summary>Field number for the "benefit_revisit_scale" field.</summary>
    public const int BenefitRevisitScaleFieldNumber = 7;
    private float benefitRevisitScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BenefitRevisitScale {
      get { return benefitRevisitScale_; }
      set {
        benefitRevisitScale_ = value;
      }
    }

    /// <summary>Field number for the "max_event_benefit" field.</summary>
    public const int MaxEventBenefitFieldNumber = 8;
    private float maxEventBenefit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxEventBenefit {
      get { return maxEventBenefit_; }
      set {
        maxEventBenefit_ = value;
      }
    }

    /// <summary>Field number for the "max_total_benefit" field.</summary>
    public const int MaxTotalBenefitFieldNumber = 9;
    private float maxTotalBenefit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxTotalBenefit {
      get { return maxTotalBenefit_; }
      set {
        maxTotalBenefit_ = value;
      }
    }

    /// <summary>Field number for the "mdl_hard_limit" field.</summary>
    public const int MdlHardLimitFieldNumber = 10;
    private float mdlHardLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MdlHardLimit {
      get { return mdlHardLimit_; }
      set {
        mdlHardLimit_ = value;
      }
    }

    /// <summary>Field number for the "hard_limit_min_benefit" field.</summary>
    public const int HardLimitMinBenefitFieldNumber = 11;
    private bool hardLimitMinBenefit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HardLimitMinBenefit {
      get { return hardLimitMinBenefit_; }
      set {
        hardLimitMinBenefit_ = value;
      }
    }

    /// <summary>Field number for the "mdl_regularize" field.</summary>
    public const int MdlRegularizeFieldNumber = 12;
    private bool mdlRegularize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MdlRegularize {
      get { return mdlRegularize_; }
      set {
        mdlRegularize_ = value;
      }
    }

    /// <summary>Field number for the "initial_accumulator" field.</summary>
    public const int InitialAccumulatorFieldNumber = 13;
    private float initialAccumulator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialAccumulator {
      get { return initialAccumulator_; }
      set {
        initialAccumulator_ = value;
      }
    }

    /// <summary>Field number for the "initial_weight" field.</summary>
    public const int InitialWeightFieldNumber = 14;
    private float initialWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialWeight {
      get { return initialWeight_; }
      set {
        initialWeight_ = value;
      }
    }

    /// <summary>Field number for the "initial_benefit" field.</summary>
    public const int InitialBenefitFieldNumber = 15;
    private float initialBenefit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialBenefit {
      get { return initialBenefit_; }
      set {
        initialBenefit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MdlAdagradLightParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MdlAdagradLightParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L2, other.L2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LrPower, other.LrPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinServableMdlBenefit, other.MinServableMdlBenefit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MdlMixInMargin, other.MdlMixInMargin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MdlBenefitRampupCoeff, other.MdlBenefitRampupCoeff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MdlMinWeight, other.MdlMinWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BenefitRevisitScale, other.BenefitRevisitScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxEventBenefit, other.MaxEventBenefit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxTotalBenefit, other.MaxTotalBenefit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MdlHardLimit, other.MdlHardLimit)) return false;
      if (HardLimitMinBenefit != other.HardLimitMinBenefit) return false;
      if (MdlRegularize != other.MdlRegularize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialAccumulator, other.InitialAccumulator)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialWeight, other.InitialWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialBenefit, other.InitialBenefit)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L2);
      if (LrPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LrPower);
      if (MinServableMdlBenefit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinServableMdlBenefit);
      if (MdlMixInMargin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MdlMixInMargin);
      if (MdlBenefitRampupCoeff != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MdlBenefitRampupCoeff);
      if (MdlMinWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MdlMinWeight);
      if (BenefitRevisitScale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BenefitRevisitScale);
      if (MaxEventBenefit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxEventBenefit);
      if (MaxTotalBenefit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxTotalBenefit);
      if (MdlHardLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MdlHardLimit);
      if (HardLimitMinBenefit != false) hash ^= HardLimitMinBenefit.GetHashCode();
      if (MdlRegularize != false) hash ^= MdlRegularize.GetHashCode();
      if (InitialAccumulator != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialAccumulator);
      if (InitialWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialWeight);
      if (InitialBenefit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialBenefit);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L2 != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(L2);
      }
      if (LrPower != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LrPower);
      }
      if (MinServableMdlBenefit != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MinServableMdlBenefit);
      }
      if (MdlMixInMargin != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MdlMixInMargin);
      }
      if (MdlBenefitRampupCoeff != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MdlBenefitRampupCoeff);
      }
      if (MdlMinWeight != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MdlMinWeight);
      }
      if (BenefitRevisitScale != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(BenefitRevisitScale);
      }
      if (MaxEventBenefit != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MaxEventBenefit);
      }
      if (MaxTotalBenefit != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MaxTotalBenefit);
      }
      if (MdlHardLimit != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MdlHardLimit);
      }
      if (HardLimitMinBenefit != false) {
        output.WriteRawTag(88);
        output.WriteBool(HardLimitMinBenefit);
      }
      if (MdlRegularize != false) {
        output.WriteRawTag(96);
        output.WriteBool(MdlRegularize);
      }
      if (InitialAccumulator != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(InitialAccumulator);
      }
      if (InitialWeight != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(InitialWeight);
      }
      if (InitialBenefit != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(InitialBenefit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L2 != 0F) {
        size += 1 + 4;
      }
      if (LrPower != 0F) {
        size += 1 + 4;
      }
      if (MinServableMdlBenefit != 0F) {
        size += 1 + 4;
      }
      if (MdlMixInMargin != 0F) {
        size += 1 + 4;
      }
      if (MdlBenefitRampupCoeff != 0F) {
        size += 1 + 4;
      }
      if (MdlMinWeight != 0F) {
        size += 1 + 4;
      }
      if (BenefitRevisitScale != 0F) {
        size += 1 + 4;
      }
      if (MaxEventBenefit != 0F) {
        size += 1 + 4;
      }
      if (MaxTotalBenefit != 0F) {
        size += 1 + 4;
      }
      if (MdlHardLimit != 0F) {
        size += 1 + 4;
      }
      if (HardLimitMinBenefit != false) {
        size += 1 + 1;
      }
      if (MdlRegularize != false) {
        size += 1 + 1;
      }
      if (InitialAccumulator != 0F) {
        size += 1 + 4;
      }
      if (InitialWeight != 0F) {
        size += 1 + 4;
      }
      if (InitialBenefit != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MdlAdagradLightParameters other) {
      if (other == null) {
        return;
      }
      if (other.L2 != 0F) {
        L2 = other.L2;
      }
      if (other.LrPower != 0F) {
        LrPower = other.LrPower;
      }
      if (other.MinServableMdlBenefit != 0F) {
        MinServableMdlBenefit = other.MinServableMdlBenefit;
      }
      if (other.MdlMixInMargin != 0F) {
        MdlMixInMargin = other.MdlMixInMargin;
      }
      if (other.MdlBenefitRampupCoeff != 0F) {
        MdlBenefitRampupCoeff = other.MdlBenefitRampupCoeff;
      }
      if (other.MdlMinWeight != 0F) {
        MdlMinWeight = other.MdlMinWeight;
      }
      if (other.BenefitRevisitScale != 0F) {
        BenefitRevisitScale = other.BenefitRevisitScale;
      }
      if (other.MaxEventBenefit != 0F) {
        MaxEventBenefit = other.MaxEventBenefit;
      }
      if (other.MaxTotalBenefit != 0F) {
        MaxTotalBenefit = other.MaxTotalBenefit;
      }
      if (other.MdlHardLimit != 0F) {
        MdlHardLimit = other.MdlHardLimit;
      }
      if (other.HardLimitMinBenefit != false) {
        HardLimitMinBenefit = other.HardLimitMinBenefit;
      }
      if (other.MdlRegularize != false) {
        MdlRegularize = other.MdlRegularize;
      }
      if (other.InitialAccumulator != 0F) {
        InitialAccumulator = other.InitialAccumulator;
      }
      if (other.InitialWeight != 0F) {
        InitialWeight = other.InitialWeight;
      }
      if (other.InitialBenefit != 0F) {
        InitialBenefit = other.InitialBenefit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            L2 = input.ReadFloat();
            break;
          }
          case 21: {
            LrPower = input.ReadFloat();
            break;
          }
          case 29: {
            MinServableMdlBenefit = input.ReadFloat();
            break;
          }
          case 37: {
            MdlMixInMargin = input.ReadFloat();
            break;
          }
          case 45: {
            MdlBenefitRampupCoeff = input.ReadFloat();
            break;
          }
          case 53: {
            MdlMinWeight = input.ReadFloat();
            break;
          }
          case 61: {
            BenefitRevisitScale = input.ReadFloat();
            break;
          }
          case 69: {
            MaxEventBenefit = input.ReadFloat();
            break;
          }
          case 77: {
            MaxTotalBenefit = input.ReadFloat();
            break;
          }
          case 85: {
            MdlHardLimit = input.ReadFloat();
            break;
          }
          case 88: {
            HardLimitMinBenefit = input.ReadBool();
            break;
          }
          case 96: {
            MdlRegularize = input.ReadBool();
            break;
          }
          case 109: {
            InitialAccumulator = input.ReadFloat();
            break;
          }
          case 117: {
            InitialWeight = input.ReadFloat();
            break;
          }
          case 125: {
            InitialBenefit = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://www.tensorflow.org/api_docs/python/tf/train/AdadeltaOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/core/kernels/training_ops.cc#L68
  /// </summary>
  public sealed partial class AdadeltaParameters : pb::IMessage<AdadeltaParameters> {
    private static readonly pb::MessageParser<AdadeltaParameters> _parser = new pb::MessageParser<AdadeltaParameters>(() => new AdadeltaParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdadeltaParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdadeltaParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdadeltaParameters(AdadeltaParameters other) : this() {
      rho_ = other.rho_;
      epsilon_ = other.epsilon_;
      initialAccumulator_ = other.initialAccumulator_;
      initialUpdate_ = other.initialUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdadeltaParameters Clone() {
      return new AdadeltaParameters(this);
    }

    /// <summary>Field number for the "rho" field.</summary>
    public const int RhoFieldNumber = 1;
    private float rho_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rho {
      get { return rho_; }
      set {
        rho_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 2;
    private float epsilon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    /// <summary>Field number for the "initial_accumulator" field.</summary>
    public const int InitialAccumulatorFieldNumber = 3;
    private float initialAccumulator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialAccumulator {
      get { return initialAccumulator_; }
      set {
        initialAccumulator_ = value;
      }
    }

    /// <summary>Field number for the "initial_update" field.</summary>
    public const int InitialUpdateFieldNumber = 4;
    private float initialUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialUpdate {
      get { return initialUpdate_; }
      set {
        initialUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdadeltaParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdadeltaParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rho, other.Rho)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialAccumulator, other.InitialAccumulator)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialUpdate, other.InitialUpdate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rho != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rho);
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (InitialAccumulator != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialAccumulator);
      if (InitialUpdate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialUpdate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rho != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Rho);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Epsilon);
      }
      if (InitialAccumulator != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InitialAccumulator);
      }
      if (InitialUpdate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(InitialUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rho != 0F) {
        size += 1 + 4;
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (InitialAccumulator != 0F) {
        size += 1 + 4;
      }
      if (InitialUpdate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdadeltaParameters other) {
      if (other == null) {
        return;
      }
      if (other.Rho != 0F) {
        Rho = other.Rho;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      if (other.InitialAccumulator != 0F) {
        InitialAccumulator = other.InitialAccumulator;
      }
      if (other.InitialUpdate != 0F) {
        InitialUpdate = other.InitialUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Rho = input.ReadFloat();
            break;
          }
          case 21: {
            Epsilon = input.ReadFloat();
            break;
          }
          case 29: {
            InitialAccumulator = input.ReadFloat();
            break;
          }
          case 37: {
            InitialUpdate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// https://www.tensorflow.org/api_docs/python/tf/train/ProximalAdagradOptimizer
  /// https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/core/kernels/training_ops.cc#L164
  /// </summary>
  public sealed partial class ProximalAdagradParameters : pb::IMessage<ProximalAdagradParameters> {
    private static readonly pb::MessageParser<ProximalAdagradParameters> _parser = new pb::MessageParser<ProximalAdagradParameters>(() => new ProximalAdagradParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProximalAdagradParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProximalAdagradParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProximalAdagradParameters(ProximalAdagradParameters other) : this() {
      l1_ = other.l1_;
      l2_ = other.l2_;
      initialAccumulator_ = other.initialAccumulator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProximalAdagradParameters Clone() {
      return new ProximalAdagradParameters(this);
    }

    /// <summary>Field number for the "l1" field.</summary>
    public const int L1FieldNumber = 1;
    private float l1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L1 {
      get { return l1_; }
      set {
        l1_ = value;
      }
    }

    /// <summary>Field number for the "l2" field.</summary>
    public const int L2FieldNumber = 2;
    private float l2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L2 {
      get { return l2_; }
      set {
        l2_ = value;
      }
    }

    /// <summary>Field number for the "initial_accumulator" field.</summary>
    public const int InitialAccumulatorFieldNumber = 3;
    private float initialAccumulator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitialAccumulator {
      get { return initialAccumulator_; }
      set {
        initialAccumulator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProximalAdagradParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProximalAdagradParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L1, other.L1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L2, other.L2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitialAccumulator, other.InitialAccumulator)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L1);
      if (L2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L2);
      if (InitialAccumulator != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitialAccumulator);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L1 != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(L1);
      }
      if (L2 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(L2);
      }
      if (InitialAccumulator != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InitialAccumulator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L1 != 0F) {
        size += 1 + 4;
      }
      if (L2 != 0F) {
        size += 1 + 4;
      }
      if (InitialAccumulator != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProximalAdagradParameters other) {
      if (other == null) {
        return;
      }
      if (other.L1 != 0F) {
        L1 = other.L1;
      }
      if (other.L2 != 0F) {
        L2 = other.L2;
      }
      if (other.InitialAccumulator != 0F) {
        InitialAccumulator = other.InitialAccumulator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            L1 = input.ReadFloat();
            break;
          }
          case 21: {
            L2 = input.ReadFloat();
            break;
          }
          case 29: {
            InitialAccumulator = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The online Yogi optimizer does not implement hyper-parameter update; use the
  /// dynamic learning rate feature instead, setting the learning rate to:
  /// user learning_rate * sqrt(1 - beta2^t) / (1 - beta1^t)
  /// Here, t is the current timestep.
  ///
  /// https://papers.nips.cc/paper/8186-adaptive-methods-for-nonconvex-optimization.pdf
  /// plus some extensions based on FTRL.
  ///
  /// Note that the code by default implements the lazy version of online Yogi.
  /// </summary>
  public sealed partial class OnlineYogiParameters : pb::IMessage<OnlineYogiParameters> {
    private static readonly pb::MessageParser<OnlineYogiParameters> _parser = new pb::MessageParser<OnlineYogiParameters>(() => new OnlineYogiParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnlineYogiParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlineYogiParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlineYogiParameters(OnlineYogiParameters other) : this() {
      l1_ = other.l1_;
      l2_ = other.l2_;
      beta2_ = other.beta2_;
      switch (other.ActivationCase) {
        case ActivationOneofCase.Sign:
          Sign = other.Sign.Clone();
          break;
        case ActivationOneofCase.Tanh:
          Tanh = other.Tanh.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnlineYogiParameters Clone() {
      return new OnlineYogiParameters(this);
    }

    /// <summary>Field number for the "l1" field.</summary>
    public const int L1FieldNumber = 1;
    private float l1_;
    /// <summary>
    /// The L1 regularization parameter (used analogously to the one in FTRL).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L1 {
      get { return l1_; }
      set {
        l1_ = value;
      }
    }

    /// <summary>Field number for the "l2" field.</summary>
    public const int L2FieldNumber = 2;
    private float l2_;
    /// <summary>
    /// The L2 regularization parameter (used analogously to the one in FTRL).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L2 {
      get { return l2_; }
      set {
        l2_ = value;
      }
    }

    /// <summary>Field number for the "beta2" field.</summary>
    public const int Beta2FieldNumber = 3;
    private float beta2_;
    /// <summary>
    /// \beta_2 from Algorithm 2 in the paper.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta2 {
      get { return beta2_; }
      set {
        beta2_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.OnlineYogiParameters.Types.SignActivation Sign {
      get { return activationCase_ == ActivationOneofCase.Sign ? (global::Tensorflow.Tpu.OnlineYogiParameters.Types.SignActivation) activation_ : null; }
      set {
        activation_ = value;
        activationCase_ = value == null ? ActivationOneofCase.None : ActivationOneofCase.Sign;
      }
    }

    /// <summary>Field number for the "tanh" field.</summary>
    public const int TanhFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.OnlineYogiParameters.Types.TanhActivation Tanh {
      get { return activationCase_ == ActivationOneofCase.Tanh ? (global::Tensorflow.Tpu.OnlineYogiParameters.Types.TanhActivation) activation_ : null; }
      set {
        activation_ = value;
        activationCase_ = value == null ? ActivationOneofCase.None : ActivationOneofCase.Tanh;
      }
    }

    private object activation_;
    /// <summary>Enum of possible cases for the "activation" oneof.</summary>
    public enum ActivationOneofCase {
      None = 0,
      Sign = 6,
      Tanh = 7,
    }
    private ActivationOneofCase activationCase_ = ActivationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationOneofCase ActivationCase {
      get { return activationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActivation() {
      activationCase_ = ActivationOneofCase.None;
      activation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnlineYogiParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnlineYogiParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L1, other.L1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L2, other.L2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta2, other.Beta2)) return false;
      if (!object.Equals(Sign, other.Sign)) return false;
      if (!object.Equals(Tanh, other.Tanh)) return false;
      if (ActivationCase != other.ActivationCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L1);
      if (L2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L2);
      if (Beta2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta2);
      if (activationCase_ == ActivationOneofCase.Sign) hash ^= Sign.GetHashCode();
      if (activationCase_ == ActivationOneofCase.Tanh) hash ^= Tanh.GetHashCode();
      hash ^= (int) activationCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L1 != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(L1);
      }
      if (L2 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(L2);
      }
      if (Beta2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Beta2);
      }
      if (activationCase_ == ActivationOneofCase.Sign) {
        output.WriteRawTag(50);
        output.WriteMessage(Sign);
      }
      if (activationCase_ == ActivationOneofCase.Tanh) {
        output.WriteRawTag(58);
        output.WriteMessage(Tanh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L1 != 0F) {
        size += 1 + 4;
      }
      if (L2 != 0F) {
        size += 1 + 4;
      }
      if (Beta2 != 0F) {
        size += 1 + 4;
      }
      if (activationCase_ == ActivationOneofCase.Sign) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sign);
      }
      if (activationCase_ == ActivationOneofCase.Tanh) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tanh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnlineYogiParameters other) {
      if (other == null) {
        return;
      }
      if (other.L1 != 0F) {
        L1 = other.L1;
      }
      if (other.L2 != 0F) {
        L2 = other.L2;
      }
      if (other.Beta2 != 0F) {
        Beta2 = other.Beta2;
      }
      switch (other.ActivationCase) {
        case ActivationOneofCase.Sign:
          if (Sign == null) {
            Sign = new global::Tensorflow.Tpu.OnlineYogiParameters.Types.SignActivation();
          }
          Sign.MergeFrom(other.Sign);
          break;
        case ActivationOneofCase.Tanh:
          if (Tanh == null) {
            Tanh = new global::Tensorflow.Tpu.OnlineYogiParameters.Types.TanhActivation();
          }
          Tanh.MergeFrom(other.Tanh);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            L1 = input.ReadFloat();
            break;
          }
          case 21: {
            L2 = input.ReadFloat();
            break;
          }
          case 29: {
            Beta2 = input.ReadFloat();
            break;
          }
          case 50: {
            global::Tensorflow.Tpu.OnlineYogiParameters.Types.SignActivation subBuilder = new global::Tensorflow.Tpu.OnlineYogiParameters.Types.SignActivation();
            if (activationCase_ == ActivationOneofCase.Sign) {
              subBuilder.MergeFrom(Sign);
            }
            input.ReadMessage(subBuilder);
            Sign = subBuilder;
            break;
          }
          case 58: {
            global::Tensorflow.Tpu.OnlineYogiParameters.Types.TanhActivation subBuilder = new global::Tensorflow.Tpu.OnlineYogiParameters.Types.TanhActivation();
            if (activationCase_ == ActivationOneofCase.Tanh) {
              subBuilder.MergeFrom(Tanh);
            }
            input.ReadMessage(subBuilder);
            Tanh = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OnlineYogiParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// x -> copysign(1, x) (i.e., return 1 for an input of +0 rather than 0).
      /// </summary>
      public sealed partial class SignActivation : pb::IMessage<SignActivation> {
        private static readonly pb::MessageParser<SignActivation> _parser = new pb::MessageParser<SignActivation>(() => new SignActivation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SignActivation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.OnlineYogiParameters.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignActivation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignActivation(SignActivation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignActivation Clone() {
          return new SignActivation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SignActivation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SignActivation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SignActivation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      /// <summary>
      /// x -> tanh(x * 10)
      /// </summary>
      public sealed partial class TanhActivation : pb::IMessage<TanhActivation> {
        private static readonly pb::MessageParser<TanhActivation> _parser = new pb::MessageParser<TanhActivation>(() => new TanhActivation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TanhActivation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.OnlineYogiParameters.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TanhActivation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TanhActivation(TanhActivation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TanhActivation Clone() {
          return new TanhActivation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TanhActivation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TanhActivation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TanhActivation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The online Yogi optimizer does not implement hyper-parameter update; use the
  /// dynamic learning rate feature instead, setting the learning rate to:
  /// user learning_rate * sqrt(1 - beta2^t) / (1 - beta1^t)
  /// Here, t is the current timestep.
  ///
  /// https://papers.nips.cc/paper/8186-adaptive-methods-for-nonconvex-optimization.pdf
  /// plus some extensions based on FTRL.
  ///
  /// Note that the code by default implements the lazy version of proximal Yogi.
  /// </summary>
  public sealed partial class ProximalYogiParameters : pb::IMessage<ProximalYogiParameters> {
    private static readonly pb::MessageParser<ProximalYogiParameters> _parser = new pb::MessageParser<ProximalYogiParameters>(() => new ProximalYogiParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProximalYogiParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProximalYogiParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProximalYogiParameters(ProximalYogiParameters other) : this() {
      l1_ = other.l1_;
      l2_ = other.l2_;
      beta1_ = other.beta1_;
      beta2_ = other.beta2_;
      epsilon_ = other.epsilon_;
      switch (other.ActivationCase) {
        case ActivationOneofCase.Sign:
          Sign = other.Sign.Clone();
          break;
        case ActivationOneofCase.Tanh:
          Tanh = other.Tanh.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProximalYogiParameters Clone() {
      return new ProximalYogiParameters(this);
    }

    /// <summary>Field number for the "l1" field.</summary>
    public const int L1FieldNumber = 1;
    private float l1_;
    /// <summary>
    /// The L1 regularization parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L1 {
      get { return l1_; }
      set {
        l1_ = value;
      }
    }

    /// <summary>Field number for the "l2" field.</summary>
    public const int L2FieldNumber = 2;
    private float l2_;
    /// <summary>
    /// The L2 regularization parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float L2 {
      get { return l2_; }
      set {
        l2_ = value;
      }
    }

    /// <summary>Field number for the "beta1" field.</summary>
    public const int Beta1FieldNumber = 3;
    private float beta1_;
    /// <summary>
    /// The exponential decay rate for the 1st moment estimates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta1 {
      get { return beta1_; }
      set {
        beta1_ = value;
      }
    }

    /// <summary>Field number for the "beta2" field.</summary>
    public const int Beta2FieldNumber = 4;
    private float beta2_;
    /// <summary>
    /// The exponential decay rate for the 2nd moment estimates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta2 {
      get { return beta2_; }
      set {
        beta2_ = value;
      }
    }

    /// <summary>Field number for the "epsilon" field.</summary>
    public const int EpsilonFieldNumber = 5;
    private float epsilon_;
    /// <summary>
    /// A constant trading off adaptivity and noise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Epsilon {
      get { return epsilon_; }
      set {
        epsilon_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.ProximalYogiParameters.Types.SignActivation Sign {
      get { return activationCase_ == ActivationOneofCase.Sign ? (global::Tensorflow.Tpu.ProximalYogiParameters.Types.SignActivation) activation_ : null; }
      set {
        activation_ = value;
        activationCase_ = value == null ? ActivationOneofCase.None : ActivationOneofCase.Sign;
      }
    }

    /// <summary>Field number for the "tanh" field.</summary>
    public const int TanhFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.ProximalYogiParameters.Types.TanhActivation Tanh {
      get { return activationCase_ == ActivationOneofCase.Tanh ? (global::Tensorflow.Tpu.ProximalYogiParameters.Types.TanhActivation) activation_ : null; }
      set {
        activation_ = value;
        activationCase_ = value == null ? ActivationOneofCase.None : ActivationOneofCase.Tanh;
      }
    }

    private object activation_;
    /// <summary>Enum of possible cases for the "activation" oneof.</summary>
    public enum ActivationOneofCase {
      None = 0,
      Sign = 8,
      Tanh = 9,
    }
    private ActivationOneofCase activationCase_ = ActivationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivationOneofCase ActivationCase {
      get { return activationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActivation() {
      activationCase_ = ActivationOneofCase.None;
      activation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProximalYogiParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProximalYogiParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L1, other.L1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(L2, other.L2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta1, other.Beta1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta2, other.Beta2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Epsilon, other.Epsilon)) return false;
      if (!object.Equals(Sign, other.Sign)) return false;
      if (!object.Equals(Tanh, other.Tanh)) return false;
      if (ActivationCase != other.ActivationCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L1);
      if (L2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(L2);
      if (Beta1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta1);
      if (Beta2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta2);
      if (Epsilon != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Epsilon);
      if (activationCase_ == ActivationOneofCase.Sign) hash ^= Sign.GetHashCode();
      if (activationCase_ == ActivationOneofCase.Tanh) hash ^= Tanh.GetHashCode();
      hash ^= (int) activationCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L1 != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(L1);
      }
      if (L2 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(L2);
      }
      if (Beta1 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Beta1);
      }
      if (Beta2 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Beta2);
      }
      if (Epsilon != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Epsilon);
      }
      if (activationCase_ == ActivationOneofCase.Sign) {
        output.WriteRawTag(66);
        output.WriteMessage(Sign);
      }
      if (activationCase_ == ActivationOneofCase.Tanh) {
        output.WriteRawTag(74);
        output.WriteMessage(Tanh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L1 != 0F) {
        size += 1 + 4;
      }
      if (L2 != 0F) {
        size += 1 + 4;
      }
      if (Beta1 != 0F) {
        size += 1 + 4;
      }
      if (Beta2 != 0F) {
        size += 1 + 4;
      }
      if (Epsilon != 0F) {
        size += 1 + 4;
      }
      if (activationCase_ == ActivationOneofCase.Sign) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sign);
      }
      if (activationCase_ == ActivationOneofCase.Tanh) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tanh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProximalYogiParameters other) {
      if (other == null) {
        return;
      }
      if (other.L1 != 0F) {
        L1 = other.L1;
      }
      if (other.L2 != 0F) {
        L2 = other.L2;
      }
      if (other.Beta1 != 0F) {
        Beta1 = other.Beta1;
      }
      if (other.Beta2 != 0F) {
        Beta2 = other.Beta2;
      }
      if (other.Epsilon != 0F) {
        Epsilon = other.Epsilon;
      }
      switch (other.ActivationCase) {
        case ActivationOneofCase.Sign:
          if (Sign == null) {
            Sign = new global::Tensorflow.Tpu.ProximalYogiParameters.Types.SignActivation();
          }
          Sign.MergeFrom(other.Sign);
          break;
        case ActivationOneofCase.Tanh:
          if (Tanh == null) {
            Tanh = new global::Tensorflow.Tpu.ProximalYogiParameters.Types.TanhActivation();
          }
          Tanh.MergeFrom(other.Tanh);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            L1 = input.ReadFloat();
            break;
          }
          case 21: {
            L2 = input.ReadFloat();
            break;
          }
          case 29: {
            Beta1 = input.ReadFloat();
            break;
          }
          case 37: {
            Beta2 = input.ReadFloat();
            break;
          }
          case 45: {
            Epsilon = input.ReadFloat();
            break;
          }
          case 66: {
            global::Tensorflow.Tpu.ProximalYogiParameters.Types.SignActivation subBuilder = new global::Tensorflow.Tpu.ProximalYogiParameters.Types.SignActivation();
            if (activationCase_ == ActivationOneofCase.Sign) {
              subBuilder.MergeFrom(Sign);
            }
            input.ReadMessage(subBuilder);
            Sign = subBuilder;
            break;
          }
          case 74: {
            global::Tensorflow.Tpu.ProximalYogiParameters.Types.TanhActivation subBuilder = new global::Tensorflow.Tpu.ProximalYogiParameters.Types.TanhActivation();
            if (activationCase_ == ActivationOneofCase.Tanh) {
              subBuilder.MergeFrom(Tanh);
            }
            input.ReadMessage(subBuilder);
            Tanh = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ProximalYogiParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// x -> copysign(1, x) (i.e., return 1 for an input of +0 rather than 0).
      /// </summary>
      public sealed partial class SignActivation : pb::IMessage<SignActivation> {
        private static readonly pb::MessageParser<SignActivation> _parser = new pb::MessageParser<SignActivation>(() => new SignActivation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SignActivation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.ProximalYogiParameters.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignActivation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignActivation(SignActivation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignActivation Clone() {
          return new SignActivation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SignActivation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SignActivation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SignActivation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      /// <summary>
      /// x -> tanh(x * 10)
      /// </summary>
      public sealed partial class TanhActivation : pb::IMessage<TanhActivation> {
        private static readonly pb::MessageParser<TanhActivation> _parser = new pb::MessageParser<TanhActivation>(() => new TanhActivation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TanhActivation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.ProximalYogiParameters.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TanhActivation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TanhActivation(TanhActivation other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TanhActivation Clone() {
          return new TanhActivation(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TanhActivation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TanhActivation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TanhActivation other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Status of using gradient accumulation (doing two passes over the input
  /// gradients: one to accumulate them into a temporary array and another to apply
  /// them using the actual optimization algorithm). The extra message is to wrap
  /// the enum for scoping.
  /// </summary>
  public sealed partial class GradientAccumulationStatus : pb::IMessage<GradientAccumulationStatus> {
    private static readonly pb::MessageParser<GradientAccumulationStatus> _parser = new pb::MessageParser<GradientAccumulationStatus>(() => new GradientAccumulationStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradientAccumulationStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradientAccumulationStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradientAccumulationStatus(GradientAccumulationStatus other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradientAccumulationStatus Clone() {
      return new GradientAccumulationStatus(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradientAccumulationStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradientAccumulationStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradientAccumulationStatus other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GradientAccumulationStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// if UNSPECIFIED (default), gradient accumulation is ENABLED.
      /// </summary>
      public enum Status {
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("ENABLED")] Enabled = 1,
        [pbr::OriginalName("DISABLED")] Disabled = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Configuration proto for hot ID optimization. This is an experimental feature
  /// that is currently disabled (by default).
  /// </summary>
  public sealed partial class HotIdReplicationConfiguration : pb::IMessage<HotIdReplicationConfiguration> {
    private static readonly pb::MessageParser<HotIdReplicationConfiguration> _parser = new pb::MessageParser<HotIdReplicationConfiguration>(() => new HotIdReplicationConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HotIdReplicationConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotIdReplicationConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotIdReplicationConfiguration(HotIdReplicationConfiguration other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HotIdReplicationConfiguration Clone() {
      return new HotIdReplicationConfiguration(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Tensorflow.Tpu.HotIdReplicationConfiguration.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.HotIdReplicationConfiguration.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HotIdReplicationConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HotIdReplicationConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HotIdReplicationConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Tensorflow.Tpu.HotIdReplicationConfiguration.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HotIdReplicationConfiguration message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Whether to enable or disable hot ID optimization.
      /// If UNSPECIFIED (default), hot ID optimization is DISABLED.
      /// </summary>
      public enum Status {
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("ENABLED")] Enabled = 1,
        [pbr::OriginalName("DISABLED")] Disabled = 2,
      }

    }
    #endregion

  }

  public sealed partial class OptimizationParameters : pb::IMessage<OptimizationParameters> {
    private static readonly pb::MessageParser<OptimizationParameters> _parser = new pb::MessageParser<OptimizationParameters>(() => new OptimizationParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptimizationParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizationParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizationParameters(OptimizationParameters other) : this() {
      learningRate_ = other.learningRate_ != null ? other.learningRate_.Clone() : null;
      clippingLimits_ = other.clippingLimits_ != null ? other.clippingLimits_.Clone() : null;
      gradientClippingLimits_ = other.gradientClippingLimits_ != null ? other.gradientClippingLimits_.Clone() : null;
      weightDecayFactor_ = other.weightDecayFactor_;
      gradientAccumulationStatus_ = other.gradientAccumulationStatus_;
      hotIdReplicationConfiguration_ = other.hotIdReplicationConfiguration_ != null ? other.hotIdReplicationConfiguration_.Clone() : null;
      switch (other.ParametersCase) {
        case ParametersOneofCase.Adagrad:
          Adagrad = other.Adagrad.Clone();
          break;
        case ParametersOneofCase.BoundedAdagrad:
          BoundedAdagrad = other.BoundedAdagrad.Clone();
          break;
        case ParametersOneofCase.StochasticGradientDescent:
          StochasticGradientDescent = other.StochasticGradientDescent.Clone();
          break;
        case ParametersOneofCase.Ftrl:
          Ftrl = other.Ftrl.Clone();
          break;
        case ParametersOneofCase.Adam:
          Adam = other.Adam.Clone();
          break;
        case ParametersOneofCase.Momentum:
          Momentum = other.Momentum.Clone();
          break;
        case ParametersOneofCase.RmsProp:
          RmsProp = other.RmsProp.Clone();
          break;
        case ParametersOneofCase.CenteredRmsProp:
          CenteredRmsProp = other.CenteredRmsProp.Clone();
          break;
        case ParametersOneofCase.MdlAdagradLight:
          MdlAdagradLight = other.MdlAdagradLight.Clone();
          break;
        case ParametersOneofCase.Adadelta:
          Adadelta = other.Adadelta.Clone();
          break;
        case ParametersOneofCase.ProximalAdagrad:
          ProximalAdagrad = other.ProximalAdagrad.Clone();
          break;
        case ParametersOneofCase.OnlineYogi:
          OnlineYogi = other.OnlineYogi.Clone();
          break;
        case ParametersOneofCase.ProximalYogi:
          ProximalYogi = other.ProximalYogi.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizationParameters Clone() {
      return new OptimizationParameters(this);
    }

    /// <summary>Field number for the "learning_rate" field.</summary>
    public const int LearningRateFieldNumber = 13;
    private global::Tensorflow.Tpu.LearningRate learningRate_;
    /// <summary>
    /// Learning rate used for updating the embedding layer parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.LearningRate LearningRate {
      get { return learningRate_; }
      set {
        learningRate_ = value;
      }
    }

    /// <summary>Field number for the "clipping_limits" field.</summary>
    public const int ClippingLimitsFieldNumber = 2;
    private global::Tensorflow.Tpu.ClippingLimits clippingLimits_;
    /// <summary>
    /// Limits to which to clip the weight values after the backward pass; not
    /// present means no limits are applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.ClippingLimits ClippingLimits {
      get { return clippingLimits_; }
      set {
        clippingLimits_ = value;
      }
    }

    /// <summary>Field number for the "gradient_clipping_limits" field.</summary>
    public const int GradientClippingLimitsFieldNumber = 7;
    private global::Tensorflow.Tpu.ClippingLimits gradientClippingLimits_;
    /// <summary>
    /// Limits to which to clip the backward pass gradient before using it for
    /// updates; not present means no limits are applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.ClippingLimits GradientClippingLimits {
      get { return gradientClippingLimits_; }
      set {
        gradientClippingLimits_ = value;
      }
    }

    /// <summary>Field number for the "weight_decay_factor" field.</summary>
    public const int WeightDecayFactorFieldNumber = 16;
    private float weightDecayFactor_;
    /// <summary>
    /// Amount of weight decay to apply; see weight_decay_optimizers.py for
    /// details. Almost all optimizers are supported with this option (MDL Adagrad
    /// Light does not work, and SGD does not behave as expected if it is enabled).
    /// Although there is no check, users who want weight decay will probably also
    /// want to enable gradient accumulation as well so that the decay will happen
    /// once per minibatch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeightDecayFactor {
      get { return weightDecayFactor_; }
      set {
        weightDecayFactor_ = value;
      }
    }

    /// <summary>Field number for the "gradient_accumulation_status" field.</summary>
    public const int GradientAccumulationStatusFieldNumber = 17;
    private global::Tensorflow.Tpu.GradientAccumulationStatus.Types.Status gradientAccumulationStatus_ = 0;
    /// <summary>
    /// Status of using gradient accumulation (doing two passes over the input
    /// gradients: one to accumulate them into a temporary array and another to
    /// apply them using the actual optimization algorithm).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.GradientAccumulationStatus.Types.Status GradientAccumulationStatus {
      get { return gradientAccumulationStatus_; }
      set {
        gradientAccumulationStatus_ = value;
      }
    }

    /// <summary>Field number for the "hot_id_replication_configuration" field.</summary>
    public const int HotIdReplicationConfigurationFieldNumber = 18;
    private global::Tensorflow.Tpu.HotIdReplicationConfiguration hotIdReplicationConfiguration_;
    /// <summary>
    /// Configuration proto for hot ID replication. This is an experimental
    /// feature that is currently disabled (by default).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.HotIdReplicationConfiguration HotIdReplicationConfiguration {
      get { return hotIdReplicationConfiguration_; }
      set {
        hotIdReplicationConfiguration_ = value;
      }
    }

    /// <summary>Field number for the "adagrad" field.</summary>
    public const int AdagradFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.AdagradParameters Adagrad {
      get { return parametersCase_ == ParametersOneofCase.Adagrad ? (global::Tensorflow.Tpu.AdagradParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.Adagrad;
      }
    }

    /// <summary>Field number for the "bounded_adagrad" field.</summary>
    public const int BoundedAdagradFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.BoundedAdagradParameters BoundedAdagrad {
      get { return parametersCase_ == ParametersOneofCase.BoundedAdagrad ? (global::Tensorflow.Tpu.BoundedAdagradParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.BoundedAdagrad;
      }
    }

    /// <summary>Field number for the "stochastic_gradient_descent" field.</summary>
    public const int StochasticGradientDescentFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.StochasticGradientDescentParameters StochasticGradientDescent {
      get { return parametersCase_ == ParametersOneofCase.StochasticGradientDescent ? (global::Tensorflow.Tpu.StochasticGradientDescentParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.StochasticGradientDescent;
      }
    }

    /// <summary>Field number for the "ftrl" field.</summary>
    public const int FtrlFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.FtrlParameters Ftrl {
      get { return parametersCase_ == ParametersOneofCase.Ftrl ? (global::Tensorflow.Tpu.FtrlParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.Ftrl;
      }
    }

    /// <summary>Field number for the "adam" field.</summary>
    public const int AdamFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.AdamParameters Adam {
      get { return parametersCase_ == ParametersOneofCase.Adam ? (global::Tensorflow.Tpu.AdamParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.Adam;
      }
    }

    /// <summary>Field number for the "momentum" field.</summary>
    public const int MomentumFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.MomentumParameters Momentum {
      get { return parametersCase_ == ParametersOneofCase.Momentum ? (global::Tensorflow.Tpu.MomentumParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.Momentum;
      }
    }

    /// <summary>Field number for the "rms_prop" field.</summary>
    public const int RmsPropFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.RmsPropParameters RmsProp {
      get { return parametersCase_ == ParametersOneofCase.RmsProp ? (global::Tensorflow.Tpu.RmsPropParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.RmsProp;
      }
    }

    /// <summary>Field number for the "centered_rms_prop" field.</summary>
    public const int CenteredRmsPropFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.CenteredRmsPropParameters CenteredRmsProp {
      get { return parametersCase_ == ParametersOneofCase.CenteredRmsProp ? (global::Tensorflow.Tpu.CenteredRmsPropParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.CenteredRmsProp;
      }
    }

    /// <summary>Field number for the "mdl_adagrad_light" field.</summary>
    public const int MdlAdagradLightFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.MdlAdagradLightParameters MdlAdagradLight {
      get { return parametersCase_ == ParametersOneofCase.MdlAdagradLight ? (global::Tensorflow.Tpu.MdlAdagradLightParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.MdlAdagradLight;
      }
    }

    /// <summary>Field number for the "adadelta" field.</summary>
    public const int AdadeltaFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.AdadeltaParameters Adadelta {
      get { return parametersCase_ == ParametersOneofCase.Adadelta ? (global::Tensorflow.Tpu.AdadeltaParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.Adadelta;
      }
    }

    /// <summary>Field number for the "proximal_adagrad" field.</summary>
    public const int ProximalAdagradFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.ProximalAdagradParameters ProximalAdagrad {
      get { return parametersCase_ == ParametersOneofCase.ProximalAdagrad ? (global::Tensorflow.Tpu.ProximalAdagradParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.ProximalAdagrad;
      }
    }

    /// <summary>Field number for the "online_yogi" field.</summary>
    public const int OnlineYogiFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.OnlineYogiParameters OnlineYogi {
      get { return parametersCase_ == ParametersOneofCase.OnlineYogi ? (global::Tensorflow.Tpu.OnlineYogiParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.OnlineYogi;
      }
    }

    /// <summary>Field number for the "proximal_yogi" field.</summary>
    public const int ProximalYogiFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.ProximalYogiParameters ProximalYogi {
      get { return parametersCase_ == ParametersOneofCase.ProximalYogi ? (global::Tensorflow.Tpu.ProximalYogiParameters) parameters_ : null; }
      set {
        parameters_ = value;
        parametersCase_ = value == null ? ParametersOneofCase.None : ParametersOneofCase.ProximalYogi;
      }
    }

    private object parameters_;
    /// <summary>Enum of possible cases for the "parameters" oneof.</summary>
    public enum ParametersOneofCase {
      None = 0,
      Adagrad = 3,
      BoundedAdagrad = 19,
      StochasticGradientDescent = 4,
      Ftrl = 5,
      Adam = 6,
      Momentum = 8,
      RmsProp = 9,
      CenteredRmsProp = 10,
      MdlAdagradLight = 11,
      Adadelta = 12,
      ProximalAdagrad = 14,
      OnlineYogi = 20,
      ProximalYogi = 21,
    }
    private ParametersOneofCase parametersCase_ = ParametersOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParametersOneofCase ParametersCase {
      get { return parametersCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParameters() {
      parametersCase_ = ParametersOneofCase.None;
      parameters_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptimizationParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptimizationParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LearningRate, other.LearningRate)) return false;
      if (!object.Equals(ClippingLimits, other.ClippingLimits)) return false;
      if (!object.Equals(GradientClippingLimits, other.GradientClippingLimits)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeightDecayFactor, other.WeightDecayFactor)) return false;
      if (GradientAccumulationStatus != other.GradientAccumulationStatus) return false;
      if (!object.Equals(HotIdReplicationConfiguration, other.HotIdReplicationConfiguration)) return false;
      if (!object.Equals(Adagrad, other.Adagrad)) return false;
      if (!object.Equals(BoundedAdagrad, other.BoundedAdagrad)) return false;
      if (!object.Equals(StochasticGradientDescent, other.StochasticGradientDescent)) return false;
      if (!object.Equals(Ftrl, other.Ftrl)) return false;
      if (!object.Equals(Adam, other.Adam)) return false;
      if (!object.Equals(Momentum, other.Momentum)) return false;
      if (!object.Equals(RmsProp, other.RmsProp)) return false;
      if (!object.Equals(CenteredRmsProp, other.CenteredRmsProp)) return false;
      if (!object.Equals(MdlAdagradLight, other.MdlAdagradLight)) return false;
      if (!object.Equals(Adadelta, other.Adadelta)) return false;
      if (!object.Equals(ProximalAdagrad, other.ProximalAdagrad)) return false;
      if (!object.Equals(OnlineYogi, other.OnlineYogi)) return false;
      if (!object.Equals(ProximalYogi, other.ProximalYogi)) return false;
      if (ParametersCase != other.ParametersCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (learningRate_ != null) hash ^= LearningRate.GetHashCode();
      if (clippingLimits_ != null) hash ^= ClippingLimits.GetHashCode();
      if (gradientClippingLimits_ != null) hash ^= GradientClippingLimits.GetHashCode();
      if (WeightDecayFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeightDecayFactor);
      if (GradientAccumulationStatus != 0) hash ^= GradientAccumulationStatus.GetHashCode();
      if (hotIdReplicationConfiguration_ != null) hash ^= HotIdReplicationConfiguration.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.Adagrad) hash ^= Adagrad.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.BoundedAdagrad) hash ^= BoundedAdagrad.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.StochasticGradientDescent) hash ^= StochasticGradientDescent.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.Ftrl) hash ^= Ftrl.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.Adam) hash ^= Adam.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.Momentum) hash ^= Momentum.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.RmsProp) hash ^= RmsProp.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.CenteredRmsProp) hash ^= CenteredRmsProp.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.MdlAdagradLight) hash ^= MdlAdagradLight.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.Adadelta) hash ^= Adadelta.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.ProximalAdagrad) hash ^= ProximalAdagrad.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.OnlineYogi) hash ^= OnlineYogi.GetHashCode();
      if (parametersCase_ == ParametersOneofCase.ProximalYogi) hash ^= ProximalYogi.GetHashCode();
      hash ^= (int) parametersCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clippingLimits_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClippingLimits);
      }
      if (parametersCase_ == ParametersOneofCase.Adagrad) {
        output.WriteRawTag(26);
        output.WriteMessage(Adagrad);
      }
      if (parametersCase_ == ParametersOneofCase.StochasticGradientDescent) {
        output.WriteRawTag(34);
        output.WriteMessage(StochasticGradientDescent);
      }
      if (parametersCase_ == ParametersOneofCase.Ftrl) {
        output.WriteRawTag(42);
        output.WriteMessage(Ftrl);
      }
      if (parametersCase_ == ParametersOneofCase.Adam) {
        output.WriteRawTag(50);
        output.WriteMessage(Adam);
      }
      if (gradientClippingLimits_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GradientClippingLimits);
      }
      if (parametersCase_ == ParametersOneofCase.Momentum) {
        output.WriteRawTag(66);
        output.WriteMessage(Momentum);
      }
      if (parametersCase_ == ParametersOneofCase.RmsProp) {
        output.WriteRawTag(74);
        output.WriteMessage(RmsProp);
      }
      if (parametersCase_ == ParametersOneofCase.CenteredRmsProp) {
        output.WriteRawTag(82);
        output.WriteMessage(CenteredRmsProp);
      }
      if (parametersCase_ == ParametersOneofCase.MdlAdagradLight) {
        output.WriteRawTag(90);
        output.WriteMessage(MdlAdagradLight);
      }
      if (parametersCase_ == ParametersOneofCase.Adadelta) {
        output.WriteRawTag(98);
        output.WriteMessage(Adadelta);
      }
      if (learningRate_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(LearningRate);
      }
      if (parametersCase_ == ParametersOneofCase.ProximalAdagrad) {
        output.WriteRawTag(114);
        output.WriteMessage(ProximalAdagrad);
      }
      if (WeightDecayFactor != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(WeightDecayFactor);
      }
      if (GradientAccumulationStatus != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) GradientAccumulationStatus);
      }
      if (hotIdReplicationConfiguration_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(HotIdReplicationConfiguration);
      }
      if (parametersCase_ == ParametersOneofCase.BoundedAdagrad) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(BoundedAdagrad);
      }
      if (parametersCase_ == ParametersOneofCase.OnlineYogi) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(OnlineYogi);
      }
      if (parametersCase_ == ParametersOneofCase.ProximalYogi) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ProximalYogi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (learningRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LearningRate);
      }
      if (clippingLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClippingLimits);
      }
      if (gradientClippingLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GradientClippingLimits);
      }
      if (WeightDecayFactor != 0F) {
        size += 2 + 4;
      }
      if (GradientAccumulationStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GradientAccumulationStatus);
      }
      if (hotIdReplicationConfiguration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HotIdReplicationConfiguration);
      }
      if (parametersCase_ == ParametersOneofCase.Adagrad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Adagrad);
      }
      if (parametersCase_ == ParametersOneofCase.BoundedAdagrad) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BoundedAdagrad);
      }
      if (parametersCase_ == ParametersOneofCase.StochasticGradientDescent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StochasticGradientDescent);
      }
      if (parametersCase_ == ParametersOneofCase.Ftrl) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ftrl);
      }
      if (parametersCase_ == ParametersOneofCase.Adam) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Adam);
      }
      if (parametersCase_ == ParametersOneofCase.Momentum) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Momentum);
      }
      if (parametersCase_ == ParametersOneofCase.RmsProp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RmsProp);
      }
      if (parametersCase_ == ParametersOneofCase.CenteredRmsProp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenteredRmsProp);
      }
      if (parametersCase_ == ParametersOneofCase.MdlAdagradLight) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MdlAdagradLight);
      }
      if (parametersCase_ == ParametersOneofCase.Adadelta) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Adadelta);
      }
      if (parametersCase_ == ParametersOneofCase.ProximalAdagrad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProximalAdagrad);
      }
      if (parametersCase_ == ParametersOneofCase.OnlineYogi) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OnlineYogi);
      }
      if (parametersCase_ == ParametersOneofCase.ProximalYogi) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProximalYogi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptimizationParameters other) {
      if (other == null) {
        return;
      }
      if (other.learningRate_ != null) {
        if (learningRate_ == null) {
          LearningRate = new global::Tensorflow.Tpu.LearningRate();
        }
        LearningRate.MergeFrom(other.LearningRate);
      }
      if (other.clippingLimits_ != null) {
        if (clippingLimits_ == null) {
          ClippingLimits = new global::Tensorflow.Tpu.ClippingLimits();
        }
        ClippingLimits.MergeFrom(other.ClippingLimits);
      }
      if (other.gradientClippingLimits_ != null) {
        if (gradientClippingLimits_ == null) {
          GradientClippingLimits = new global::Tensorflow.Tpu.ClippingLimits();
        }
        GradientClippingLimits.MergeFrom(other.GradientClippingLimits);
      }
      if (other.WeightDecayFactor != 0F) {
        WeightDecayFactor = other.WeightDecayFactor;
      }
      if (other.GradientAccumulationStatus != 0) {
        GradientAccumulationStatus = other.GradientAccumulationStatus;
      }
      if (other.hotIdReplicationConfiguration_ != null) {
        if (hotIdReplicationConfiguration_ == null) {
          HotIdReplicationConfiguration = new global::Tensorflow.Tpu.HotIdReplicationConfiguration();
        }
        HotIdReplicationConfiguration.MergeFrom(other.HotIdReplicationConfiguration);
      }
      switch (other.ParametersCase) {
        case ParametersOneofCase.Adagrad:
          if (Adagrad == null) {
            Adagrad = new global::Tensorflow.Tpu.AdagradParameters();
          }
          Adagrad.MergeFrom(other.Adagrad);
          break;
        case ParametersOneofCase.BoundedAdagrad:
          if (BoundedAdagrad == null) {
            BoundedAdagrad = new global::Tensorflow.Tpu.BoundedAdagradParameters();
          }
          BoundedAdagrad.MergeFrom(other.BoundedAdagrad);
          break;
        case ParametersOneofCase.StochasticGradientDescent:
          if (StochasticGradientDescent == null) {
            StochasticGradientDescent = new global::Tensorflow.Tpu.StochasticGradientDescentParameters();
          }
          StochasticGradientDescent.MergeFrom(other.StochasticGradientDescent);
          break;
        case ParametersOneofCase.Ftrl:
          if (Ftrl == null) {
            Ftrl = new global::Tensorflow.Tpu.FtrlParameters();
          }
          Ftrl.MergeFrom(other.Ftrl);
          break;
        case ParametersOneofCase.Adam:
          if (Adam == null) {
            Adam = new global::Tensorflow.Tpu.AdamParameters();
          }
          Adam.MergeFrom(other.Adam);
          break;
        case ParametersOneofCase.Momentum:
          if (Momentum == null) {
            Momentum = new global::Tensorflow.Tpu.MomentumParameters();
          }
          Momentum.MergeFrom(other.Momentum);
          break;
        case ParametersOneofCase.RmsProp:
          if (RmsProp == null) {
            RmsProp = new global::Tensorflow.Tpu.RmsPropParameters();
          }
          RmsProp.MergeFrom(other.RmsProp);
          break;
        case ParametersOneofCase.CenteredRmsProp:
          if (CenteredRmsProp == null) {
            CenteredRmsProp = new global::Tensorflow.Tpu.CenteredRmsPropParameters();
          }
          CenteredRmsProp.MergeFrom(other.CenteredRmsProp);
          break;
        case ParametersOneofCase.MdlAdagradLight:
          if (MdlAdagradLight == null) {
            MdlAdagradLight = new global::Tensorflow.Tpu.MdlAdagradLightParameters();
          }
          MdlAdagradLight.MergeFrom(other.MdlAdagradLight);
          break;
        case ParametersOneofCase.Adadelta:
          if (Adadelta == null) {
            Adadelta = new global::Tensorflow.Tpu.AdadeltaParameters();
          }
          Adadelta.MergeFrom(other.Adadelta);
          break;
        case ParametersOneofCase.ProximalAdagrad:
          if (ProximalAdagrad == null) {
            ProximalAdagrad = new global::Tensorflow.Tpu.ProximalAdagradParameters();
          }
          ProximalAdagrad.MergeFrom(other.ProximalAdagrad);
          break;
        case ParametersOneofCase.OnlineYogi:
          if (OnlineYogi == null) {
            OnlineYogi = new global::Tensorflow.Tpu.OnlineYogiParameters();
          }
          OnlineYogi.MergeFrom(other.OnlineYogi);
          break;
        case ParametersOneofCase.ProximalYogi:
          if (ProximalYogi == null) {
            ProximalYogi = new global::Tensorflow.Tpu.ProximalYogiParameters();
          }
          ProximalYogi.MergeFrom(other.ProximalYogi);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (clippingLimits_ == null) {
              ClippingLimits = new global::Tensorflow.Tpu.ClippingLimits();
            }
            input.ReadMessage(ClippingLimits);
            break;
          }
          case 26: {
            global::Tensorflow.Tpu.AdagradParameters subBuilder = new global::Tensorflow.Tpu.AdagradParameters();
            if (parametersCase_ == ParametersOneofCase.Adagrad) {
              subBuilder.MergeFrom(Adagrad);
            }
            input.ReadMessage(subBuilder);
            Adagrad = subBuilder;
            break;
          }
          case 34: {
            global::Tensorflow.Tpu.StochasticGradientDescentParameters subBuilder = new global::Tensorflow.Tpu.StochasticGradientDescentParameters();
            if (parametersCase_ == ParametersOneofCase.StochasticGradientDescent) {
              subBuilder.MergeFrom(StochasticGradientDescent);
            }
            input.ReadMessage(subBuilder);
            StochasticGradientDescent = subBuilder;
            break;
          }
          case 42: {
            global::Tensorflow.Tpu.FtrlParameters subBuilder = new global::Tensorflow.Tpu.FtrlParameters();
            if (parametersCase_ == ParametersOneofCase.Ftrl) {
              subBuilder.MergeFrom(Ftrl);
            }
            input.ReadMessage(subBuilder);
            Ftrl = subBuilder;
            break;
          }
          case 50: {
            global::Tensorflow.Tpu.AdamParameters subBuilder = new global::Tensorflow.Tpu.AdamParameters();
            if (parametersCase_ == ParametersOneofCase.Adam) {
              subBuilder.MergeFrom(Adam);
            }
            input.ReadMessage(subBuilder);
            Adam = subBuilder;
            break;
          }
          case 58: {
            if (gradientClippingLimits_ == null) {
              GradientClippingLimits = new global::Tensorflow.Tpu.ClippingLimits();
            }
            input.ReadMessage(GradientClippingLimits);
            break;
          }
          case 66: {
            global::Tensorflow.Tpu.MomentumParameters subBuilder = new global::Tensorflow.Tpu.MomentumParameters();
            if (parametersCase_ == ParametersOneofCase.Momentum) {
              subBuilder.MergeFrom(Momentum);
            }
            input.ReadMessage(subBuilder);
            Momentum = subBuilder;
            break;
          }
          case 74: {
            global::Tensorflow.Tpu.RmsPropParameters subBuilder = new global::Tensorflow.Tpu.RmsPropParameters();
            if (parametersCase_ == ParametersOneofCase.RmsProp) {
              subBuilder.MergeFrom(RmsProp);
            }
            input.ReadMessage(subBuilder);
            RmsProp = subBuilder;
            break;
          }
          case 82: {
            global::Tensorflow.Tpu.CenteredRmsPropParameters subBuilder = new global::Tensorflow.Tpu.CenteredRmsPropParameters();
            if (parametersCase_ == ParametersOneofCase.CenteredRmsProp) {
              subBuilder.MergeFrom(CenteredRmsProp);
            }
            input.ReadMessage(subBuilder);
            CenteredRmsProp = subBuilder;
            break;
          }
          case 90: {
            global::Tensorflow.Tpu.MdlAdagradLightParameters subBuilder = new global::Tensorflow.Tpu.MdlAdagradLightParameters();
            if (parametersCase_ == ParametersOneofCase.MdlAdagradLight) {
              subBuilder.MergeFrom(MdlAdagradLight);
            }
            input.ReadMessage(subBuilder);
            MdlAdagradLight = subBuilder;
            break;
          }
          case 98: {
            global::Tensorflow.Tpu.AdadeltaParameters subBuilder = new global::Tensorflow.Tpu.AdadeltaParameters();
            if (parametersCase_ == ParametersOneofCase.Adadelta) {
              subBuilder.MergeFrom(Adadelta);
            }
            input.ReadMessage(subBuilder);
            Adadelta = subBuilder;
            break;
          }
          case 106: {
            if (learningRate_ == null) {
              LearningRate = new global::Tensorflow.Tpu.LearningRate();
            }
            input.ReadMessage(LearningRate);
            break;
          }
          case 114: {
            global::Tensorflow.Tpu.ProximalAdagradParameters subBuilder = new global::Tensorflow.Tpu.ProximalAdagradParameters();
            if (parametersCase_ == ParametersOneofCase.ProximalAdagrad) {
              subBuilder.MergeFrom(ProximalAdagrad);
            }
            input.ReadMessage(subBuilder);
            ProximalAdagrad = subBuilder;
            break;
          }
          case 133: {
            WeightDecayFactor = input.ReadFloat();
            break;
          }
          case 136: {
            GradientAccumulationStatus = (global::Tensorflow.Tpu.GradientAccumulationStatus.Types.Status) input.ReadEnum();
            break;
          }
          case 146: {
            if (hotIdReplicationConfiguration_ == null) {
              HotIdReplicationConfiguration = new global::Tensorflow.Tpu.HotIdReplicationConfiguration();
            }
            input.ReadMessage(HotIdReplicationConfiguration);
            break;
          }
          case 154: {
            global::Tensorflow.Tpu.BoundedAdagradParameters subBuilder = new global::Tensorflow.Tpu.BoundedAdagradParameters();
            if (parametersCase_ == ParametersOneofCase.BoundedAdagrad) {
              subBuilder.MergeFrom(BoundedAdagrad);
            }
            input.ReadMessage(subBuilder);
            BoundedAdagrad = subBuilder;
            break;
          }
          case 162: {
            global::Tensorflow.Tpu.OnlineYogiParameters subBuilder = new global::Tensorflow.Tpu.OnlineYogiParameters();
            if (parametersCase_ == ParametersOneofCase.OnlineYogi) {
              subBuilder.MergeFrom(OnlineYogi);
            }
            input.ReadMessage(subBuilder);
            OnlineYogi = subBuilder;
            break;
          }
          case 170: {
            global::Tensorflow.Tpu.ProximalYogiParameters subBuilder = new global::Tensorflow.Tpu.ProximalYogiParameters();
            if (parametersCase_ == ParametersOneofCase.ProximalYogi) {
              subBuilder.MergeFrom(ProximalYogi);
            }
            input.ReadMessage(subBuilder);
            ProximalYogi = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specification of an optimization algorithm's state variables (both the main
  /// value vector and any extra accumulators, etc.). This proto is only used
  /// internally by the TPU software and is not exposed directly to the TF model.
  /// </summary>
  public sealed partial class StateVariableSpecification : pb::IMessage<StateVariableSpecification> {
    private static readonly pb::MessageParser<StateVariableSpecification> _parser = new pb::MessageParser<StateVariableSpecification>(() => new StateVariableSpecification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateVariableSpecification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tpu.OptimizationParametersReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateVariableSpecification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateVariableSpecification(StateVariableSpecification other) : this() {
      name_ = other.name_;
      switch (other.UsageCase) {
        case UsageOneofCase.UserDefined:
          UserDefined = other.UserDefined.Clone();
          break;
        case UsageOneofCase.FillWithConstant:
          FillWithConstant = other.FillWithConstant.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateVariableSpecification Clone() {
      return new StateVariableSpecification(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Parameter name for the state variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_defined" field.</summary>
    public const int UserDefinedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.StateVariableSpecification.Types.UserDefined UserDefined {
      get { return usageCase_ == UsageOneofCase.UserDefined ? (global::Tensorflow.Tpu.StateVariableSpecification.Types.UserDefined) usage_ : null; }
      set {
        usage_ = value;
        usageCase_ = value == null ? UsageOneofCase.None : UsageOneofCase.UserDefined;
      }
    }

    /// <summary>Field number for the "fill_with_constant" field.</summary>
    public const int FillWithConstantFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Tpu.StateVariableSpecification.Types.FillWithConstant FillWithConstant {
      get { return usageCase_ == UsageOneofCase.FillWithConstant ? (global::Tensorflow.Tpu.StateVariableSpecification.Types.FillWithConstant) usage_ : null; }
      set {
        usage_ = value;
        usageCase_ = value == null ? UsageOneofCase.None : UsageOneofCase.FillWithConstant;
      }
    }

    private object usage_;
    /// <summary>Enum of possible cases for the "usage" oneof.</summary>
    public enum UsageOneofCase {
      None = 0,
      UserDefined = 2,
      FillWithConstant = 3,
    }
    private UsageOneofCase usageCase_ = UsageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsageOneofCase UsageCase {
      get { return usageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUsage() {
      usageCase_ = UsageOneofCase.None;
      usage_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateVariableSpecification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateVariableSpecification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(UserDefined, other.UserDefined)) return false;
      if (!object.Equals(FillWithConstant, other.FillWithConstant)) return false;
      if (UsageCase != other.UsageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (usageCase_ == UsageOneofCase.UserDefined) hash ^= UserDefined.GetHashCode();
      if (usageCase_ == UsageOneofCase.FillWithConstant) hash ^= FillWithConstant.GetHashCode();
      hash ^= (int) usageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (usageCase_ == UsageOneofCase.UserDefined) {
        output.WriteRawTag(18);
        output.WriteMessage(UserDefined);
      }
      if (usageCase_ == UsageOneofCase.FillWithConstant) {
        output.WriteRawTag(26);
        output.WriteMessage(FillWithConstant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (usageCase_ == UsageOneofCase.UserDefined) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserDefined);
      }
      if (usageCase_ == UsageOneofCase.FillWithConstant) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FillWithConstant);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateVariableSpecification other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      switch (other.UsageCase) {
        case UsageOneofCase.UserDefined:
          if (UserDefined == null) {
            UserDefined = new global::Tensorflow.Tpu.StateVariableSpecification.Types.UserDefined();
          }
          UserDefined.MergeFrom(other.UserDefined);
          break;
        case UsageOneofCase.FillWithConstant:
          if (FillWithConstant == null) {
            FillWithConstant = new global::Tensorflow.Tpu.StateVariableSpecification.Types.FillWithConstant();
          }
          FillWithConstant.MergeFrom(other.FillWithConstant);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            global::Tensorflow.Tpu.StateVariableSpecification.Types.UserDefined subBuilder = new global::Tensorflow.Tpu.StateVariableSpecification.Types.UserDefined();
            if (usageCase_ == UsageOneofCase.UserDefined) {
              subBuilder.MergeFrom(UserDefined);
            }
            input.ReadMessage(subBuilder);
            UserDefined = subBuilder;
            break;
          }
          case 26: {
            global::Tensorflow.Tpu.StateVariableSpecification.Types.FillWithConstant subBuilder = new global::Tensorflow.Tpu.StateVariableSpecification.Types.FillWithConstant();
            if (usageCase_ == UsageOneofCase.FillWithConstant) {
              subBuilder.MergeFrom(FillWithConstant);
            }
            input.ReadMessage(subBuilder);
            FillWithConstant = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StateVariableSpecification message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A normal state variable that should be saved and restored in checkpoints
      /// and used as an input or output to non-debug TensorFlow ops.
      /// </summary>
      public sealed partial class UserDefined : pb::IMessage<UserDefined> {
        private static readonly pb::MessageParser<UserDefined> _parser = new pb::MessageParser<UserDefined>(() => new UserDefined());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserDefined> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.StateVariableSpecification.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserDefined() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserDefined(UserDefined other) : this() {
          paddingInitialValue_ = other.paddingInitialValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserDefined Clone() {
          return new UserDefined(this);
        }

        /// <summary>Field number for the "padding_initial_value" field.</summary>
        public const int PaddingInitialValueFieldNumber = 1;
        private double paddingInitialValue_;
        /// <summary>
        /// For padding embedding rows, this field specifies the initial value to be
        /// used. Separate initial values need to be specified for the embeddings and
        /// any extra accumulators. The initial values should be specified so as to
        /// maintain two invariants during model training:
        /// (1) The embedding vector multiplied by zero returns a vector containing
        ///     all zeros. To maintain this invariant, the embedding values should
        ///     never be NaNs or +-infinity.
        /// (2) Repeatedly applying the optimizer using a gradient vector of all
        ///     zeros does not cause the embeddings or slot variables to become NaNs
        ///     or +-infinity.
        /// The padding row is looked up when no embedding IDs are present for a
        /// feature. The semantics of embedding lookup dictate that the output must
        /// be zero under this scenario.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PaddingInitialValue {
          get { return paddingInitialValue_; }
          set {
            paddingInitialValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserDefined);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserDefined other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PaddingInitialValue, other.PaddingInitialValue)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PaddingInitialValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PaddingInitialValue);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PaddingInitialValue != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(PaddingInitialValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PaddingInitialValue != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserDefined other) {
          if (other == null) {
            return;
          }
          if (other.PaddingInitialValue != 0D) {
            PaddingInitialValue = other.PaddingInitialValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                PaddingInitialValue = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A state variable that should be filled with a constant and normally hidden
      /// from users (used for intermediate gradients being accumulated, for
      /// example).
      /// </summary>
      public sealed partial class FillWithConstant : pb::IMessage<FillWithConstant> {
        private static readonly pb::MessageParser<FillWithConstant> _parser = new pb::MessageParser<FillWithConstant>(() => new FillWithConstant());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FillWithConstant> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.Tpu.StateVariableSpecification.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FillWithConstant() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FillWithConstant(FillWithConstant other) : this() {
          initialValue_ = other.initialValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FillWithConstant Clone() {
          return new FillWithConstant(this);
        }

        /// <summary>Field number for the "initial_value" field.</summary>
        public const int InitialValueFieldNumber = 1;
        private double initialValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double InitialValue {
          get { return initialValue_; }
          set {
            initialValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FillWithConstant);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FillWithConstant other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitialValue, other.InitialValue)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InitialValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitialValue);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InitialValue != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(InitialValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InitialValue != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FillWithConstant other) {
          if (other == null) {
            return;
          }
          if (other.InitialValue != 0D) {
            InitialValue = other.InitialValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                InitialValue = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
