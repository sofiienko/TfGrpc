// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/autotuning.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/autotuning.proto</summary>
  public static partial class AutotuningReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/autotuning.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AutotuningReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cil0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvYXV0b3R1bmluZy5wcm90bxIK",
            "dGVuc29yZmxvdxoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90bxoeZ29vZ2xl",
            "L3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvIjsKDEN1ZG5uVmVyc2lvbhINCgVt",
            "YWpvchgBIAEoBRINCgVtaW5vchgCIAEoBRINCgVwYXRjaBgDIAEoBSIxChFD",
            "b21wdXRlQ2FwYWJpbGl0eRINCgVtYWpvchgBIAEoBRINCgVtaW5vchgCIAEo",
            "BSKKBQoOQXV0b3R1bmVSZXN1bHQSFQoNc2NyYXRjaF9ieXRlcxgIIAEoAxIr",
            "CghydW5fdGltZRgJIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI5",
            "CgdmYWlsdXJlGAcgASgLMigudGVuc29yZmxvdy5BdXRvdHVuZVJlc3VsdC5G",
            "YWlsdXJlUmVzdWx0EjIKBGNvbnYYBSABKAsyIi50ZW5zb3JmbG93LkF1dG90",
            "dW5lUmVzdWx0LkNvbnZLZXlIABIyCgRnZW1tGAYgASgLMiIudGVuc29yZmxv",
            "dy5BdXRvdHVuZVJlc3VsdC5HZW1tS2V5SAAa7QEKDUZhaWx1cmVSZXN1bHQS",
            "NAoEa2luZBgBIAEoDjImLnRlbnNvcmZsb3cuQXV0b3R1bmVSZXN1bHQuRmFp",
            "bHVyZUtpbmQSCwoDbXNnGAIgASgJEjwKDnJlZmVyZW5jZV9jb252GAsgASgL",
            "MiIudGVuc29yZmxvdy5BdXRvdHVuZVJlc3VsdC5Db252S2V5SAASPAoOcmVm",
            "ZXJlbmNlX2dlbW0YDCABKAsyIi50ZW5zb3JmbG93LkF1dG90dW5lUmVzdWx0",
            "LkdlbW1LZXlIABIWCg5idWZmZXJfYWRkcmVzcxgNIAEoA0IFCgNrZXkaOAoH",
            "Q29udktleRIRCglhbGdvcml0aG0YASABKAMSGgoSdGVuc29yX29wc19lbmFi",
            "bGVkGAIgASgIGhwKB0dlbW1LZXkSEQoJYWxnb3JpdGhtGAEgASgDIkIKC0Zh",
            "aWx1cmVLaW5kEgsKB1VOS05PV04QABIUChBSRURaT05FX01PRElGSUVEEAES",
            "EAoMV1JPTkdfUkVTVUxUEAJCBQoDa2V5Iv4BCg1BdXRvdHVuaW5nTG9nEiMK",
            "BWluc3RyGAEgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIrCgdyZXN1bHRz",
            "GAIgAygLMhoudGVuc29yZmxvdy5BdXRvdHVuZVJlc3VsdBIvCg1jdWRubl92",
            "ZXJzaW9uGAMgASgLMhgudGVuc29yZmxvdy5DdWRublZlcnNpb24SOQoSY29t",
            "cHV0ZV9jYXBhYmlsaXR5GAQgASgLMh0udGVuc29yZmxvdy5Db21wdXRlQ2Fw",
            "YWJpbGl0eRIZChFkZXZpY2VfcGNpX2J1c19pZBgFIAEoCRIUCgxibGFzX3Zl",
            "cnNpb24YBiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CudnnVersion), global::Tensorflow.CudnnVersion.Parser, new[]{ "Major", "Minor", "Patch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ComputeCapability), global::Tensorflow.ComputeCapability.Parser, new[]{ "Major", "Minor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.AutotuneResult), global::Tensorflow.AutotuneResult.Parser, new[]{ "ScratchBytes", "RunTime", "Failure", "Conv", "Gemm" }, new[]{ "Key" }, new[]{ typeof(global::Tensorflow.AutotuneResult.Types.FailureKind) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.AutotuneResult.Types.FailureResult), global::Tensorflow.AutotuneResult.Types.FailureResult.Parser, new[]{ "Kind", "Msg", "ReferenceConv", "ReferenceGemm", "BufferAddress" }, new[]{ "Key" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.AutotuneResult.Types.ConvKey), global::Tensorflow.AutotuneResult.Types.ConvKey.Parser, new[]{ "Algorithm", "TensorOpsEnabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.AutotuneResult.Types.GemmKey), global::Tensorflow.AutotuneResult.Types.GemmKey.Parser, new[]{ "Algorithm" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.AutotuningLog), global::Tensorflow.AutotuningLog.Parser, new[]{ "Instr", "Results", "CudnnVersion", "ComputeCapability", "DevicePciBusId", "BlasVersion" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CudnnVersion : pb::IMessage<CudnnVersion> {
    private static readonly pb::MessageParser<CudnnVersion> _parser = new pb::MessageParser<CudnnVersion>(() => new CudnnVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CudnnVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.AutotuningReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CudnnVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CudnnVersion(CudnnVersion other) : this() {
      major_ = other.major_;
      minor_ = other.minor_;
      patch_ = other.patch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CudnnVersion Clone() {
      return new CudnnVersion(this);
    }

    /// <summary>Field number for the "major" field.</summary>
    public const int MajorFieldNumber = 1;
    private int major_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Major {
      get { return major_; }
      set {
        major_ = value;
      }
    }

    /// <summary>Field number for the "minor" field.</summary>
    public const int MinorFieldNumber = 2;
    private int minor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minor {
      get { return minor_; }
      set {
        minor_ = value;
      }
    }

    /// <summary>Field number for the "patch" field.</summary>
    public const int PatchFieldNumber = 3;
    private int patch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Patch {
      get { return patch_; }
      set {
        patch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CudnnVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CudnnVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Major != other.Major) return false;
      if (Minor != other.Minor) return false;
      if (Patch != other.Patch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Major != 0) hash ^= Major.GetHashCode();
      if (Minor != 0) hash ^= Minor.GetHashCode();
      if (Patch != 0) hash ^= Patch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Major != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Major);
      }
      if (Minor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Minor);
      }
      if (Patch != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Patch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Major != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Major);
      }
      if (Minor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minor);
      }
      if (Patch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Patch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CudnnVersion other) {
      if (other == null) {
        return;
      }
      if (other.Major != 0) {
        Major = other.Major;
      }
      if (other.Minor != 0) {
        Minor = other.Minor;
      }
      if (other.Patch != 0) {
        Patch = other.Patch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Major = input.ReadInt32();
            break;
          }
          case 16: {
            Minor = input.ReadInt32();
            break;
          }
          case 24: {
            Patch = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComputeCapability : pb::IMessage<ComputeCapability> {
    private static readonly pb::MessageParser<ComputeCapability> _parser = new pb::MessageParser<ComputeCapability>(() => new ComputeCapability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComputeCapability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.AutotuningReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeCapability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeCapability(ComputeCapability other) : this() {
      major_ = other.major_;
      minor_ = other.minor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComputeCapability Clone() {
      return new ComputeCapability(this);
    }

    /// <summary>Field number for the "major" field.</summary>
    public const int MajorFieldNumber = 1;
    private int major_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Major {
      get { return major_; }
      set {
        major_ = value;
      }
    }

    /// <summary>Field number for the "minor" field.</summary>
    public const int MinorFieldNumber = 2;
    private int minor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minor {
      get { return minor_; }
      set {
        minor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComputeCapability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComputeCapability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Major != other.Major) return false;
      if (Minor != other.Minor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Major != 0) hash ^= Major.GetHashCode();
      if (Minor != 0) hash ^= Minor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Major != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Major);
      }
      if (Minor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Minor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Major != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Major);
      }
      if (Minor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComputeCapability other) {
      if (other == null) {
        return;
      }
      if (other.Major != 0) {
        Major = other.Major;
      }
      if (other.Minor != 0) {
        Minor = other.Minor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Major = input.ReadInt32();
            break;
          }
          case 16: {
            Minor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AutotuneResult : pb::IMessage<AutotuneResult> {
    private static readonly pb::MessageParser<AutotuneResult> _parser = new pb::MessageParser<AutotuneResult>(() => new AutotuneResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutotuneResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.AutotuningReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutotuneResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutotuneResult(AutotuneResult other) : this() {
      scratchBytes_ = other.scratchBytes_;
      runTime_ = other.runTime_ != null ? other.runTime_.Clone() : null;
      failure_ = other.failure_ != null ? other.failure_.Clone() : null;
      switch (other.KeyCase) {
        case KeyOneofCase.Conv:
          Conv = other.Conv.Clone();
          break;
        case KeyOneofCase.Gemm:
          Gemm = other.Gemm.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutotuneResult Clone() {
      return new AutotuneResult(this);
    }

    /// <summary>Field number for the "scratch_bytes" field.</summary>
    public const int ScratchBytesFieldNumber = 8;
    private long scratchBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScratchBytes {
      get { return scratchBytes_; }
      set {
        scratchBytes_ = value;
      }
    }

    /// <summary>Field number for the "run_time" field.</summary>
    public const int RunTimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Duration runTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration RunTime {
      get { return runTime_; }
      set {
        runTime_ = value;
      }
    }

    /// <summary>Field number for the "failure" field.</summary>
    public const int FailureFieldNumber = 7;
    private global::Tensorflow.AutotuneResult.Types.FailureResult failure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.AutotuneResult.Types.FailureResult Failure {
      get { return failure_; }
      set {
        failure_ = value;
      }
    }

    /// <summary>Field number for the "conv" field.</summary>
    public const int ConvFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.AutotuneResult.Types.ConvKey Conv {
      get { return keyCase_ == KeyOneofCase.Conv ? (global::Tensorflow.AutotuneResult.Types.ConvKey) key_ : null; }
      set {
        key_ = value;
        keyCase_ = value == null ? KeyOneofCase.None : KeyOneofCase.Conv;
      }
    }

    /// <summary>Field number for the "gemm" field.</summary>
    public const int GemmFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.AutotuneResult.Types.GemmKey Gemm {
      get { return keyCase_ == KeyOneofCase.Gemm ? (global::Tensorflow.AutotuneResult.Types.GemmKey) key_ : null; }
      set {
        key_ = value;
        keyCase_ = value == null ? KeyOneofCase.None : KeyOneofCase.Gemm;
      }
    }

    private object key_;
    /// <summary>Enum of possible cases for the "key" oneof.</summary>
    public enum KeyOneofCase {
      None = 0,
      Conv = 5,
      Gemm = 6,
    }
    private KeyOneofCase keyCase_ = KeyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyOneofCase KeyCase {
      get { return keyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      keyCase_ = KeyOneofCase.None;
      key_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutotuneResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutotuneResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScratchBytes != other.ScratchBytes) return false;
      if (!object.Equals(RunTime, other.RunTime)) return false;
      if (!object.Equals(Failure, other.Failure)) return false;
      if (!object.Equals(Conv, other.Conv)) return false;
      if (!object.Equals(Gemm, other.Gemm)) return false;
      if (KeyCase != other.KeyCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScratchBytes != 0L) hash ^= ScratchBytes.GetHashCode();
      if (runTime_ != null) hash ^= RunTime.GetHashCode();
      if (failure_ != null) hash ^= Failure.GetHashCode();
      if (keyCase_ == KeyOneofCase.Conv) hash ^= Conv.GetHashCode();
      if (keyCase_ == KeyOneofCase.Gemm) hash ^= Gemm.GetHashCode();
      hash ^= (int) keyCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (keyCase_ == KeyOneofCase.Conv) {
        output.WriteRawTag(42);
        output.WriteMessage(Conv);
      }
      if (keyCase_ == KeyOneofCase.Gemm) {
        output.WriteRawTag(50);
        output.WriteMessage(Gemm);
      }
      if (failure_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Failure);
      }
      if (ScratchBytes != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ScratchBytes);
      }
      if (runTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RunTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScratchBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScratchBytes);
      }
      if (runTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunTime);
      }
      if (failure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Failure);
      }
      if (keyCase_ == KeyOneofCase.Conv) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conv);
      }
      if (keyCase_ == KeyOneofCase.Gemm) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gemm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutotuneResult other) {
      if (other == null) {
        return;
      }
      if (other.ScratchBytes != 0L) {
        ScratchBytes = other.ScratchBytes;
      }
      if (other.runTime_ != null) {
        if (runTime_ == null) {
          RunTime = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        RunTime.MergeFrom(other.RunTime);
      }
      if (other.failure_ != null) {
        if (failure_ == null) {
          Failure = new global::Tensorflow.AutotuneResult.Types.FailureResult();
        }
        Failure.MergeFrom(other.Failure);
      }
      switch (other.KeyCase) {
        case KeyOneofCase.Conv:
          if (Conv == null) {
            Conv = new global::Tensorflow.AutotuneResult.Types.ConvKey();
          }
          Conv.MergeFrom(other.Conv);
          break;
        case KeyOneofCase.Gemm:
          if (Gemm == null) {
            Gemm = new global::Tensorflow.AutotuneResult.Types.GemmKey();
          }
          Gemm.MergeFrom(other.Gemm);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            global::Tensorflow.AutotuneResult.Types.ConvKey subBuilder = new global::Tensorflow.AutotuneResult.Types.ConvKey();
            if (keyCase_ == KeyOneofCase.Conv) {
              subBuilder.MergeFrom(Conv);
            }
            input.ReadMessage(subBuilder);
            Conv = subBuilder;
            break;
          }
          case 50: {
            global::Tensorflow.AutotuneResult.Types.GemmKey subBuilder = new global::Tensorflow.AutotuneResult.Types.GemmKey();
            if (keyCase_ == KeyOneofCase.Gemm) {
              subBuilder.MergeFrom(Gemm);
            }
            input.ReadMessage(subBuilder);
            Gemm = subBuilder;
            break;
          }
          case 58: {
            if (failure_ == null) {
              Failure = new global::Tensorflow.AutotuneResult.Types.FailureResult();
            }
            input.ReadMessage(Failure);
            break;
          }
          case 64: {
            ScratchBytes = input.ReadInt64();
            break;
          }
          case 74: {
            if (runTime_ == null) {
              RunTime = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RunTime);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AutotuneResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FailureKind {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("REDZONE_MODIFIED")] RedzoneModified = 1,
        [pbr::OriginalName("WRONG_RESULT")] WrongResult = 2,
      }

      public sealed partial class FailureResult : pb::IMessage<FailureResult> {
        private static readonly pb::MessageParser<FailureResult> _parser = new pb::MessageParser<FailureResult>(() => new FailureResult());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FailureResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.AutotuneResult.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureResult(FailureResult other) : this() {
          kind_ = other.kind_;
          msg_ = other.msg_;
          bufferAddress_ = other.bufferAddress_;
          switch (other.KeyCase) {
            case KeyOneofCase.ReferenceConv:
              ReferenceConv = other.ReferenceConv.Clone();
              break;
            case KeyOneofCase.ReferenceGemm:
              ReferenceGemm = other.ReferenceGemm.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FailureResult Clone() {
          return new FailureResult(this);
        }

        /// <summary>Field number for the "kind" field.</summary>
        public const int KindFieldNumber = 1;
        private global::Tensorflow.AutotuneResult.Types.FailureKind kind_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.AutotuneResult.Types.FailureKind Kind {
          get { return kind_; }
          set {
            kind_ = value;
          }
        }

        /// <summary>Field number for the "msg" field.</summary>
        public const int MsgFieldNumber = 2;
        private string msg_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Msg {
          get { return msg_; }
          set {
            msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "reference_conv" field.</summary>
        public const int ReferenceConvFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.AutotuneResult.Types.ConvKey ReferenceConv {
          get { return keyCase_ == KeyOneofCase.ReferenceConv ? (global::Tensorflow.AutotuneResult.Types.ConvKey) key_ : null; }
          set {
            key_ = value;
            keyCase_ = value == null ? KeyOneofCase.None : KeyOneofCase.ReferenceConv;
          }
        }

        /// <summary>Field number for the "reference_gemm" field.</summary>
        public const int ReferenceGemmFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Tensorflow.AutotuneResult.Types.GemmKey ReferenceGemm {
          get { return keyCase_ == KeyOneofCase.ReferenceGemm ? (global::Tensorflow.AutotuneResult.Types.GemmKey) key_ : null; }
          set {
            key_ = value;
            keyCase_ = value == null ? KeyOneofCase.None : KeyOneofCase.ReferenceGemm;
          }
        }

        /// <summary>Field number for the "buffer_address" field.</summary>
        public const int BufferAddressFieldNumber = 13;
        private long bufferAddress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long BufferAddress {
          get { return bufferAddress_; }
          set {
            bufferAddress_ = value;
          }
        }

        private object key_;
        /// <summary>Enum of possible cases for the "key" oneof.</summary>
        public enum KeyOneofCase {
          None = 0,
          ReferenceConv = 11,
          ReferenceGemm = 12,
        }
        private KeyOneofCase keyCase_ = KeyOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyOneofCase KeyCase {
          get { return keyCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKey() {
          keyCase_ = KeyOneofCase.None;
          key_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FailureResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FailureResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Kind != other.Kind) return false;
          if (Msg != other.Msg) return false;
          if (!object.Equals(ReferenceConv, other.ReferenceConv)) return false;
          if (!object.Equals(ReferenceGemm, other.ReferenceGemm)) return false;
          if (BufferAddress != other.BufferAddress) return false;
          if (KeyCase != other.KeyCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Kind != 0) hash ^= Kind.GetHashCode();
          if (Msg.Length != 0) hash ^= Msg.GetHashCode();
          if (keyCase_ == KeyOneofCase.ReferenceConv) hash ^= ReferenceConv.GetHashCode();
          if (keyCase_ == KeyOneofCase.ReferenceGemm) hash ^= ReferenceGemm.GetHashCode();
          if (BufferAddress != 0L) hash ^= BufferAddress.GetHashCode();
          hash ^= (int) keyCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Kind != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Kind);
          }
          if (Msg.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Msg);
          }
          if (keyCase_ == KeyOneofCase.ReferenceConv) {
            output.WriteRawTag(90);
            output.WriteMessage(ReferenceConv);
          }
          if (keyCase_ == KeyOneofCase.ReferenceGemm) {
            output.WriteRawTag(98);
            output.WriteMessage(ReferenceGemm);
          }
          if (BufferAddress != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(BufferAddress);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Kind != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
          }
          if (Msg.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
          }
          if (keyCase_ == KeyOneofCase.ReferenceConv) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceConv);
          }
          if (keyCase_ == KeyOneofCase.ReferenceGemm) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferenceGemm);
          }
          if (BufferAddress != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BufferAddress);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FailureResult other) {
          if (other == null) {
            return;
          }
          if (other.Kind != 0) {
            Kind = other.Kind;
          }
          if (other.Msg.Length != 0) {
            Msg = other.Msg;
          }
          if (other.BufferAddress != 0L) {
            BufferAddress = other.BufferAddress;
          }
          switch (other.KeyCase) {
            case KeyOneofCase.ReferenceConv:
              if (ReferenceConv == null) {
                ReferenceConv = new global::Tensorflow.AutotuneResult.Types.ConvKey();
              }
              ReferenceConv.MergeFrom(other.ReferenceConv);
              break;
            case KeyOneofCase.ReferenceGemm:
              if (ReferenceGemm == null) {
                ReferenceGemm = new global::Tensorflow.AutotuneResult.Types.GemmKey();
              }
              ReferenceGemm.MergeFrom(other.ReferenceGemm);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Kind = (global::Tensorflow.AutotuneResult.Types.FailureKind) input.ReadEnum();
                break;
              }
              case 18: {
                Msg = input.ReadString();
                break;
              }
              case 90: {
                global::Tensorflow.AutotuneResult.Types.ConvKey subBuilder = new global::Tensorflow.AutotuneResult.Types.ConvKey();
                if (keyCase_ == KeyOneofCase.ReferenceConv) {
                  subBuilder.MergeFrom(ReferenceConv);
                }
                input.ReadMessage(subBuilder);
                ReferenceConv = subBuilder;
                break;
              }
              case 98: {
                global::Tensorflow.AutotuneResult.Types.GemmKey subBuilder = new global::Tensorflow.AutotuneResult.Types.GemmKey();
                if (keyCase_ == KeyOneofCase.ReferenceGemm) {
                  subBuilder.MergeFrom(ReferenceGemm);
                }
                input.ReadMessage(subBuilder);
                ReferenceGemm = subBuilder;
                break;
              }
              case 104: {
                BufferAddress = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ConvKey : pb::IMessage<ConvKey> {
        private static readonly pb::MessageParser<ConvKey> _parser = new pb::MessageParser<ConvKey>(() => new ConvKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConvKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.AutotuneResult.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConvKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConvKey(ConvKey other) : this() {
          algorithm_ = other.algorithm_;
          tensorOpsEnabled_ = other.tensorOpsEnabled_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConvKey Clone() {
          return new ConvKey(this);
        }

        /// <summary>Field number for the "algorithm" field.</summary>
        public const int AlgorithmFieldNumber = 1;
        private long algorithm_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Algorithm {
          get { return algorithm_; }
          set {
            algorithm_ = value;
          }
        }

        /// <summary>Field number for the "tensor_ops_enabled" field.</summary>
        public const int TensorOpsEnabledFieldNumber = 2;
        private bool tensorOpsEnabled_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TensorOpsEnabled {
          get { return tensorOpsEnabled_; }
          set {
            tensorOpsEnabled_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConvKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConvKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Algorithm != other.Algorithm) return false;
          if (TensorOpsEnabled != other.TensorOpsEnabled) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Algorithm != 0L) hash ^= Algorithm.GetHashCode();
          if (TensorOpsEnabled != false) hash ^= TensorOpsEnabled.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Algorithm != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Algorithm);
          }
          if (TensorOpsEnabled != false) {
            output.WriteRawTag(16);
            output.WriteBool(TensorOpsEnabled);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Algorithm != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Algorithm);
          }
          if (TensorOpsEnabled != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConvKey other) {
          if (other == null) {
            return;
          }
          if (other.Algorithm != 0L) {
            Algorithm = other.Algorithm;
          }
          if (other.TensorOpsEnabled != false) {
            TensorOpsEnabled = other.TensorOpsEnabled;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Algorithm = input.ReadInt64();
                break;
              }
              case 16: {
                TensorOpsEnabled = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class GemmKey : pb::IMessage<GemmKey> {
        private static readonly pb::MessageParser<GemmKey> _parser = new pb::MessageParser<GemmKey>(() => new GemmKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GemmKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.AutotuneResult.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GemmKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GemmKey(GemmKey other) : this() {
          algorithm_ = other.algorithm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GemmKey Clone() {
          return new GemmKey(this);
        }

        /// <summary>Field number for the "algorithm" field.</summary>
        public const int AlgorithmFieldNumber = 1;
        private long algorithm_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Algorithm {
          get { return algorithm_; }
          set {
            algorithm_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GemmKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GemmKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Algorithm != other.Algorithm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Algorithm != 0L) hash ^= Algorithm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Algorithm != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Algorithm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Algorithm != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Algorithm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GemmKey other) {
          if (other == null) {
            return;
          }
          if (other.Algorithm != 0L) {
            Algorithm = other.Algorithm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Algorithm = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AutotuningLog : pb::IMessage<AutotuningLog> {
    private static readonly pb::MessageParser<AutotuningLog> _parser = new pb::MessageParser<AutotuningLog>(() => new AutotuningLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutotuningLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.AutotuningReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutotuningLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutotuningLog(AutotuningLog other) : this() {
      instr_ = other.instr_ != null ? other.instr_.Clone() : null;
      results_ = other.results_.Clone();
      cudnnVersion_ = other.cudnnVersion_ != null ? other.cudnnVersion_.Clone() : null;
      computeCapability_ = other.computeCapability_ != null ? other.computeCapability_.Clone() : null;
      devicePciBusId_ = other.devicePciBusId_;
      blasVersion_ = other.blasVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutotuningLog Clone() {
      return new AutotuningLog(this);
    }

    /// <summary>Field number for the "instr" field.</summary>
    public const int InstrFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Any instr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Instr {
      get { return instr_; }
      set {
        instr_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.AutotuneResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.AutotuneResult.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.AutotuneResult> results_ = new pbc::RepeatedField<global::Tensorflow.AutotuneResult>();
    /// <summary>
    /// Records all auto-tuning results per algorithm.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.AutotuneResult> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "cudnn_version" field.</summary>
    public const int CudnnVersionFieldNumber = 3;
    private global::Tensorflow.CudnnVersion cudnnVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CudnnVersion CudnnVersion {
      get { return cudnnVersion_; }
      set {
        cudnnVersion_ = value;
      }
    }

    /// <summary>Field number for the "compute_capability" field.</summary>
    public const int ComputeCapabilityFieldNumber = 4;
    private global::Tensorflow.ComputeCapability computeCapability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ComputeCapability ComputeCapability {
      get { return computeCapability_; }
      set {
        computeCapability_ = value;
      }
    }

    /// <summary>Field number for the "device_pci_bus_id" field.</summary>
    public const int DevicePciBusIdFieldNumber = 5;
    private string devicePciBusId_ = "";
    /// <summary>
    /// stream_executor::DeviceDescription::pci_bus_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DevicePciBusId {
      get { return devicePciBusId_; }
      set {
        devicePciBusId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blas_version" field.</summary>
    public const int BlasVersionFieldNumber = 6;
    private string blasVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlasVersion {
      get { return blasVersion_; }
      set {
        blasVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutotuningLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutotuningLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instr, other.Instr)) return false;
      if(!results_.Equals(other.results_)) return false;
      if (!object.Equals(CudnnVersion, other.CudnnVersion)) return false;
      if (!object.Equals(ComputeCapability, other.ComputeCapability)) return false;
      if (DevicePciBusId != other.DevicePciBusId) return false;
      if (BlasVersion != other.BlasVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instr_ != null) hash ^= Instr.GetHashCode();
      hash ^= results_.GetHashCode();
      if (cudnnVersion_ != null) hash ^= CudnnVersion.GetHashCode();
      if (computeCapability_ != null) hash ^= ComputeCapability.GetHashCode();
      if (DevicePciBusId.Length != 0) hash ^= DevicePciBusId.GetHashCode();
      if (BlasVersion.Length != 0) hash ^= BlasVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instr);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (cudnnVersion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CudnnVersion);
      }
      if (computeCapability_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ComputeCapability);
      }
      if (DevicePciBusId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DevicePciBusId);
      }
      if (BlasVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BlasVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instr);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (cudnnVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CudnnVersion);
      }
      if (computeCapability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComputeCapability);
      }
      if (DevicePciBusId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DevicePciBusId);
      }
      if (BlasVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlasVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutotuningLog other) {
      if (other == null) {
        return;
      }
      if (other.instr_ != null) {
        if (instr_ == null) {
          Instr = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Instr.MergeFrom(other.Instr);
      }
      results_.Add(other.results_);
      if (other.cudnnVersion_ != null) {
        if (cudnnVersion_ == null) {
          CudnnVersion = new global::Tensorflow.CudnnVersion();
        }
        CudnnVersion.MergeFrom(other.CudnnVersion);
      }
      if (other.computeCapability_ != null) {
        if (computeCapability_ == null) {
          ComputeCapability = new global::Tensorflow.ComputeCapability();
        }
        ComputeCapability.MergeFrom(other.ComputeCapability);
      }
      if (other.DevicePciBusId.Length != 0) {
        DevicePciBusId = other.DevicePciBusId;
      }
      if (other.BlasVersion.Length != 0) {
        BlasVersion = other.BlasVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instr_ == null) {
              Instr = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Instr);
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            if (cudnnVersion_ == null) {
              CudnnVersion = new global::Tensorflow.CudnnVersion();
            }
            input.ReadMessage(CudnnVersion);
            break;
          }
          case 34: {
            if (computeCapability_ == null) {
              ComputeCapability = new global::Tensorflow.ComputeCapability();
            }
            input.ReadMessage(ComputeCapability);
            break;
          }
          case 42: {
            DevicePciBusId = input.ReadString();
            break;
          }
          case 50: {
            BlasVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
