// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/compiler/tf2xla/host_compute_metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Tf2Xla {

  /// <summary>Holder for reflection information generated from tensorflow/compiler/tf2xla/host_compute_metadata.proto</summary>
  public static partial class HostComputeMetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/compiler/tf2xla/host_compute_metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HostComputeMetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZ0ZW5zb3JmbG93L2NvbXBpbGVyL3RmMnhsYS9ob3N0X2NvbXB1dGVfbWV0",
            "YWRhdGEucHJvdG8SEXRlbnNvcmZsb3cudGYyeGxhGix0ZW5zb3JmbG93L2Nv",
            "cmUvZnJhbWV3b3JrL3RlbnNvcl9zaGFwZS5wcm90bxoldGVuc29yZmxvdy9j",
            "b3JlL2ZyYW1ld29yay90eXBlcy5wcm90byJhCg5UZW5zb3JNZXRhZGF0YRIi",
            "CgR0eXBlGAEgASgOMhQudGVuc29yZmxvdy5EYXRhVHlwZRIrCgVzaGFwZRgC",
            "IAEoCzIcLnRlbnNvcmZsb3cuVGVuc29yU2hhcGVQcm90byJYChRIb3N0VHJh",
            "bnNmZXJNZXRhZGF0YRILCgNrZXkYASABKAkSMwoIbWV0YWRhdGEYAiADKAsy",
            "IS50ZW5zb3JmbG93LnRmMnhsYS5UZW5zb3JNZXRhZGF0YSKXAQoTSG9zdENv",
            "bXB1dGVNZXRhZGF0YRI/Cg5kZXZpY2VfdG9faG9zdBgBIAMoCzInLnRlbnNv",
            "cmZsb3cudGYyeGxhLkhvc3RUcmFuc2Zlck1ldGFkYXRhEj8KDmhvc3RfdG9f",
            "ZGV2aWNlGAIgAygLMicudGVuc29yZmxvdy50ZjJ4bGEuSG9zdFRyYW5zZmVy",
            "TWV0YWRhdGFCKgoVb3JnLnRlbnNvcmZsb3cudGYyeGxhQgxUZjJYbGFQcm90",
            "b3NQAfgBAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.TensorShapeReflection.Descriptor, global::Tensorflow.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.TensorMetadata), global::Tensorflow.Tf2Xla.TensorMetadata.Parser, new[]{ "Type", "Shape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.HostTransferMetadata), global::Tensorflow.Tf2Xla.HostTransferMetadata.Parser, new[]{ "Key", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Tf2Xla.HostComputeMetadata), global::Tensorflow.Tf2Xla.HostComputeMetadata.Parser, new[]{ "DeviceToHost", "HostToDevice" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// TensorMetadata indicates the type and shape of a Tensor that is
  /// part of a host compute transfer.
  /// </summary>
  public sealed partial class TensorMetadata : pb::IMessage<TensorMetadata> {
    private static readonly pb::MessageParser<TensorMetadata> _parser = new pb::MessageParser<TensorMetadata>(() => new TensorMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TensorMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.HostComputeMetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorMetadata(TensorMetadata other) : this() {
      type_ = other.type_;
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TensorMetadata Clone() {
      return new TensorMetadata(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tensorflow.DataType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 2;
    private global::Tensorflow.TensorShapeProto shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorShapeProto Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TensorMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TensorMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Shape, other.Shape)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (shape_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Shape);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TensorMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          Shape = new global::Tensorflow.TensorShapeProto();
        }
        Shape.MergeFrom(other.Shape);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Tensorflow.DataType) input.ReadEnum();
            break;
          }
          case 18: {
            if (shape_ == null) {
              Shape = new global::Tensorflow.TensorShapeProto();
            }
            input.ReadMessage(Shape);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// HostTransferMetadata describes a transfer either from host to device
  /// or device to host. It has a key that is unique to the computation,
  /// and metadata about the list of tensors being transferred.
  /// </summary>
  public sealed partial class HostTransferMetadata : pb::IMessage<HostTransferMetadata> {
    private static readonly pb::MessageParser<HostTransferMetadata> _parser = new pb::MessageParser<HostTransferMetadata>(() => new HostTransferMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostTransferMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.HostComputeMetadataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostTransferMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostTransferMetadata(HostTransferMetadata other) : this() {
      key_ = other.key_;
      metadata_ = other.metadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostTransferMetadata Clone() {
      return new HostTransferMetadata(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// The key used to identify this transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.Tf2Xla.TensorMetadata> _repeated_metadata_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.Tf2Xla.TensorMetadata.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tf2Xla.TensorMetadata> metadata_ = new pbc::RepeatedField<global::Tensorflow.Tf2Xla.TensorMetadata>();
    /// <summary>
    /// For each Tensor being transferred, its type and shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tf2Xla.TensorMetadata> Metadata {
      get { return metadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostTransferMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostTransferMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!metadata_.Equals(other.metadata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      hash ^= metadata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      metadata_.WriteTo(output, _repeated_metadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      size += metadata_.CalculateSize(_repeated_metadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostTransferMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      metadata_.Add(other.metadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// HostComputeMetadata describes all the sends and recvs
  /// from all host compute transfer ops in a computation.
  /// </summary>
  public sealed partial class HostComputeMetadata : pb::IMessage<HostComputeMetadata> {
    private static readonly pb::MessageParser<HostComputeMetadata> _parser = new pb::MessageParser<HostComputeMetadata>(() => new HostComputeMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostComputeMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Tf2Xla.HostComputeMetadataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostComputeMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostComputeMetadata(HostComputeMetadata other) : this() {
      deviceToHost_ = other.deviceToHost_.Clone();
      hostToDevice_ = other.hostToDevice_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostComputeMetadata Clone() {
      return new HostComputeMetadata(this);
    }

    /// <summary>Field number for the "device_to_host" field.</summary>
    public const int DeviceToHostFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.Tf2Xla.HostTransferMetadata> _repeated_deviceToHost_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.Tf2Xla.HostTransferMetadata.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tf2Xla.HostTransferMetadata> deviceToHost_ = new pbc::RepeatedField<global::Tensorflow.Tf2Xla.HostTransferMetadata>();
    /// <summary>
    /// Metadata about each device_to_host transfer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tf2Xla.HostTransferMetadata> DeviceToHost {
      get { return deviceToHost_; }
    }

    /// <summary>Field number for the "host_to_device" field.</summary>
    public const int HostToDeviceFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.Tf2Xla.HostTransferMetadata> _repeated_hostToDevice_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.Tf2Xla.HostTransferMetadata.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Tf2Xla.HostTransferMetadata> hostToDevice_ = new pbc::RepeatedField<global::Tensorflow.Tf2Xla.HostTransferMetadata>();
    /// <summary>
    /// Metadata about each host_to_device transfer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Tf2Xla.HostTransferMetadata> HostToDevice {
      get { return hostToDevice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostComputeMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostComputeMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceToHost_.Equals(other.deviceToHost_)) return false;
      if(!hostToDevice_.Equals(other.hostToDevice_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceToHost_.GetHashCode();
      hash ^= hostToDevice_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceToHost_.WriteTo(output, _repeated_deviceToHost_codec);
      hostToDevice_.WriteTo(output, _repeated_hostToDevice_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceToHost_.CalculateSize(_repeated_deviceToHost_codec);
      size += hostToDevice_.CalculateSize(_repeated_hostToDevice_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostComputeMetadata other) {
      if (other == null) {
        return;
      }
      deviceToHost_.Add(other.deviceToHost_);
      hostToDevice_.Add(other.hostToDevice_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceToHost_.AddEntriesFrom(input, _repeated_deviceToHost_codec);
            break;
          }
          case 18: {
            hostToDevice_.AddEntriesFrom(input, _repeated_hostToDevice_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
