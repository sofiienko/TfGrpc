// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow_serving/apis/prediction_log.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Serving {

  /// <summary>Holder for reflection information generated from tensorflow_serving/apis/prediction_log.proto</summary>
  public static partial class PredictionLogReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow_serving/apis/prediction_log.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PredictionLogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cix0ZW5zb3JmbG93X3NlcnZpbmcvYXBpcy9wcmVkaWN0aW9uX2xvZy5wcm90",
            "bxISdGVuc29yZmxvdy5zZXJ2aW5nGix0ZW5zb3JmbG93X3NlcnZpbmcvYXBp",
            "cy9jbGFzc2lmaWNhdGlvbi5wcm90bxondGVuc29yZmxvd19zZXJ2aW5nL2Fw",
            "aXMvaW5mZXJlbmNlLnByb3RvGiV0ZW5zb3JmbG93X3NlcnZpbmcvYXBpcy9w",
            "cmVkaWN0LnByb3RvGih0ZW5zb3JmbG93X3NlcnZpbmcvYXBpcy9yZWdyZXNz",
            "aW9uLnByb3RvGi10ZW5zb3JmbG93X3NlcnZpbmcvYXBpcy9zZXNzaW9uX3Nl",
            "cnZpY2UucHJvdG8aJXRlbnNvcmZsb3dfc2VydmluZy9jb3JlL2xvZ2dpbmcu",
            "cHJvdG8ihwEKC0NsYXNzaWZ5TG9nEjoKB3JlcXVlc3QYASABKAsyKS50ZW5z",
            "b3JmbG93LnNlcnZpbmcuQ2xhc3NpZmljYXRpb25SZXF1ZXN0EjwKCHJlc3Bv",
            "bnNlGAIgASgLMioudGVuc29yZmxvdy5zZXJ2aW5nLkNsYXNzaWZpY2F0aW9u",
            "UmVzcG9uc2UifgoKUmVncmVzc0xvZxI2CgdyZXF1ZXN0GAEgASgLMiUudGVu",
            "c29yZmxvdy5zZXJ2aW5nLlJlZ3Jlc3Npb25SZXF1ZXN0EjgKCHJlc3BvbnNl",
            "GAIgASgLMiYudGVuc29yZmxvdy5zZXJ2aW5nLlJlZ3Jlc3Npb25SZXNwb25z",
            "ZSJ4CgpQcmVkaWN0TG9nEjMKB3JlcXVlc3QYASABKAsyIi50ZW5zb3JmbG93",
            "LnNlcnZpbmcuUHJlZGljdFJlcXVlc3QSNQoIcmVzcG9uc2UYAiABKAsyIy50",
            "ZW5zb3JmbG93LnNlcnZpbmcuUHJlZGljdFJlc3BvbnNlIo0BChFNdWx0aUlu",
            "ZmVyZW5jZUxvZxI6CgdyZXF1ZXN0GAEgASgLMikudGVuc29yZmxvdy5zZXJ2",
            "aW5nLk11bHRpSW5mZXJlbmNlUmVxdWVzdBI8CghyZXNwb25zZRgCIAEoCzIq",
            "LnRlbnNvcmZsb3cuc2VydmluZy5NdWx0aUluZmVyZW5jZVJlc3BvbnNlIoEB",
            "Cg1TZXNzaW9uUnVuTG9nEjYKB3JlcXVlc3QYASABKAsyJS50ZW5zb3JmbG93",
            "LnNlcnZpbmcuU2Vzc2lvblJ1blJlcXVlc3QSOAoIcmVzcG9uc2UYAiABKAsy",
            "Ji50ZW5zb3JmbG93LnNlcnZpbmcuU2Vzc2lvblJ1blJlc3BvbnNlIv0CCg1Q",
            "cmVkaWN0aW9uTG9nEjUKDGxvZ19tZXRhZGF0YRgBIAEoCzIfLnRlbnNvcmZs",
            "b3cuc2VydmluZy5Mb2dNZXRhZGF0YRI3CgxjbGFzc2lmeV9sb2cYAiABKAsy",
            "Hy50ZW5zb3JmbG93LnNlcnZpbmcuQ2xhc3NpZnlMb2dIABI1CgtyZWdyZXNz",
            "X2xvZxgDIAEoCzIeLnRlbnNvcmZsb3cuc2VydmluZy5SZWdyZXNzTG9nSAAS",
            "NQoLcHJlZGljdF9sb2cYBiABKAsyHi50ZW5zb3JmbG93LnNlcnZpbmcuUHJl",
            "ZGljdExvZ0gAEkQKE211bHRpX2luZmVyZW5jZV9sb2cYBCABKAsyJS50ZW5z",
            "b3JmbG93LnNlcnZpbmcuTXVsdGlJbmZlcmVuY2VMb2dIABI8Cg9zZXNzaW9u",
            "X3J1bl9sb2cYBSABKAsyIS50ZW5zb3JmbG93LnNlcnZpbmcuU2Vzc2lvblJ1",
            "bkxvZ0gAQgoKCGxvZ190eXBlQgP4AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.Serving.ClassificationReflection.Descriptor, global::Tensorflow.Serving.InferenceReflection.Descriptor, global::Tensorflow.Serving.PredictReflection.Descriptor, global::Tensorflow.Serving.RegressionReflection.Descriptor, global::Tensorflow.Serving.SessionServiceReflection.Descriptor, global::Tensorflow.Serving.LoggingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.ClassifyLog), global::Tensorflow.Serving.ClassifyLog.Parser, new[]{ "Request", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.RegressLog), global::Tensorflow.Serving.RegressLog.Parser, new[]{ "Request", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.PredictLog), global::Tensorflow.Serving.PredictLog.Parser, new[]{ "Request", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.MultiInferenceLog), global::Tensorflow.Serving.MultiInferenceLog.Parser, new[]{ "Request", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.SessionRunLog), global::Tensorflow.Serving.SessionRunLog.Parser, new[]{ "Request", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Serving.PredictionLog), global::Tensorflow.Serving.PredictionLog.Parser, new[]{ "LogMetadata", "ClassifyLog", "RegressLog", "PredictLog", "MultiInferenceLog", "SessionRunLog" }, new[]{ "LogType" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClassifyLog : pb::IMessage<ClassifyLog> {
    private static readonly pb::MessageParser<ClassifyLog> _parser = new pb::MessageParser<ClassifyLog>(() => new ClassifyLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassifyLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.PredictionLogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassifyLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassifyLog(ClassifyLog other) : this() {
      request_ = other.request_ != null ? other.request_.Clone() : null;
      response_ = other.response_ != null ? other.response_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassifyLog Clone() {
      return new ClassifyLog(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::Tensorflow.Serving.ClassificationRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.ClassificationRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private global::Tensorflow.Serving.ClassificationResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.ClassificationResponse Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassifyLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassifyLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassifyLog other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::Tensorflow.Serving.ClassificationRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::Tensorflow.Serving.ClassificationResponse();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Tensorflow.Serving.ClassificationRequest();
            }
            input.ReadMessage(Request);
            break;
          }
          case 18: {
            if (response_ == null) {
              Response = new global::Tensorflow.Serving.ClassificationResponse();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegressLog : pb::IMessage<RegressLog> {
    private static readonly pb::MessageParser<RegressLog> _parser = new pb::MessageParser<RegressLog>(() => new RegressLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegressLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.PredictionLogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegressLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegressLog(RegressLog other) : this() {
      request_ = other.request_ != null ? other.request_.Clone() : null;
      response_ = other.response_ != null ? other.response_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegressLog Clone() {
      return new RegressLog(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::Tensorflow.Serving.RegressionRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.RegressionRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private global::Tensorflow.Serving.RegressionResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.RegressionResponse Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegressLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegressLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegressLog other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::Tensorflow.Serving.RegressionRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::Tensorflow.Serving.RegressionResponse();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Tensorflow.Serving.RegressionRequest();
            }
            input.ReadMessage(Request);
            break;
          }
          case 18: {
            if (response_ == null) {
              Response = new global::Tensorflow.Serving.RegressionResponse();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PredictLog : pb::IMessage<PredictLog> {
    private static readonly pb::MessageParser<PredictLog> _parser = new pb::MessageParser<PredictLog>(() => new PredictLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PredictLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.PredictionLogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictLog(PredictLog other) : this() {
      request_ = other.request_ != null ? other.request_.Clone() : null;
      response_ = other.response_ != null ? other.response_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictLog Clone() {
      return new PredictLog(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::Tensorflow.Serving.PredictRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.PredictRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private global::Tensorflow.Serving.PredictResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.PredictResponse Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PredictLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PredictLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PredictLog other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::Tensorflow.Serving.PredictRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::Tensorflow.Serving.PredictResponse();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Tensorflow.Serving.PredictRequest();
            }
            input.ReadMessage(Request);
            break;
          }
          case 18: {
            if (response_ == null) {
              Response = new global::Tensorflow.Serving.PredictResponse();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiInferenceLog : pb::IMessage<MultiInferenceLog> {
    private static readonly pb::MessageParser<MultiInferenceLog> _parser = new pb::MessageParser<MultiInferenceLog>(() => new MultiInferenceLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiInferenceLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.PredictionLogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiInferenceLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiInferenceLog(MultiInferenceLog other) : this() {
      request_ = other.request_ != null ? other.request_.Clone() : null;
      response_ = other.response_ != null ? other.response_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiInferenceLog Clone() {
      return new MultiInferenceLog(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::Tensorflow.Serving.MultiInferenceRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.MultiInferenceRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private global::Tensorflow.Serving.MultiInferenceResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.MultiInferenceResponse Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiInferenceLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiInferenceLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiInferenceLog other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::Tensorflow.Serving.MultiInferenceRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::Tensorflow.Serving.MultiInferenceResponse();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Tensorflow.Serving.MultiInferenceRequest();
            }
            input.ReadMessage(Request);
            break;
          }
          case 18: {
            if (response_ == null) {
              Response = new global::Tensorflow.Serving.MultiInferenceResponse();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionRunLog : pb::IMessage<SessionRunLog> {
    private static readonly pb::MessageParser<SessionRunLog> _parser = new pb::MessageParser<SessionRunLog>(() => new SessionRunLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionRunLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.PredictionLogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionRunLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionRunLog(SessionRunLog other) : this() {
      request_ = other.request_ != null ? other.request_.Clone() : null;
      response_ = other.response_ != null ? other.response_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionRunLog Clone() {
      return new SessionRunLog(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::Tensorflow.Serving.SessionRunRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.SessionRunRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private global::Tensorflow.Serving.SessionRunResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.SessionRunResponse Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionRunLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionRunLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionRunLog other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::Tensorflow.Serving.SessionRunRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::Tensorflow.Serving.SessionRunResponse();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::Tensorflow.Serving.SessionRunRequest();
            }
            input.ReadMessage(Request);
            break;
          }
          case 18: {
            if (response_ == null) {
              Response = new global::Tensorflow.Serving.SessionRunResponse();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Logged model inference request.
  /// </summary>
  public sealed partial class PredictionLog : pb::IMessage<PredictionLog> {
    private static readonly pb::MessageParser<PredictionLog> _parser = new pb::MessageParser<PredictionLog>(() => new PredictionLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PredictionLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Serving.PredictionLogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionLog(PredictionLog other) : this() {
      logMetadata_ = other.logMetadata_ != null ? other.logMetadata_.Clone() : null;
      switch (other.LogTypeCase) {
        case LogTypeOneofCase.ClassifyLog:
          ClassifyLog = other.ClassifyLog.Clone();
          break;
        case LogTypeOneofCase.RegressLog:
          RegressLog = other.RegressLog.Clone();
          break;
        case LogTypeOneofCase.PredictLog:
          PredictLog = other.PredictLog.Clone();
          break;
        case LogTypeOneofCase.MultiInferenceLog:
          MultiInferenceLog = other.MultiInferenceLog.Clone();
          break;
        case LogTypeOneofCase.SessionRunLog:
          SessionRunLog = other.SessionRunLog.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionLog Clone() {
      return new PredictionLog(this);
    }

    /// <summary>Field number for the "log_metadata" field.</summary>
    public const int LogMetadataFieldNumber = 1;
    private global::Tensorflow.Serving.LogMetadata logMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.LogMetadata LogMetadata {
      get { return logMetadata_; }
      set {
        logMetadata_ = value;
      }
    }

    /// <summary>Field number for the "classify_log" field.</summary>
    public const int ClassifyLogFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.ClassifyLog ClassifyLog {
      get { return logTypeCase_ == LogTypeOneofCase.ClassifyLog ? (global::Tensorflow.Serving.ClassifyLog) logType_ : null; }
      set {
        logType_ = value;
        logTypeCase_ = value == null ? LogTypeOneofCase.None : LogTypeOneofCase.ClassifyLog;
      }
    }

    /// <summary>Field number for the "regress_log" field.</summary>
    public const int RegressLogFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.RegressLog RegressLog {
      get { return logTypeCase_ == LogTypeOneofCase.RegressLog ? (global::Tensorflow.Serving.RegressLog) logType_ : null; }
      set {
        logType_ = value;
        logTypeCase_ = value == null ? LogTypeOneofCase.None : LogTypeOneofCase.RegressLog;
      }
    }

    /// <summary>Field number for the "predict_log" field.</summary>
    public const int PredictLogFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.PredictLog PredictLog {
      get { return logTypeCase_ == LogTypeOneofCase.PredictLog ? (global::Tensorflow.Serving.PredictLog) logType_ : null; }
      set {
        logType_ = value;
        logTypeCase_ = value == null ? LogTypeOneofCase.None : LogTypeOneofCase.PredictLog;
      }
    }

    /// <summary>Field number for the "multi_inference_log" field.</summary>
    public const int MultiInferenceLogFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.MultiInferenceLog MultiInferenceLog {
      get { return logTypeCase_ == LogTypeOneofCase.MultiInferenceLog ? (global::Tensorflow.Serving.MultiInferenceLog) logType_ : null; }
      set {
        logType_ = value;
        logTypeCase_ = value == null ? LogTypeOneofCase.None : LogTypeOneofCase.MultiInferenceLog;
      }
    }

    /// <summary>Field number for the "session_run_log" field.</summary>
    public const int SessionRunLogFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Serving.SessionRunLog SessionRunLog {
      get { return logTypeCase_ == LogTypeOneofCase.SessionRunLog ? (global::Tensorflow.Serving.SessionRunLog) logType_ : null; }
      set {
        logType_ = value;
        logTypeCase_ = value == null ? LogTypeOneofCase.None : LogTypeOneofCase.SessionRunLog;
      }
    }

    private object logType_;
    /// <summary>Enum of possible cases for the "log_type" oneof.</summary>
    public enum LogTypeOneofCase {
      None = 0,
      ClassifyLog = 2,
      RegressLog = 3,
      PredictLog = 6,
      MultiInferenceLog = 4,
      SessionRunLog = 5,
    }
    private LogTypeOneofCase logTypeCase_ = LogTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogTypeOneofCase LogTypeCase {
      get { return logTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLogType() {
      logTypeCase_ = LogTypeOneofCase.None;
      logType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PredictionLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PredictionLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LogMetadata, other.LogMetadata)) return false;
      if (!object.Equals(ClassifyLog, other.ClassifyLog)) return false;
      if (!object.Equals(RegressLog, other.RegressLog)) return false;
      if (!object.Equals(PredictLog, other.PredictLog)) return false;
      if (!object.Equals(MultiInferenceLog, other.MultiInferenceLog)) return false;
      if (!object.Equals(SessionRunLog, other.SessionRunLog)) return false;
      if (LogTypeCase != other.LogTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logMetadata_ != null) hash ^= LogMetadata.GetHashCode();
      if (logTypeCase_ == LogTypeOneofCase.ClassifyLog) hash ^= ClassifyLog.GetHashCode();
      if (logTypeCase_ == LogTypeOneofCase.RegressLog) hash ^= RegressLog.GetHashCode();
      if (logTypeCase_ == LogTypeOneofCase.PredictLog) hash ^= PredictLog.GetHashCode();
      if (logTypeCase_ == LogTypeOneofCase.MultiInferenceLog) hash ^= MultiInferenceLog.GetHashCode();
      if (logTypeCase_ == LogTypeOneofCase.SessionRunLog) hash ^= SessionRunLog.GetHashCode();
      hash ^= (int) logTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (logMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogMetadata);
      }
      if (logTypeCase_ == LogTypeOneofCase.ClassifyLog) {
        output.WriteRawTag(18);
        output.WriteMessage(ClassifyLog);
      }
      if (logTypeCase_ == LogTypeOneofCase.RegressLog) {
        output.WriteRawTag(26);
        output.WriteMessage(RegressLog);
      }
      if (logTypeCase_ == LogTypeOneofCase.MultiInferenceLog) {
        output.WriteRawTag(34);
        output.WriteMessage(MultiInferenceLog);
      }
      if (logTypeCase_ == LogTypeOneofCase.SessionRunLog) {
        output.WriteRawTag(42);
        output.WriteMessage(SessionRunLog);
      }
      if (logTypeCase_ == LogTypeOneofCase.PredictLog) {
        output.WriteRawTag(50);
        output.WriteMessage(PredictLog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogMetadata);
      }
      if (logTypeCase_ == LogTypeOneofCase.ClassifyLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassifyLog);
      }
      if (logTypeCase_ == LogTypeOneofCase.RegressLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegressLog);
      }
      if (logTypeCase_ == LogTypeOneofCase.PredictLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PredictLog);
      }
      if (logTypeCase_ == LogTypeOneofCase.MultiInferenceLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiInferenceLog);
      }
      if (logTypeCase_ == LogTypeOneofCase.SessionRunLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionRunLog);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PredictionLog other) {
      if (other == null) {
        return;
      }
      if (other.logMetadata_ != null) {
        if (logMetadata_ == null) {
          LogMetadata = new global::Tensorflow.Serving.LogMetadata();
        }
        LogMetadata.MergeFrom(other.LogMetadata);
      }
      switch (other.LogTypeCase) {
        case LogTypeOneofCase.ClassifyLog:
          if (ClassifyLog == null) {
            ClassifyLog = new global::Tensorflow.Serving.ClassifyLog();
          }
          ClassifyLog.MergeFrom(other.ClassifyLog);
          break;
        case LogTypeOneofCase.RegressLog:
          if (RegressLog == null) {
            RegressLog = new global::Tensorflow.Serving.RegressLog();
          }
          RegressLog.MergeFrom(other.RegressLog);
          break;
        case LogTypeOneofCase.PredictLog:
          if (PredictLog == null) {
            PredictLog = new global::Tensorflow.Serving.PredictLog();
          }
          PredictLog.MergeFrom(other.PredictLog);
          break;
        case LogTypeOneofCase.MultiInferenceLog:
          if (MultiInferenceLog == null) {
            MultiInferenceLog = new global::Tensorflow.Serving.MultiInferenceLog();
          }
          MultiInferenceLog.MergeFrom(other.MultiInferenceLog);
          break;
        case LogTypeOneofCase.SessionRunLog:
          if (SessionRunLog == null) {
            SessionRunLog = new global::Tensorflow.Serving.SessionRunLog();
          }
          SessionRunLog.MergeFrom(other.SessionRunLog);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (logMetadata_ == null) {
              LogMetadata = new global::Tensorflow.Serving.LogMetadata();
            }
            input.ReadMessage(LogMetadata);
            break;
          }
          case 18: {
            global::Tensorflow.Serving.ClassifyLog subBuilder = new global::Tensorflow.Serving.ClassifyLog();
            if (logTypeCase_ == LogTypeOneofCase.ClassifyLog) {
              subBuilder.MergeFrom(ClassifyLog);
            }
            input.ReadMessage(subBuilder);
            ClassifyLog = subBuilder;
            break;
          }
          case 26: {
            global::Tensorflow.Serving.RegressLog subBuilder = new global::Tensorflow.Serving.RegressLog();
            if (logTypeCase_ == LogTypeOneofCase.RegressLog) {
              subBuilder.MergeFrom(RegressLog);
            }
            input.ReadMessage(subBuilder);
            RegressLog = subBuilder;
            break;
          }
          case 34: {
            global::Tensorflow.Serving.MultiInferenceLog subBuilder = new global::Tensorflow.Serving.MultiInferenceLog();
            if (logTypeCase_ == LogTypeOneofCase.MultiInferenceLog) {
              subBuilder.MergeFrom(MultiInferenceLog);
            }
            input.ReadMessage(subBuilder);
            MultiInferenceLog = subBuilder;
            break;
          }
          case 42: {
            global::Tensorflow.Serving.SessionRunLog subBuilder = new global::Tensorflow.Serving.SessionRunLog();
            if (logTypeCase_ == LogTypeOneofCase.SessionRunLog) {
              subBuilder.MergeFrom(SessionRunLog);
            }
            input.ReadMessage(subBuilder);
            SessionRunLog = subBuilder;
            break;
          }
          case 50: {
            global::Tensorflow.Serving.PredictLog subBuilder = new global::Tensorflow.Serving.PredictLog();
            if (logTypeCase_ == LogTypeOneofCase.PredictLog) {
              subBuilder.MergeFrom(PredictLog);
            }
            input.ReadMessage(subBuilder);
            PredictLog = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
