// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/compiler/jit/xla_activity.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/compiler/jit/xla_activity.proto</summary>
  public static partial class XlaActivityReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/compiler/jit/xla_activity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XlaActivityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cip0ZW5zb3JmbG93L2NvbXBpbGVyL2ppdC94bGFfYWN0aXZpdHkucHJvdG8S",
            "CnRlbnNvcmZsb3caJXRlbnNvcmZsb3cvY29yZS9wcm90b2J1Zi9jb25maWcu",
            "cHJvdG8iggMKGFhsYUF1dG9DbHVzdGVyaW5nU3VtbWFyeRIeChZ1bmNsdXN0",
            "ZXJlZF9ub2RlX2NvdW50GAEgASgFEhwKFGNsdXN0ZXJlZF9ub2RlX2NvdW50",
            "GAIgASgFEj4KCGNsdXN0ZXJzGAMgAygLMiwudGVuc29yZmxvdy5YbGFBdXRv",
            "Q2x1c3RlcmluZ1N1bW1hcnkuQ2x1c3RlchJRChh1bmNsdXN0ZXJlZF9vcF9o",
            "aXN0b2dyYW0YBCADKAsyLy50ZW5zb3JmbG93LlhsYUF1dG9DbHVzdGVyaW5n",
            "U3VtbWFyeS5PcEFuZENvdW50GicKCk9wQW5kQ291bnQSCgoCb3AYASABKAkS",
            "DQoFY291bnQYAiABKAUabAoHQ2x1c3RlchIMCgRuYW1lGAEgASgJEgwKBHNp",
            "emUYAiABKAUSRQoMb3BfaGlzdG9ncmFtGAMgAygLMi8udGVuc29yZmxvdy5Y",
            "bGFBdXRvQ2x1c3RlcmluZ1N1bW1hcnkuT3BBbmRDb3VudCK5AQoZWGxhQXV0",
            "b0NsdXN0ZXJpbmdBY3Rpdml0eRJFChBnbG9iYWxfaml0X2xldmVsGAEgASgO",
            "MisudGVuc29yZmxvdy5PcHRpbWl6ZXJPcHRpb25zLkdsb2JhbEppdExldmVs",
            "Eh4KFmNwdV9nbG9iYWxfaml0X2VuYWJsZWQYAiABKAgSNQoHc3VtbWFyeRgD",
            "IAEoCzIkLnRlbnNvcmZsb3cuWGxhQXV0b0NsdXN0ZXJpbmdTdW1tYXJ5IoUB",
            "ChlYbGFKaXRDb21waWxhdGlvbkFjdGl2aXR5EhQKDGNsdXN0ZXJfbmFtZRgB",
            "IAEoCRIVCg1jb21waWxlX2NvdW50GAIgASgFEhcKD2NvbXBpbGVfdGltZV91",
            "cxgDIAEoAxIiChpjdW11bGF0aXZlX2NvbXBpbGVfdGltZV91cxgEIAEoAyKL",
            "AgoVWGxhT3B0aW1pemF0aW9uUmVtYXJrEjoKB3dhcm5pbmcYASABKA4yKS50",
            "ZW5zb3JmbG93LlhsYU9wdGltaXphdGlvblJlbWFyay5XYXJuaW5nEhkKEWRl",
            "YnVnX2luZm9ybWF0aW9uGAIgASgJIpoBCgdXYXJuaW5nEggKBE5PTkUQABIY",
            "ChRJTkFDQ1VSQVRFX09QRVJBVElPThABEhIKDlNMT1dfT1BFUkFUSU9OEAIS",
            "GwoXVU5JTVBMRU1FTlRFRF9PUEVSQVRJT04QAxIgChxTTE9XX0lNQUdFX1JF",
            "U0laRV9ESU1FTlNJT05TEAQSGAoUTUVHQU1PUlBISUNfRlVOQ1RJT04QBWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.ConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.XlaAutoClusteringSummary), global::Tensorflow.XlaAutoClusteringSummary.Parser, new[]{ "UnclusteredNodeCount", "ClusteredNodeCount", "Clusters", "UnclusteredOpHistogram" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount), global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount.Parser, new[]{ "Op", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.XlaAutoClusteringSummary.Types.Cluster), global::Tensorflow.XlaAutoClusteringSummary.Types.Cluster.Parser, new[]{ "Name", "Size", "OpHistogram" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.XlaAutoClusteringActivity), global::Tensorflow.XlaAutoClusteringActivity.Parser, new[]{ "GlobalJitLevel", "CpuGlobalJitEnabled", "Summary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.XlaJitCompilationActivity), global::Tensorflow.XlaJitCompilationActivity.Parser, new[]{ "ClusterName", "CompileCount", "CompileTimeUs", "CumulativeCompileTimeUs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.XlaOptimizationRemark), global::Tensorflow.XlaOptimizationRemark.Parser, new[]{ "Warning", "DebugInformation" }, null, new[]{ typeof(global::Tensorflow.XlaOptimizationRemark.Types.Warning) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Summarizes the results of auto-clustering a TensorFlow graph.
  ///
  /// Next ID: 5
  /// </summary>
  public sealed partial class XlaAutoClusteringSummary : pb::IMessage<XlaAutoClusteringSummary> {
    private static readonly pb::MessageParser<XlaAutoClusteringSummary> _parser = new pb::MessageParser<XlaAutoClusteringSummary>(() => new XlaAutoClusteringSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XlaAutoClusteringSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.XlaActivityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaAutoClusteringSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaAutoClusteringSummary(XlaAutoClusteringSummary other) : this() {
      unclusteredNodeCount_ = other.unclusteredNodeCount_;
      clusteredNodeCount_ = other.clusteredNodeCount_;
      clusters_ = other.clusters_.Clone();
      unclusteredOpHistogram_ = other.unclusteredOpHistogram_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaAutoClusteringSummary Clone() {
      return new XlaAutoClusteringSummary(this);
    }

    /// <summary>Field number for the "unclustered_node_count" field.</summary>
    public const int UnclusteredNodeCountFieldNumber = 1;
    private int unclusteredNodeCount_;
    /// <summary>
    /// The number of nodes in the graph that are not inside an XLA cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnclusteredNodeCount {
      get { return unclusteredNodeCount_; }
      set {
        unclusteredNodeCount_ = value;
      }
    }

    /// <summary>Field number for the "clustered_node_count" field.</summary>
    public const int ClusteredNodeCountFieldNumber = 2;
    private int clusteredNodeCount_;
    /// <summary>
    /// The number of nodes in the graph that are in an XLA cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClusteredNodeCount {
      get { return clusteredNodeCount_; }
      set {
        clusteredNodeCount_ = value;
      }
    }

    /// <summary>Field number for the "clusters" field.</summary>
    public const int ClustersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tensorflow.XlaAutoClusteringSummary.Types.Cluster> _repeated_clusters_codec
        = pb::FieldCodec.ForMessage(26, global::Tensorflow.XlaAutoClusteringSummary.Types.Cluster.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.Cluster> clusters_ = new pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.Cluster>();
    /// <summary>
    /// All of the XLA clusters in the TF graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.Cluster> Clusters {
      get { return clusters_; }
    }

    /// <summary>Field number for the "unclustered_op_histogram" field.</summary>
    public const int UnclusteredOpHistogramFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount> _repeated_unclusteredOpHistogram_codec
        = pb::FieldCodec.ForMessage(34, global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount> unclusteredOpHistogram_ = new pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount>();
    /// <summary>
    /// A histogram of the TF operations that were not clustered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount> UnclusteredOpHistogram {
      get { return unclusteredOpHistogram_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XlaAutoClusteringSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XlaAutoClusteringSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnclusteredNodeCount != other.UnclusteredNodeCount) return false;
      if (ClusteredNodeCount != other.ClusteredNodeCount) return false;
      if(!clusters_.Equals(other.clusters_)) return false;
      if(!unclusteredOpHistogram_.Equals(other.unclusteredOpHistogram_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnclusteredNodeCount != 0) hash ^= UnclusteredNodeCount.GetHashCode();
      if (ClusteredNodeCount != 0) hash ^= ClusteredNodeCount.GetHashCode();
      hash ^= clusters_.GetHashCode();
      hash ^= unclusteredOpHistogram_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnclusteredNodeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnclusteredNodeCount);
      }
      if (ClusteredNodeCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ClusteredNodeCount);
      }
      clusters_.WriteTo(output, _repeated_clusters_codec);
      unclusteredOpHistogram_.WriteTo(output, _repeated_unclusteredOpHistogram_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnclusteredNodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnclusteredNodeCount);
      }
      if (ClusteredNodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClusteredNodeCount);
      }
      size += clusters_.CalculateSize(_repeated_clusters_codec);
      size += unclusteredOpHistogram_.CalculateSize(_repeated_unclusteredOpHistogram_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XlaAutoClusteringSummary other) {
      if (other == null) {
        return;
      }
      if (other.UnclusteredNodeCount != 0) {
        UnclusteredNodeCount = other.UnclusteredNodeCount;
      }
      if (other.ClusteredNodeCount != 0) {
        ClusteredNodeCount = other.ClusteredNodeCount;
      }
      clusters_.Add(other.clusters_);
      unclusteredOpHistogram_.Add(other.unclusteredOpHistogram_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnclusteredNodeCount = input.ReadInt32();
            break;
          }
          case 16: {
            ClusteredNodeCount = input.ReadInt32();
            break;
          }
          case 26: {
            clusters_.AddEntriesFrom(input, _repeated_clusters_codec);
            break;
          }
          case 34: {
            unclusteredOpHistogram_.AddEntriesFrom(input, _repeated_unclusteredOpHistogram_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the XlaAutoClusteringSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Represents a single element in a histogram of ops ("op" as in "TensorFlow
      /// operation").
      ///
      /// Next ID: 3
      /// </summary>
      public sealed partial class OpAndCount : pb::IMessage<OpAndCount> {
        private static readonly pb::MessageParser<OpAndCount> _parser = new pb::MessageParser<OpAndCount>(() => new OpAndCount());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OpAndCount> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.XlaAutoClusteringSummary.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OpAndCount() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OpAndCount(OpAndCount other) : this() {
          op_ = other.op_;
          count_ = other.count_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OpAndCount Clone() {
          return new OpAndCount(this);
        }

        /// <summary>Field number for the "op" field.</summary>
        public const int OpFieldNumber = 1;
        private string op_ = "";
        /// <summary>
        /// The TensorFlow operation (like MatMult, Add etc.)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Op {
          get { return op_; }
          set {
            op_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private int count_;
        /// <summary>
        /// The number of times this occurs.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OpAndCount);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OpAndCount other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Op != other.Op) return false;
          if (Count != other.Count) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Op.Length != 0) hash ^= Op.GetHashCode();
          if (Count != 0) hash ^= Count.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Op.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Op);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Count);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Op.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Op);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OpAndCount other) {
          if (other == null) {
            return;
          }
          if (other.Op.Length != 0) {
            Op = other.Op;
          }
          if (other.Count != 0) {
            Count = other.Count;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Op = input.ReadString();
                break;
              }
              case 16: {
                Count = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Describes a single XLA cluster.
      ///
      /// Next ID: 4
      /// </summary>
      public sealed partial class Cluster : pb::IMessage<Cluster> {
        private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.XlaAutoClusteringSummary.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cluster() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cluster(Cluster other) : this() {
          name_ = other.name_;
          size_ = other.size_;
          opHistogram_ = other.opHistogram_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Cluster Clone() {
          return new Cluster(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 2;
        private int size_;
        /// <summary>
        /// The number of nodes in the cluster.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Size {
          get { return size_; }
          set {
            size_ = value;
          }
        }

        /// <summary>Field number for the "op_histogram" field.</summary>
        public const int OpHistogramFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount> _repeated_opHistogram_codec
            = pb::FieldCodec.ForMessage(26, global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount.Parser);
        private readonly pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount> opHistogram_ = new pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount>();
        /// <summary>
        /// A histogram of the TF operations in this cluster.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Tensorflow.XlaAutoClusteringSummary.Types.OpAndCount> OpHistogram {
          get { return opHistogram_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Cluster);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Cluster other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Size != other.Size) return false;
          if(!opHistogram_.Equals(other.opHistogram_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Size != 0) hash ^= Size.GetHashCode();
          hash ^= opHistogram_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Size != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Size);
          }
          opHistogram_.WriteTo(output, _repeated_opHistogram_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Size != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
          }
          size += opHistogram_.CalculateSize(_repeated_opHistogram_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Cluster other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Size != 0) {
            Size = other.Size;
          }
          opHistogram_.Add(other.opHistogram_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Size = input.ReadInt32();
                break;
              }
              case 26: {
                opHistogram_.AddEntriesFrom(input, _repeated_opHistogram_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Listeners listening for auto clustering events get messages of this type.
  ///
  /// Next ID: 4
  /// </summary>
  public sealed partial class XlaAutoClusteringActivity : pb::IMessage<XlaAutoClusteringActivity> {
    private static readonly pb::MessageParser<XlaAutoClusteringActivity> _parser = new pb::MessageParser<XlaAutoClusteringActivity>(() => new XlaAutoClusteringActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XlaAutoClusteringActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.XlaActivityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaAutoClusteringActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaAutoClusteringActivity(XlaAutoClusteringActivity other) : this() {
      globalJitLevel_ = other.globalJitLevel_;
      cpuGlobalJitEnabled_ = other.cpuGlobalJitEnabled_;
      summary_ = other.summary_ != null ? other.summary_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaAutoClusteringActivity Clone() {
      return new XlaAutoClusteringActivity(this);
    }

    /// <summary>Field number for the "global_jit_level" field.</summary>
    public const int GlobalJitLevelFieldNumber = 1;
    private global::Tensorflow.OptimizerOptions.Types.GlobalJitLevel globalJitLevel_ = 0;
    /// <summary>
    /// The value of GlobalJitLevel, as determined by `GetGlobalJitLevelForGraph`.
    /// This determines if global auto-clustering is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.OptimizerOptions.Types.GlobalJitLevel GlobalJitLevel {
      get { return globalJitLevel_; }
      set {
        globalJitLevel_ = value;
      }
    }

    /// <summary>Field number for the "cpu_global_jit_enabled" field.</summary>
    public const int CpuGlobalJitEnabledFieldNumber = 2;
    private bool cpuGlobalJitEnabled_;
    /// <summary>
    /// Whether --tf_xla_cpu_global_jit is enabled in TF_XLA_FLAGS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CpuGlobalJitEnabled {
      get { return cpuGlobalJitEnabled_; }
      set {
        cpuGlobalJitEnabled_ = value;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 3;
    private global::Tensorflow.XlaAutoClusteringSummary summary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.XlaAutoClusteringSummary Summary {
      get { return summary_; }
      set {
        summary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XlaAutoClusteringActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XlaAutoClusteringActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GlobalJitLevel != other.GlobalJitLevel) return false;
      if (CpuGlobalJitEnabled != other.CpuGlobalJitEnabled) return false;
      if (!object.Equals(Summary, other.Summary)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GlobalJitLevel != 0) hash ^= GlobalJitLevel.GetHashCode();
      if (CpuGlobalJitEnabled != false) hash ^= CpuGlobalJitEnabled.GetHashCode();
      if (summary_ != null) hash ^= Summary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GlobalJitLevel != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) GlobalJitLevel);
      }
      if (CpuGlobalJitEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(CpuGlobalJitEnabled);
      }
      if (summary_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Summary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GlobalJitLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GlobalJitLevel);
      }
      if (CpuGlobalJitEnabled != false) {
        size += 1 + 1;
      }
      if (summary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Summary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XlaAutoClusteringActivity other) {
      if (other == null) {
        return;
      }
      if (other.GlobalJitLevel != 0) {
        GlobalJitLevel = other.GlobalJitLevel;
      }
      if (other.CpuGlobalJitEnabled != false) {
        CpuGlobalJitEnabled = other.CpuGlobalJitEnabled;
      }
      if (other.summary_ != null) {
        if (summary_ == null) {
          Summary = new global::Tensorflow.XlaAutoClusteringSummary();
        }
        Summary.MergeFrom(other.Summary);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GlobalJitLevel = (global::Tensorflow.OptimizerOptions.Types.GlobalJitLevel) input.ReadEnum();
            break;
          }
          case 16: {
            CpuGlobalJitEnabled = input.ReadBool();
            break;
          }
          case 26: {
            if (summary_ == null) {
              Summary = new global::Tensorflow.XlaAutoClusteringSummary();
            }
            input.ReadMessage(Summary);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Listeners listening for JIT compilation events get messages of this type.
  /// Each instance of XlaJitCompilationActivity corresponds to a single
  /// compilation of a single XLA cluster.  E.g. if a graph has two clusters, A and
  /// B, and A is compiled 5 times and B is compiled 2 times then we will generate
  /// 7 instances of XlaJitCompilationActivity.
  ///
  /// Next ID: 5
  /// </summary>
  public sealed partial class XlaJitCompilationActivity : pb::IMessage<XlaJitCompilationActivity> {
    private static readonly pb::MessageParser<XlaJitCompilationActivity> _parser = new pb::MessageParser<XlaJitCompilationActivity>(() => new XlaJitCompilationActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XlaJitCompilationActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.XlaActivityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaJitCompilationActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaJitCompilationActivity(XlaJitCompilationActivity other) : this() {
      clusterName_ = other.clusterName_;
      compileCount_ = other.compileCount_;
      compileTimeUs_ = other.compileTimeUs_;
      cumulativeCompileTimeUs_ = other.cumulativeCompileTimeUs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaJitCompilationActivity Clone() {
      return new XlaJitCompilationActivity(this);
    }

    /// <summary>Field number for the "cluster_name" field.</summary>
    public const int ClusterNameFieldNumber = 1;
    private string clusterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterName {
      get { return clusterName_; }
      set {
        clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compile_count" field.</summary>
    public const int CompileCountFieldNumber = 2;
    private int compileCount_;
    /// <summary>
    /// The number of time this cluster has been compiled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompileCount {
      get { return compileCount_; }
      set {
        compileCount_ = value;
      }
    }

    /// <summary>Field number for the "compile_time_us" field.</summary>
    public const int CompileTimeUsFieldNumber = 3;
    private long compileTimeUs_;
    /// <summary>
    /// Microseconds spent in the individual compilation being reported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompileTimeUs {
      get { return compileTimeUs_; }
      set {
        compileTimeUs_ = value;
      }
    }

    /// <summary>Field number for the "cumulative_compile_time_us" field.</summary>
    public const int CumulativeCompileTimeUsFieldNumber = 4;
    private long cumulativeCompileTimeUs_;
    /// <summary>
    /// Total microseconds spent in (re-)compiling this cluster so far.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CumulativeCompileTimeUs {
      get { return cumulativeCompileTimeUs_; }
      set {
        cumulativeCompileTimeUs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XlaJitCompilationActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XlaJitCompilationActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterName != other.ClusterName) return false;
      if (CompileCount != other.CompileCount) return false;
      if (CompileTimeUs != other.CompileTimeUs) return false;
      if (CumulativeCompileTimeUs != other.CumulativeCompileTimeUs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
      if (CompileCount != 0) hash ^= CompileCount.GetHashCode();
      if (CompileTimeUs != 0L) hash ^= CompileTimeUs.GetHashCode();
      if (CumulativeCompileTimeUs != 0L) hash ^= CumulativeCompileTimeUs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterName);
      }
      if (CompileCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompileCount);
      }
      if (CompileTimeUs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CompileTimeUs);
      }
      if (CumulativeCompileTimeUs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CumulativeCompileTimeUs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
      }
      if (CompileCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompileCount);
      }
      if (CompileTimeUs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompileTimeUs);
      }
      if (CumulativeCompileTimeUs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CumulativeCompileTimeUs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XlaJitCompilationActivity other) {
      if (other == null) {
        return;
      }
      if (other.ClusterName.Length != 0) {
        ClusterName = other.ClusterName;
      }
      if (other.CompileCount != 0) {
        CompileCount = other.CompileCount;
      }
      if (other.CompileTimeUs != 0L) {
        CompileTimeUs = other.CompileTimeUs;
      }
      if (other.CumulativeCompileTimeUs != 0L) {
        CumulativeCompileTimeUs = other.CumulativeCompileTimeUs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterName = input.ReadString();
            break;
          }
          case 16: {
            CompileCount = input.ReadInt32();
            break;
          }
          case 24: {
            CompileTimeUs = input.ReadInt64();
            break;
          }
          case 32: {
            CumulativeCompileTimeUs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// LINT.IfChange
  ///
  /// Used for logging situations seen in Tensorflow models being optimized that
  /// are known to not perform well with XLA.
  ///
  /// Next ID: 3
  /// </summary>
  public sealed partial class XlaOptimizationRemark : pb::IMessage<XlaOptimizationRemark> {
    private static readonly pb::MessageParser<XlaOptimizationRemark> _parser = new pb::MessageParser<XlaOptimizationRemark>(() => new XlaOptimizationRemark());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XlaOptimizationRemark> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.XlaActivityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaOptimizationRemark() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaOptimizationRemark(XlaOptimizationRemark other) : this() {
      warning_ = other.warning_;
      debugInformation_ = other.debugInformation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XlaOptimizationRemark Clone() {
      return new XlaOptimizationRemark(this);
    }

    /// <summary>Field number for the "warning" field.</summary>
    public const int WarningFieldNumber = 1;
    private global::Tensorflow.XlaOptimizationRemark.Types.Warning warning_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.XlaOptimizationRemark.Types.Warning Warning {
      get { return warning_; }
      set {
        warning_ = value;
      }
    }

    /// <summary>Field number for the "debug_information" field.</summary>
    public const int DebugInformationFieldNumber = 2;
    private string debugInformation_ = "";
    /// <summary>
    /// Information such as which node was the problem.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebugInformation {
      get { return debugInformation_; }
      set {
        debugInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XlaOptimizationRemark);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XlaOptimizationRemark other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Warning != other.Warning) return false;
      if (DebugInformation != other.DebugInformation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Warning != 0) hash ^= Warning.GetHashCode();
      if (DebugInformation.Length != 0) hash ^= DebugInformation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Warning != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Warning);
      }
      if (DebugInformation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DebugInformation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Warning != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Warning);
      }
      if (DebugInformation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugInformation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XlaOptimizationRemark other) {
      if (other == null) {
        return;
      }
      if (other.Warning != 0) {
        Warning = other.Warning;
      }
      if (other.DebugInformation.Length != 0) {
        DebugInformation = other.DebugInformation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Warning = (global::Tensorflow.XlaOptimizationRemark.Types.Warning) input.ReadEnum();
            break;
          }
          case 18: {
            DebugInformation = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the XlaOptimizationRemark message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Next ID: 6
      /// </summary>
      public enum Warning {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("INACCURATE_OPERATION")] InaccurateOperation = 1,
        [pbr::OriginalName("SLOW_OPERATION")] SlowOperation = 2,
        [pbr::OriginalName("UNIMPLEMENTED_OPERATION")] UnimplementedOperation = 3,
        [pbr::OriginalName("SLOW_IMAGE_RESIZE_DIMENSIONS")] SlowImageResizeDimensions = 4,
        [pbr::OriginalName("MEGAMORPHIC_FUNCTION")] MegamorphicFunction = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
