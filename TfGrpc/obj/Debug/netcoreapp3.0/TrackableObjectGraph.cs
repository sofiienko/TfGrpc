// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/trackable_object_graph.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/trackable_object_graph.proto</summary>
  public static partial class TrackableObjectGraphReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/trackable_object_graph.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrackableObjectGraphReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjV0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvdHJhY2thYmxlX29iamVjdF9n",
            "cmFwaC5wcm90bxIKdGVuc29yZmxvdyKDBQoUVHJhY2thYmxlT2JqZWN0R3Jh",
            "cGgSPwoFbm9kZXMYASADKAsyMC50ZW5zb3JmbG93LlRyYWNrYWJsZU9iamVj",
            "dEdyYXBoLlRyYWNrYWJsZU9iamVjdBqpBAoPVHJhY2thYmxlT2JqZWN0ElIK",
            "CGNoaWxkcmVuGAEgAygLMkAudGVuc29yZmxvdy5UcmFja2FibGVPYmplY3RH",
            "cmFwaC5UcmFja2FibGVPYmplY3QuT2JqZWN0UmVmZXJlbmNlElUKCmF0dHJp",
            "YnV0ZXMYAiADKAsyQS50ZW5zb3JmbG93LlRyYWNrYWJsZU9iamVjdEdyYXBo",
            "LlRyYWNrYWJsZU9iamVjdC5TZXJpYWxpemVkVGVuc29yEl4KDnNsb3RfdmFy",
            "aWFibGVzGAMgAygLMkYudGVuc29yZmxvdy5UcmFja2FibGVPYmplY3RHcmFw",
            "aC5UcmFja2FibGVPYmplY3QuU2xvdFZhcmlhYmxlUmVmZXJlbmNlGjYKD09i",
            "amVjdFJlZmVyZW5jZRIPCgdub2RlX2lkGAEgASgFEhIKCmxvY2FsX25hbWUY",
            "AiABKAkaZQoQU2VyaWFsaXplZFRlbnNvchIMCgRuYW1lGAEgASgJEhEKCWZ1",
            "bGxfbmFtZRgCIAEoCRIWCg5jaGVja3BvaW50X2tleRgDIAEoCRIYChBvcHRp",
            "b25hbF9yZXN0b3JlGAQgASgIGmwKFVNsb3RWYXJpYWJsZVJlZmVyZW5jZRIh",
            "ChlvcmlnaW5hbF92YXJpYWJsZV9ub2RlX2lkGAEgASgFEhEKCXNsb3RfbmFt",
            "ZRgCIAEoCRIdChVzbG90X3ZhcmlhYmxlX25vZGVfaWQYAyABKAVCA/gBAWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TrackableObjectGraph), global::Tensorflow.TrackableObjectGraph.Parser, new[]{ "Nodes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TrackableObjectGraph.Types.TrackableObject), global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Parser, new[]{ "Children", "Attributes", "SlotVariables" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.ObjectReference), global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.ObjectReference.Parser, new[]{ "NodeId", "LocalName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SerializedTensor), global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SerializedTensor.Parser, new[]{ "Name", "FullName", "CheckpointKey", "OptionalRestore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SlotVariableReference), global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SlotVariableReference.Parser, new[]{ "OriginalVariableNodeId", "SlotName", "SlotVariableNodeId" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TrackableObjectGraph : pb::IMessage<TrackableObjectGraph> {
    private static readonly pb::MessageParser<TrackableObjectGraph> _parser = new pb::MessageParser<TrackableObjectGraph>(() => new TrackableObjectGraph());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackableObjectGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.TrackableObjectGraphReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackableObjectGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackableObjectGraph(TrackableObjectGraph other) : this() {
      nodes_ = other.nodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackableObjectGraph Clone() {
      return new TrackableObjectGraph(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject> nodes_ = new pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackableObjectGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackableObjectGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackableObjectGraph other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TrackableObjectGraph message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TrackableObject : pb::IMessage<TrackableObject> {
        private static readonly pb::MessageParser<TrackableObject> _parser = new pb::MessageParser<TrackableObject>(() => new TrackableObject());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TrackableObject> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Tensorflow.TrackableObjectGraph.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackableObject() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackableObject(TrackableObject other) : this() {
          children_ = other.children_.Clone();
          attributes_ = other.attributes_.Clone();
          slotVariables_ = other.slotVariables_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TrackableObject Clone() {
          return new TrackableObject(this);
        }

        /// <summary>Field number for the "children" field.</summary>
        public const int ChildrenFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.ObjectReference> _repeated_children_codec
            = pb::FieldCodec.ForMessage(10, global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.ObjectReference.Parser);
        private readonly pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.ObjectReference> children_ = new pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.ObjectReference>();
        /// <summary>
        /// Objects which this object depends on.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.ObjectReference> Children {
          get { return children_; }
        }

        /// <summary>Field number for the "attributes" field.</summary>
        public const int AttributesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SerializedTensor> _repeated_attributes_codec
            = pb::FieldCodec.ForMessage(18, global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SerializedTensor.Parser);
        private readonly pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SerializedTensor> attributes_ = new pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SerializedTensor>();
        /// <summary>
        /// Serialized data specific to this object.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SerializedTensor> Attributes {
          get { return attributes_; }
        }

        /// <summary>Field number for the "slot_variables" field.</summary>
        public const int SlotVariablesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SlotVariableReference> _repeated_slotVariables_codec
            = pb::FieldCodec.ForMessage(26, global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SlotVariableReference.Parser);
        private readonly pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SlotVariableReference> slotVariables_ = new pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SlotVariableReference>();
        /// <summary>
        /// Slot variables owned by this object.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Types.SlotVariableReference> SlotVariables {
          get { return slotVariables_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TrackableObject);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TrackableObject other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!children_.Equals(other.children_)) return false;
          if(!attributes_.Equals(other.attributes_)) return false;
          if(!slotVariables_.Equals(other.slotVariables_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= children_.GetHashCode();
          hash ^= attributes_.GetHashCode();
          hash ^= slotVariables_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          children_.WriteTo(output, _repeated_children_codec);
          attributes_.WriteTo(output, _repeated_attributes_codec);
          slotVariables_.WriteTo(output, _repeated_slotVariables_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += children_.CalculateSize(_repeated_children_codec);
          size += attributes_.CalculateSize(_repeated_attributes_codec);
          size += slotVariables_.CalculateSize(_repeated_slotVariables_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TrackableObject other) {
          if (other == null) {
            return;
          }
          children_.Add(other.children_);
          attributes_.Add(other.attributes_);
          slotVariables_.Add(other.slotVariables_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                children_.AddEntriesFrom(input, _repeated_children_codec);
                break;
              }
              case 18: {
                attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
                break;
              }
              case 26: {
                slotVariables_.AddEntriesFrom(input, _repeated_slotVariables_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the TrackableObject message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class ObjectReference : pb::IMessage<ObjectReference> {
            private static readonly pb::MessageParser<ObjectReference> _parser = new pb::MessageParser<ObjectReference>(() => new ObjectReference());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ObjectReference> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ObjectReference() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ObjectReference(ObjectReference other) : this() {
              nodeId_ = other.nodeId_;
              localName_ = other.localName_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ObjectReference Clone() {
              return new ObjectReference(this);
            }

            /// <summary>Field number for the "node_id" field.</summary>
            public const int NodeIdFieldNumber = 1;
            private int nodeId_;
            /// <summary>
            /// An index into `TrackableObjectGraph.nodes`, indicating the object
            /// being referenced.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int NodeId {
              get { return nodeId_; }
              set {
                nodeId_ = value;
              }
            }

            /// <summary>Field number for the "local_name" field.</summary>
            public const int LocalNameFieldNumber = 2;
            private string localName_ = "";
            /// <summary>
            /// A user-provided name for the edge.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string LocalName {
              get { return localName_; }
              set {
                localName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ObjectReference);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ObjectReference other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (NodeId != other.NodeId) return false;
              if (LocalName != other.LocalName) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (NodeId != 0) hash ^= NodeId.GetHashCode();
              if (LocalName.Length != 0) hash ^= LocalName.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (NodeId != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(NodeId);
              }
              if (LocalName.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(LocalName);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (NodeId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
              }
              if (LocalName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalName);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ObjectReference other) {
              if (other == null) {
                return;
              }
              if (other.NodeId != 0) {
                NodeId = other.NodeId;
              }
              if (other.LocalName.Length != 0) {
                LocalName = other.LocalName;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    NodeId = input.ReadInt32();
                    break;
                  }
                  case 18: {
                    LocalName = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class SerializedTensor : pb::IMessage<SerializedTensor> {
            private static readonly pb::MessageParser<SerializedTensor> _parser = new pb::MessageParser<SerializedTensor>(() => new SerializedTensor());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SerializedTensor> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SerializedTensor() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SerializedTensor(SerializedTensor other) : this() {
              name_ = other.name_;
              fullName_ = other.fullName_;
              checkpointKey_ = other.checkpointKey_;
              optionalRestore_ = other.optionalRestore_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SerializedTensor Clone() {
              return new SerializedTensor(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            /// <summary>
            /// A name for the Tensor. Simple variables have only one
            /// `SerializedTensor` named "VARIABLE_VALUE" by convention. This value may
            /// be restored on object creation as an optimization.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "full_name" field.</summary>
            public const int FullNameFieldNumber = 2;
            private string fullName_ = "";
            /// <summary>
            /// The full name of the variable/tensor, if applicable. Used to allow
            /// name-based loading of checkpoints which were saved using an
            /// object-based API. Should match the checkpoint key which would have been
            /// assigned by tf.train.Saver.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FullName {
              get { return fullName_; }
              set {
                fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "checkpoint_key" field.</summary>
            public const int CheckpointKeyFieldNumber = 3;
            private string checkpointKey_ = "";
            /// <summary>
            /// The generated name of the Tensor in the checkpoint.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CheckpointKey {
              get { return checkpointKey_; }
              set {
                checkpointKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "optional_restore" field.</summary>
            public const int OptionalRestoreFieldNumber = 4;
            private bool optionalRestore_;
            /// <summary>
            /// Whether checkpoints should be considered as matching even without this
            /// value restored. Used for non-critical values which don't affect the
            /// TensorFlow graph, such as layer configurations.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool OptionalRestore {
              get { return optionalRestore_; }
              set {
                optionalRestore_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SerializedTensor);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SerializedTensor other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (FullName != other.FullName) return false;
              if (CheckpointKey != other.CheckpointKey) return false;
              if (OptionalRestore != other.OptionalRestore) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (FullName.Length != 0) hash ^= FullName.GetHashCode();
              if (CheckpointKey.Length != 0) hash ^= CheckpointKey.GetHashCode();
              if (OptionalRestore != false) hash ^= OptionalRestore.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (FullName.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(FullName);
              }
              if (CheckpointKey.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(CheckpointKey);
              }
              if (OptionalRestore != false) {
                output.WriteRawTag(32);
                output.WriteBool(OptionalRestore);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (FullName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
              }
              if (CheckpointKey.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CheckpointKey);
              }
              if (OptionalRestore != false) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SerializedTensor other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.FullName.Length != 0) {
                FullName = other.FullName;
              }
              if (other.CheckpointKey.Length != 0) {
                CheckpointKey = other.CheckpointKey;
              }
              if (other.OptionalRestore != false) {
                OptionalRestore = other.OptionalRestore;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    FullName = input.ReadString();
                    break;
                  }
                  case 26: {
                    CheckpointKey = input.ReadString();
                    break;
                  }
                  case 32: {
                    OptionalRestore = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class SlotVariableReference : pb::IMessage<SlotVariableReference> {
            private static readonly pb::MessageParser<SlotVariableReference> _parser = new pb::MessageParser<SlotVariableReference>(() => new SlotVariableReference());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<SlotVariableReference> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Tensorflow.TrackableObjectGraph.Types.TrackableObject.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SlotVariableReference() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SlotVariableReference(SlotVariableReference other) : this() {
              originalVariableNodeId_ = other.originalVariableNodeId_;
              slotName_ = other.slotName_;
              slotVariableNodeId_ = other.slotVariableNodeId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public SlotVariableReference Clone() {
              return new SlotVariableReference(this);
            }

            /// <summary>Field number for the "original_variable_node_id" field.</summary>
            public const int OriginalVariableNodeIdFieldNumber = 1;
            private int originalVariableNodeId_;
            /// <summary>
            /// An index into `TrackableObjectGraph.nodes`, indicating the
            /// variable object this slot was created for.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int OriginalVariableNodeId {
              get { return originalVariableNodeId_; }
              set {
                originalVariableNodeId_ = value;
              }
            }

            /// <summary>Field number for the "slot_name" field.</summary>
            public const int SlotNameFieldNumber = 2;
            private string slotName_ = "";
            /// <summary>
            /// The name of the slot (e.g. "m"/"v").
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SlotName {
              get { return slotName_; }
              set {
                slotName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "slot_variable_node_id" field.</summary>
            public const int SlotVariableNodeIdFieldNumber = 3;
            private int slotVariableNodeId_;
            /// <summary>
            /// An index into `TrackableObjectGraph.nodes`, indicating the
            /// `Object` with the value of the slot variable.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int SlotVariableNodeId {
              get { return slotVariableNodeId_; }
              set {
                slotVariableNodeId_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as SlotVariableReference);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(SlotVariableReference other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (OriginalVariableNodeId != other.OriginalVariableNodeId) return false;
              if (SlotName != other.SlotName) return false;
              if (SlotVariableNodeId != other.SlotVariableNodeId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (OriginalVariableNodeId != 0) hash ^= OriginalVariableNodeId.GetHashCode();
              if (SlotName.Length != 0) hash ^= SlotName.GetHashCode();
              if (SlotVariableNodeId != 0) hash ^= SlotVariableNodeId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (OriginalVariableNodeId != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(OriginalVariableNodeId);
              }
              if (SlotName.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(SlotName);
              }
              if (SlotVariableNodeId != 0) {
                output.WriteRawTag(24);
                output.WriteInt32(SlotVariableNodeId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (OriginalVariableNodeId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginalVariableNodeId);
              }
              if (SlotName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SlotName);
              }
              if (SlotVariableNodeId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotVariableNodeId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(SlotVariableReference other) {
              if (other == null) {
                return;
              }
              if (other.OriginalVariableNodeId != 0) {
                OriginalVariableNodeId = other.OriginalVariableNodeId;
              }
              if (other.SlotName.Length != 0) {
                SlotName = other.SlotName;
              }
              if (other.SlotVariableNodeId != 0) {
                SlotVariableNodeId = other.SlotVariableNodeId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    OriginalVariableNodeId = input.ReadInt32();
                    break;
                  }
                  case 18: {
                    SlotName = input.ReadString();
                    break;
                  }
                  case 24: {
                    SlotVariableNodeId = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
