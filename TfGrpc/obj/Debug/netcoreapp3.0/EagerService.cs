// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/eager_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow.Eager {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/eager_service.proto</summary>
  public static partial class EagerServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/eager_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EagerServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cix0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvZWFnZXJfc2VydmljZS5wcm90",
            "bxIQdGVuc29yZmxvdy5lYWdlchoqdGVuc29yZmxvdy9jb3JlL2ZyYW1ld29y",
            "ay9hdHRyX3ZhbHVlLnByb3RvGjF0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3Jr",
            "L2RldmljZV9hdHRyaWJ1dGVzLnByb3RvGih0ZW5zb3JmbG93L2NvcmUvZnJh",
            "bWV3b3JrL2Z1bmN0aW9uLnByb3RvGiZ0ZW5zb3JmbG93L2NvcmUvZnJhbWV3",
            "b3JrL3RlbnNvci5wcm90bxosdGVuc29yZmxvdy9jb3JlL2ZyYW1ld29yay90",
            "ZW5zb3Jfc2hhcGUucHJvdG8aKHRlbnNvcmZsb3cvY29yZS9mcmFtZXdvcmsv",
            "dmVyc2lvbnMucHJvdG8aM3RlbnNvcmZsb3cvY29yZS9wcm90b2J1Zi9yZW1v",
            "dGVfdGVuc29yX2hhbmRsZS5wcm90bxowdGVuc29yZmxvdy9jb3JlL3Byb3Rv",
            "YnVmL3RlbnNvcmZsb3dfc2VydmVyLnByb3RvIrQCCglPcGVyYXRpb24SCgoC",
            "aWQYASABKAMSDAoEbmFtZRgCIAEoCRI0CgZpbnB1dHMYAyADKAsyJC50ZW5z",
            "b3JmbG93LmVhZ2VyLlJlbW90ZVRlbnNvckhhbmRsZRIWCg5jb250cm9sX29w",
            "X2lkcxgEIAMoAxI1CgVhdHRycxgFIAMoCzImLnRlbnNvcmZsb3cuZWFnZXIu",
            "T3BlcmF0aW9uLkF0dHJzRW50cnkSDgoGZGV2aWNlGAYgASgJEh0KFWlzX2Nv",
            "bXBvbmVudF9mdW5jdGlvbhgHIAEoCBIUCgxmdW5jX3N0ZXBfaWQYCCABKAMa",
            "QwoKQXR0cnNFbnRyeRILCgNrZXkYASABKAkSJAoFdmFsdWUYAiABKAsyFS50",
            "ZW5zb3JmbG93LkF0dHJWYWx1ZToCOAEiwgIKCVF1ZXVlSXRlbRJAChBoYW5k",
            "bGVfdG9fZGVjcmVmGAEgASgLMiQudGVuc29yZmxvdy5lYWdlci5SZW1vdGVU",
            "ZW5zb3JIYW5kbGVIABIwCglvcGVyYXRpb24YAiABKAsyGy50ZW5zb3JmbG93",
            "LmVhZ2VyLk9wZXJhdGlvbkgAEjUKC3NlbmRfdGVuc29yGAMgASgLMh4udGVu",
            "c29yZmxvdy5lYWdlci5TZW5kVGVuc29yT3BIABJBChFyZWdpc3Rlcl9mdW5j",
            "dGlvbhgEIAEoCzIkLnRlbnNvcmZsb3cuZWFnZXIuUmVnaXN0ZXJGdW5jdGlv",
            "bk9wSAASPwoQY2xlYW51cF9mdW5jdGlvbhgFIAEoCzIjLnRlbnNvcmZsb3cu",
            "ZWFnZXIuQ2xlYW51cEZ1bmN0aW9uT3BIAEIGCgRpdGVtIjwKDVF1ZXVlUmVz",
            "cG9uc2USKwoFc2hhcGUYASADKAsyHC50ZW5zb3JmbG93LlRlbnNvclNoYXBl",
            "UHJvdG8iigIKFENyZWF0ZUNvbnRleHRSZXF1ZXN0EikKCnNlcnZlcl9kZWYY",
            "ASABKAsyFS50ZW5zb3JmbG93LlNlcnZlckRlZhINCgVhc3luYxgCIAEoCBIX",
            "Cg9rZWVwX2FsaXZlX3NlY3MYAyABKAMSKwoLdmVyc2lvbl9kZWYYBCABKAsy",
            "Fi50ZW5zb3JmbG93LlZlcnNpb25EZWYSPwoZY2x1c3Rlcl9kZXZpY2VfYXR0",
            "cmlidXRlcxgGIAMoCzIcLnRlbnNvcmZsb3cuRGV2aWNlQXR0cmlidXRlcxIS",
            "Cgpjb250ZXh0X2lkGAcgASgGEhcKD2NvbnRleHRfdmlld19pZBgIIAEoBkoE",
            "CAUQBiJWChVDcmVhdGVDb250ZXh0UmVzcG9uc2USNwoRZGV2aWNlX2F0dHJp",
            "YnV0ZXMYAiADKAsyHC50ZW5zb3JmbG93LkRldmljZUF0dHJpYnV0ZXNKBAgB",
            "EAIirwEKFFVwZGF0ZUNvbnRleHRSZXF1ZXN0EikKCnNlcnZlcl9kZWYYASAB",
            "KAsyFS50ZW5zb3JmbG93LlNlcnZlckRlZhI/ChljbHVzdGVyX2RldmljZV9h",
            "dHRyaWJ1dGVzGAIgAygLMhwudGVuc29yZmxvdy5EZXZpY2VBdHRyaWJ1dGVz",
            "EhIKCmNvbnRleHRfaWQYAyABKAYSFwoPY29udGV4dF92aWV3X2lkGAQgASgG",
            "IlAKFVVwZGF0ZUNvbnRleHRSZXNwb25zZRI3ChFkZXZpY2VfYXR0cmlidXRl",
            "cxgBIAMoCzIcLnRlbnNvcmZsb3cuRGV2aWNlQXR0cmlidXRlcyJQCg5FbnF1",
            "ZXVlUmVxdWVzdBISCgpjb250ZXh0X2lkGAEgASgGEioKBXF1ZXVlGAMgAygL",
            "MhsudGVuc29yZmxvdy5lYWdlci5RdWV1ZUl0ZW0iSgoPRW5xdWV1ZVJlc3Bv",
            "bnNlEjcKDnF1ZXVlX3Jlc3BvbnNlGAEgAygLMh8udGVuc29yZmxvdy5lYWdl",
            "ci5RdWV1ZVJlc3BvbnNlIjkKFFdhaXRRdWV1ZURvbmVSZXF1ZXN0EhIKCmNv",
            "bnRleHRfaWQYASABKAYSDQoFb3BfaWQYAiADKAMiFwoVV2FpdFF1ZXVlRG9u",
            "ZVJlc3BvbnNlIiYKEEtlZXBBbGl2ZVJlcXVlc3QSEgoKY29udGV4dF9pZBgB",
            "IAEoBiIsChFLZWVwQWxpdmVSZXNwb25zZRIXCg9jb250ZXh0X3ZpZXdfaWQY",
            "ASABKAYiKQoTQ2xvc2VDb250ZXh0UmVxdWVzdBISCgpjb250ZXh0X2lkGAEg",
            "ASgGIhYKFENsb3NlQ29udGV4dFJlc3BvbnNlImIKElJlZ2lzdGVyRnVuY3Rp",
            "b25PcBItCgxmdW5jdGlvbl9kZWYYASABKAsyFy50ZW5zb3JmbG93LkZ1bmN0",
            "aW9uRGVmEh0KFWlzX2NvbXBvbmVudF9mdW5jdGlvbhgCIAEoCCIkChFDbGVh",
            "bnVwRnVuY3Rpb25PcBIPCgdzdGVwX2lkGAEgASgDIlwKDFNlbmRUZW5zb3JP",
            "cBINCgVvcF9pZBgBIAEoAxIoCgd0ZW5zb3JzGAIgAygLMhcudGVuc29yZmxv",
            "dy5UZW5zb3JQcm90bxITCgtkZXZpY2VfbmFtZRgDIAEoCTKWBQoMRWFnZXJT",
            "ZXJ2aWNlEmAKDUNyZWF0ZUNvbnRleHQSJi50ZW5zb3JmbG93LmVhZ2VyLkNy",
            "ZWF0ZUNvbnRleHRSZXF1ZXN0GicudGVuc29yZmxvdy5lYWdlci5DcmVhdGVD",
            "b250ZXh0UmVzcG9uc2USYAoNVXBkYXRlQ29udGV4dBImLnRlbnNvcmZsb3cu",
            "ZWFnZXIuVXBkYXRlQ29udGV4dFJlcXVlc3QaJy50ZW5zb3JmbG93LmVhZ2Vy",
            "LlVwZGF0ZUNvbnRleHRSZXNwb25zZRJOCgdFbnF1ZXVlEiAudGVuc29yZmxv",
            "dy5lYWdlci5FbnF1ZXVlUmVxdWVzdBohLnRlbnNvcmZsb3cuZWFnZXIuRW5x",
            "dWV1ZVJlc3BvbnNlElsKEFN0cmVhbWluZ0VucXVldWUSIC50ZW5zb3JmbG93",
            "LmVhZ2VyLkVucXVldWVSZXF1ZXN0GiEudGVuc29yZmxvdy5lYWdlci5FbnF1",
            "ZXVlUmVzcG9uc2UoATABEmAKDVdhaXRRdWV1ZURvbmUSJi50ZW5zb3JmbG93",
            "LmVhZ2VyLldhaXRRdWV1ZURvbmVSZXF1ZXN0GicudGVuc29yZmxvdy5lYWdl",
            "ci5XYWl0UXVldWVEb25lUmVzcG9uc2USVAoJS2VlcEFsaXZlEiIudGVuc29y",
            "Zmxvdy5lYWdlci5LZWVwQWxpdmVSZXF1ZXN0GiMudGVuc29yZmxvdy5lYWdl",
            "ci5LZWVwQWxpdmVSZXNwb25zZRJdCgxDbG9zZUNvbnRleHQSJS50ZW5zb3Jm",
            "bG93LmVhZ2VyLkNsb3NlQ29udGV4dFJlcXVlc3QaJi50ZW5zb3JmbG93LmVh",
            "Z2VyLkNsb3NlQ29udGV4dFJlc3BvbnNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.AttrValueReflection.Descriptor, global::Tensorflow.DeviceAttributesReflection.Descriptor, global::Tensorflow.FunctionReflection.Descriptor, global::Tensorflow.TensorReflection.Descriptor, global::Tensorflow.TensorShapeReflection.Descriptor, global::Tensorflow.VersionsReflection.Descriptor, global::Tensorflow.Eager.RemoteTensorHandleReflection.Descriptor, global::Tensorflow.TensorflowServerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.Operation), global::Tensorflow.Eager.Operation.Parser, new[]{ "Id", "Name", "Inputs", "ControlOpIds", "Attrs", "Device", "IsComponentFunction", "FuncStepId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.QueueItem), global::Tensorflow.Eager.QueueItem.Parser, new[]{ "HandleToDecref", "Operation", "SendTensor", "RegisterFunction", "CleanupFunction" }, new[]{ "Item" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.QueueResponse), global::Tensorflow.Eager.QueueResponse.Parser, new[]{ "Shape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.CreateContextRequest), global::Tensorflow.Eager.CreateContextRequest.Parser, new[]{ "ServerDef", "Async", "KeepAliveSecs", "VersionDef", "ClusterDeviceAttributes", "ContextId", "ContextViewId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.CreateContextResponse), global::Tensorflow.Eager.CreateContextResponse.Parser, new[]{ "DeviceAttributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.UpdateContextRequest), global::Tensorflow.Eager.UpdateContextRequest.Parser, new[]{ "ServerDef", "ClusterDeviceAttributes", "ContextId", "ContextViewId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.UpdateContextResponse), global::Tensorflow.Eager.UpdateContextResponse.Parser, new[]{ "DeviceAttributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.EnqueueRequest), global::Tensorflow.Eager.EnqueueRequest.Parser, new[]{ "ContextId", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.EnqueueResponse), global::Tensorflow.Eager.EnqueueResponse.Parser, new[]{ "QueueResponse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.WaitQueueDoneRequest), global::Tensorflow.Eager.WaitQueueDoneRequest.Parser, new[]{ "ContextId", "OpId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.WaitQueueDoneResponse), global::Tensorflow.Eager.WaitQueueDoneResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.KeepAliveRequest), global::Tensorflow.Eager.KeepAliveRequest.Parser, new[]{ "ContextId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.KeepAliveResponse), global::Tensorflow.Eager.KeepAliveResponse.Parser, new[]{ "ContextViewId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.CloseContextRequest), global::Tensorflow.Eager.CloseContextRequest.Parser, new[]{ "ContextId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.CloseContextResponse), global::Tensorflow.Eager.CloseContextResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.RegisterFunctionOp), global::Tensorflow.Eager.RegisterFunctionOp.Parser, new[]{ "FunctionDef", "IsComponentFunction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.CleanupFunctionOp), global::Tensorflow.Eager.CleanupFunctionOp.Parser, new[]{ "StepId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.Eager.SendTensorOp), global::Tensorflow.Eager.SendTensorOp.Parser, new[]{ "OpId", "Tensors", "DeviceName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A proto representation of an eager operation.
  /// </summary>
  public sealed partial class Operation : pb::IMessage<Operation> {
    private static readonly pb::MessageParser<Operation> _parser = new pb::MessageParser<Operation>(() => new Operation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation(Operation other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      inputs_ = other.inputs_.Clone();
      controlOpIds_ = other.controlOpIds_.Clone();
      attrs_ = other.attrs_.Clone();
      device_ = other.device_;
      isComponentFunction_ = other.isComponentFunction_;
      funcStepId_ = other.funcStepId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation Clone() {
      return new Operation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// A unique identifier for the operation. Set by the client so that the client
    /// can uniquely identify the outputs of the scheduled operation.
    ///
    /// In the initial implementation, sending duplicate IDs has undefined
    /// behaviour, but additional constraints may be placed upon this in the
    /// future.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tensorflow.Eager.RemoteTensorHandle> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(26, global::Tensorflow.Eager.RemoteTensorHandle.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Eager.RemoteTensorHandle> inputs_ = new pbc::RepeatedField<global::Tensorflow.Eager.RemoteTensorHandle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Eager.RemoteTensorHandle> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "control_op_ids" field.</summary>
    public const int ControlOpIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_controlOpIds_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> controlOpIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Control Operation IDs that will be respected when ops are re-ordered by
    /// async execution. If async execution (+ op re-ordering) is not enabled, this
    /// should have no effect.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ControlOpIds {
      get { return controlOpIds_; }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Tensorflow.AttrValue>.Codec _map_attrs_codec
        = new pbc::MapField<string, global::Tensorflow.AttrValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Tensorflow.AttrValue.Parser), 42);
    private readonly pbc::MapField<string, global::Tensorflow.AttrValue> attrs_ = new pbc::MapField<string, global::Tensorflow.AttrValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Tensorflow.AttrValue> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 6;
    private string device_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_component_function" field.</summary>
    public const int IsComponentFunctionFieldNumber = 7;
    private bool isComponentFunction_;
    /// <summary>
    /// Indicates whether the op is a component of a multi-device function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComponentFunction {
      get { return isComponentFunction_; }
      set {
        isComponentFunction_ = value;
      }
    }

    /// <summary>Field number for the "func_step_id" field.</summary>
    public const int FuncStepIdFieldNumber = 8;
    private long funcStepId_;
    /// <summary>
    /// Set when is_component_function is true. It's initially generated
    /// when we create an FunctionLibraryRuntime::Options (negative value) and used
    /// to create Rendezvous for function execution. All components of a
    /// multi-device function should use the same step id to make sure that they
    /// can communicate through Send/Recv ops.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FuncStepId {
      get { return funcStepId_; }
      set {
        funcStepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!controlOpIds_.Equals(other.controlOpIds_)) return false;
      if (!Attrs.Equals(other.Attrs)) return false;
      if (Device != other.Device) return false;
      if (IsComponentFunction != other.IsComponentFunction) return false;
      if (FuncStepId != other.FuncStepId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= controlOpIds_.GetHashCode();
      hash ^= Attrs.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (IsComponentFunction != false) hash ^= IsComponentFunction.GetHashCode();
      if (FuncStepId != 0L) hash ^= FuncStepId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      controlOpIds_.WriteTo(output, _repeated_controlOpIds_codec);
      attrs_.WriteTo(output, _map_attrs_codec);
      if (Device.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Device);
      }
      if (IsComponentFunction != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsComponentFunction);
      }
      if (FuncStepId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(FuncStepId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += controlOpIds_.CalculateSize(_repeated_controlOpIds_codec);
      size += attrs_.CalculateSize(_map_attrs_codec);
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (IsComponentFunction != false) {
        size += 1 + 1;
      }
      if (FuncStepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FuncStepId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      inputs_.Add(other.inputs_);
      controlOpIds_.Add(other.controlOpIds_);
      attrs_.Add(other.attrs_);
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.IsComponentFunction != false) {
        IsComponentFunction = other.IsComponentFunction;
      }
      if (other.FuncStepId != 0L) {
        FuncStepId = other.FuncStepId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 34:
          case 32: {
            controlOpIds_.AddEntriesFrom(input, _repeated_controlOpIds_codec);
            break;
          }
          case 42: {
            attrs_.AddEntriesFrom(input, _map_attrs_codec);
            break;
          }
          case 50: {
            Device = input.ReadString();
            break;
          }
          case 56: {
            IsComponentFunction = input.ReadBool();
            break;
          }
          case 64: {
            FuncStepId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueueItem : pb::IMessage<QueueItem> {
    private static readonly pb::MessageParser<QueueItem> _parser = new pb::MessageParser<QueueItem>(() => new QueueItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueItem(QueueItem other) : this() {
      switch (other.ItemCase) {
        case ItemOneofCase.HandleToDecref:
          HandleToDecref = other.HandleToDecref.Clone();
          break;
        case ItemOneofCase.Operation:
          Operation = other.Operation.Clone();
          break;
        case ItemOneofCase.SendTensor:
          SendTensor = other.SendTensor.Clone();
          break;
        case ItemOneofCase.RegisterFunction:
          RegisterFunction = other.RegisterFunction.Clone();
          break;
        case ItemOneofCase.CleanupFunction:
          CleanupFunction = other.CleanupFunction.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueItem Clone() {
      return new QueueItem(this);
    }

    /// <summary>Field number for the "handle_to_decref" field.</summary>
    public const int HandleToDecrefFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Eager.RemoteTensorHandle HandleToDecref {
      get { return itemCase_ == ItemOneofCase.HandleToDecref ? (global::Tensorflow.Eager.RemoteTensorHandle) item_ : null; }
      set {
        item_ = value;
        itemCase_ = value == null ? ItemOneofCase.None : ItemOneofCase.HandleToDecref;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Eager.Operation Operation {
      get { return itemCase_ == ItemOneofCase.Operation ? (global::Tensorflow.Eager.Operation) item_ : null; }
      set {
        item_ = value;
        itemCase_ = value == null ? ItemOneofCase.None : ItemOneofCase.Operation;
      }
    }

    /// <summary>Field number for the "send_tensor" field.</summary>
    public const int SendTensorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Eager.SendTensorOp SendTensor {
      get { return itemCase_ == ItemOneofCase.SendTensor ? (global::Tensorflow.Eager.SendTensorOp) item_ : null; }
      set {
        item_ = value;
        itemCase_ = value == null ? ItemOneofCase.None : ItemOneofCase.SendTensor;
      }
    }

    /// <summary>Field number for the "register_function" field.</summary>
    public const int RegisterFunctionFieldNumber = 4;
    /// <summary>
    /// Takes a FunctionDef and makes it enqueable on the remote worker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Eager.RegisterFunctionOp RegisterFunction {
      get { return itemCase_ == ItemOneofCase.RegisterFunction ? (global::Tensorflow.Eager.RegisterFunctionOp) item_ : null; }
      set {
        item_ = value;
        itemCase_ = value == null ? ItemOneofCase.None : ItemOneofCase.RegisterFunction;
      }
    }

    /// <summary>Field number for the "cleanup_function" field.</summary>
    public const int CleanupFunctionFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.Eager.CleanupFunctionOp CleanupFunction {
      get { return itemCase_ == ItemOneofCase.CleanupFunction ? (global::Tensorflow.Eager.CleanupFunctionOp) item_ : null; }
      set {
        item_ = value;
        itemCase_ = value == null ? ItemOneofCase.None : ItemOneofCase.CleanupFunction;
      }
    }

    private object item_;
    /// <summary>Enum of possible cases for the "item" oneof.</summary>
    public enum ItemOneofCase {
      None = 0,
      HandleToDecref = 1,
      Operation = 2,
      SendTensor = 3,
      RegisterFunction = 4,
      CleanupFunction = 5,
    }
    private ItemOneofCase itemCase_ = ItemOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemOneofCase ItemCase {
      get { return itemCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItem() {
      itemCase_ = ItemOneofCase.None;
      item_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HandleToDecref, other.HandleToDecref)) return false;
      if (!object.Equals(Operation, other.Operation)) return false;
      if (!object.Equals(SendTensor, other.SendTensor)) return false;
      if (!object.Equals(RegisterFunction, other.RegisterFunction)) return false;
      if (!object.Equals(CleanupFunction, other.CleanupFunction)) return false;
      if (ItemCase != other.ItemCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (itemCase_ == ItemOneofCase.HandleToDecref) hash ^= HandleToDecref.GetHashCode();
      if (itemCase_ == ItemOneofCase.Operation) hash ^= Operation.GetHashCode();
      if (itemCase_ == ItemOneofCase.SendTensor) hash ^= SendTensor.GetHashCode();
      if (itemCase_ == ItemOneofCase.RegisterFunction) hash ^= RegisterFunction.GetHashCode();
      if (itemCase_ == ItemOneofCase.CleanupFunction) hash ^= CleanupFunction.GetHashCode();
      hash ^= (int) itemCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemCase_ == ItemOneofCase.HandleToDecref) {
        output.WriteRawTag(10);
        output.WriteMessage(HandleToDecref);
      }
      if (itemCase_ == ItemOneofCase.Operation) {
        output.WriteRawTag(18);
        output.WriteMessage(Operation);
      }
      if (itemCase_ == ItemOneofCase.SendTensor) {
        output.WriteRawTag(26);
        output.WriteMessage(SendTensor);
      }
      if (itemCase_ == ItemOneofCase.RegisterFunction) {
        output.WriteRawTag(34);
        output.WriteMessage(RegisterFunction);
      }
      if (itemCase_ == ItemOneofCase.CleanupFunction) {
        output.WriteRawTag(42);
        output.WriteMessage(CleanupFunction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemCase_ == ItemOneofCase.HandleToDecref) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandleToDecref);
      }
      if (itemCase_ == ItemOneofCase.Operation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
      }
      if (itemCase_ == ItemOneofCase.SendTensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendTensor);
      }
      if (itemCase_ == ItemOneofCase.RegisterFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterFunction);
      }
      if (itemCase_ == ItemOneofCase.CleanupFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CleanupFunction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueItem other) {
      if (other == null) {
        return;
      }
      switch (other.ItemCase) {
        case ItemOneofCase.HandleToDecref:
          if (HandleToDecref == null) {
            HandleToDecref = new global::Tensorflow.Eager.RemoteTensorHandle();
          }
          HandleToDecref.MergeFrom(other.HandleToDecref);
          break;
        case ItemOneofCase.Operation:
          if (Operation == null) {
            Operation = new global::Tensorflow.Eager.Operation();
          }
          Operation.MergeFrom(other.Operation);
          break;
        case ItemOneofCase.SendTensor:
          if (SendTensor == null) {
            SendTensor = new global::Tensorflow.Eager.SendTensorOp();
          }
          SendTensor.MergeFrom(other.SendTensor);
          break;
        case ItemOneofCase.RegisterFunction:
          if (RegisterFunction == null) {
            RegisterFunction = new global::Tensorflow.Eager.RegisterFunctionOp();
          }
          RegisterFunction.MergeFrom(other.RegisterFunction);
          break;
        case ItemOneofCase.CleanupFunction:
          if (CleanupFunction == null) {
            CleanupFunction = new global::Tensorflow.Eager.CleanupFunctionOp();
          }
          CleanupFunction.MergeFrom(other.CleanupFunction);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Tensorflow.Eager.RemoteTensorHandle subBuilder = new global::Tensorflow.Eager.RemoteTensorHandle();
            if (itemCase_ == ItemOneofCase.HandleToDecref) {
              subBuilder.MergeFrom(HandleToDecref);
            }
            input.ReadMessage(subBuilder);
            HandleToDecref = subBuilder;
            break;
          }
          case 18: {
            global::Tensorflow.Eager.Operation subBuilder = new global::Tensorflow.Eager.Operation();
            if (itemCase_ == ItemOneofCase.Operation) {
              subBuilder.MergeFrom(Operation);
            }
            input.ReadMessage(subBuilder);
            Operation = subBuilder;
            break;
          }
          case 26: {
            global::Tensorflow.Eager.SendTensorOp subBuilder = new global::Tensorflow.Eager.SendTensorOp();
            if (itemCase_ == ItemOneofCase.SendTensor) {
              subBuilder.MergeFrom(SendTensor);
            }
            input.ReadMessage(subBuilder);
            SendTensor = subBuilder;
            break;
          }
          case 34: {
            global::Tensorflow.Eager.RegisterFunctionOp subBuilder = new global::Tensorflow.Eager.RegisterFunctionOp();
            if (itemCase_ == ItemOneofCase.RegisterFunction) {
              subBuilder.MergeFrom(RegisterFunction);
            }
            input.ReadMessage(subBuilder);
            RegisterFunction = subBuilder;
            break;
          }
          case 42: {
            global::Tensorflow.Eager.CleanupFunctionOp subBuilder = new global::Tensorflow.Eager.CleanupFunctionOp();
            if (itemCase_ == ItemOneofCase.CleanupFunction) {
              subBuilder.MergeFrom(CleanupFunction);
            }
            input.ReadMessage(subBuilder);
            CleanupFunction = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueueResponse : pb::IMessage<QueueResponse> {
    private static readonly pb::MessageParser<QueueResponse> _parser = new pb::MessageParser<QueueResponse>(() => new QueueResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueResponse(QueueResponse other) : this() {
      shape_ = other.shape_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueResponse Clone() {
      return new QueueResponse(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.TensorShapeProto> _repeated_shape_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.TensorShapeProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.TensorShapeProto> shape_ = new pbc::RepeatedField<global::Tensorflow.TensorShapeProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.TensorShapeProto> Shape {
      get { return shape_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shape_.Equals(other.shape_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shape_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shape_.WriteTo(output, _repeated_shape_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shape_.CalculateSize(_repeated_shape_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueResponse other) {
      if (other == null) {
        return;
      }
      shape_.Add(other.shape_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateContextRequest : pb::IMessage<CreateContextRequest> {
    private static readonly pb::MessageParser<CreateContextRequest> _parser = new pb::MessageParser<CreateContextRequest>(() => new CreateContextRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateContextRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextRequest(CreateContextRequest other) : this() {
      serverDef_ = other.serverDef_ != null ? other.serverDef_.Clone() : null;
      async_ = other.async_;
      keepAliveSecs_ = other.keepAliveSecs_;
      versionDef_ = other.versionDef_ != null ? other.versionDef_.Clone() : null;
      clusterDeviceAttributes_ = other.clusterDeviceAttributes_.Clone();
      contextId_ = other.contextId_;
      contextViewId_ = other.contextViewId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextRequest Clone() {
      return new CreateContextRequest(this);
    }

    /// <summary>Field number for the "server_def" field.</summary>
    public const int ServerDefFieldNumber = 1;
    private global::Tensorflow.ServerDef serverDef_;
    /// <summary>
    /// Identifies the full cluster, and this particular worker's position within.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ServerDef ServerDef {
      get { return serverDef_; }
      set {
        serverDef_ = value;
      }
    }

    /// <summary>Field number for the "async" field.</summary>
    public const int AsyncFieldNumber = 2;
    private bool async_;
    /// <summary>
    /// Whether the ops on the worker should be executed synchronously or
    /// asynchronously. By default, ops are executed synchronously.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Async {
      get { return async_; }
      set {
        async_ = value;
      }
    }

    /// <summary>Field number for the "keep_alive_secs" field.</summary>
    public const int KeepAliveSecsFieldNumber = 3;
    private long keepAliveSecs_;
    /// <summary>
    /// Number of seconds to keep the context alive. If more than keep_alive_secs
    /// has passed since a particular context has been communicated with, it will
    /// be garbage collected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long KeepAliveSecs {
      get { return keepAliveSecs_; }
      set {
        keepAliveSecs_ = value;
      }
    }

    /// <summary>Field number for the "version_def" field.</summary>
    public const int VersionDefFieldNumber = 4;
    private global::Tensorflow.VersionDef versionDef_;
    /// <summary>
    /// This is the version for all the ops that will be enqueued by the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.VersionDef VersionDef {
      get { return versionDef_; }
      set {
        versionDef_ = value;
      }
    }

    /// <summary>Field number for the "cluster_device_attributes" field.</summary>
    public const int ClusterDeviceAttributesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_clusterDeviceAttributes_codec
        = pb::FieldCodec.ForMessage(50, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> clusterDeviceAttributes_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    /// <summary>
    /// Device attributes in the cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> ClusterDeviceAttributes {
      get { return clusterDeviceAttributes_; }
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 7;
    private ulong contextId_;
    /// <summary>
    /// The ID of the created context. This is usually a randomly generated number,
    /// that will be used to identify the context in future requests to the
    /// service. Contexts are not persisted through server restarts.
    /// This ID will be used for all future communications as well. It is essential
    /// that both ends use this ID for selecting a rendezvous to get everything to
    /// match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextId {
      get { return contextId_; }
      set {
        contextId_ = value;
      }
    }

    /// <summary>Field number for the "context_view_id" field.</summary>
    public const int ContextViewIdFieldNumber = 8;
    private ulong contextViewId_;
    /// <summary>
    /// The view ID of the context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextViewId {
      get { return contextViewId_; }
      set {
        contextViewId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateContextRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateContextRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerDef, other.ServerDef)) return false;
      if (Async != other.Async) return false;
      if (KeepAliveSecs != other.KeepAliveSecs) return false;
      if (!object.Equals(VersionDef, other.VersionDef)) return false;
      if(!clusterDeviceAttributes_.Equals(other.clusterDeviceAttributes_)) return false;
      if (ContextId != other.ContextId) return false;
      if (ContextViewId != other.ContextViewId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serverDef_ != null) hash ^= ServerDef.GetHashCode();
      if (Async != false) hash ^= Async.GetHashCode();
      if (KeepAliveSecs != 0L) hash ^= KeepAliveSecs.GetHashCode();
      if (versionDef_ != null) hash ^= VersionDef.GetHashCode();
      hash ^= clusterDeviceAttributes_.GetHashCode();
      if (ContextId != 0UL) hash ^= ContextId.GetHashCode();
      if (ContextViewId != 0UL) hash ^= ContextViewId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serverDef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerDef);
      }
      if (Async != false) {
        output.WriteRawTag(16);
        output.WriteBool(Async);
      }
      if (KeepAliveSecs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(KeepAliveSecs);
      }
      if (versionDef_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(VersionDef);
      }
      clusterDeviceAttributes_.WriteTo(output, _repeated_clusterDeviceAttributes_codec);
      if (ContextId != 0UL) {
        output.WriteRawTag(57);
        output.WriteFixed64(ContextId);
      }
      if (ContextViewId != 0UL) {
        output.WriteRawTag(65);
        output.WriteFixed64(ContextViewId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serverDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerDef);
      }
      if (Async != false) {
        size += 1 + 1;
      }
      if (KeepAliveSecs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(KeepAliveSecs);
      }
      if (versionDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VersionDef);
      }
      size += clusterDeviceAttributes_.CalculateSize(_repeated_clusterDeviceAttributes_codec);
      if (ContextId != 0UL) {
        size += 1 + 8;
      }
      if (ContextViewId != 0UL) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateContextRequest other) {
      if (other == null) {
        return;
      }
      if (other.serverDef_ != null) {
        if (serverDef_ == null) {
          ServerDef = new global::Tensorflow.ServerDef();
        }
        ServerDef.MergeFrom(other.ServerDef);
      }
      if (other.Async != false) {
        Async = other.Async;
      }
      if (other.KeepAliveSecs != 0L) {
        KeepAliveSecs = other.KeepAliveSecs;
      }
      if (other.versionDef_ != null) {
        if (versionDef_ == null) {
          VersionDef = new global::Tensorflow.VersionDef();
        }
        VersionDef.MergeFrom(other.VersionDef);
      }
      clusterDeviceAttributes_.Add(other.clusterDeviceAttributes_);
      if (other.ContextId != 0UL) {
        ContextId = other.ContextId;
      }
      if (other.ContextViewId != 0UL) {
        ContextViewId = other.ContextViewId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (serverDef_ == null) {
              ServerDef = new global::Tensorflow.ServerDef();
            }
            input.ReadMessage(ServerDef);
            break;
          }
          case 16: {
            Async = input.ReadBool();
            break;
          }
          case 24: {
            KeepAliveSecs = input.ReadInt64();
            break;
          }
          case 34: {
            if (versionDef_ == null) {
              VersionDef = new global::Tensorflow.VersionDef();
            }
            input.ReadMessage(VersionDef);
            break;
          }
          case 50: {
            clusterDeviceAttributes_.AddEntriesFrom(input, _repeated_clusterDeviceAttributes_codec);
            break;
          }
          case 57: {
            ContextId = input.ReadFixed64();
            break;
          }
          case 65: {
            ContextViewId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateContextResponse : pb::IMessage<CreateContextResponse> {
    private static readonly pb::MessageParser<CreateContextResponse> _parser = new pb::MessageParser<CreateContextResponse>(() => new CreateContextResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateContextResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextResponse(CreateContextResponse other) : this() {
      deviceAttributes_ = other.deviceAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateContextResponse Clone() {
      return new CreateContextResponse(this);
    }

    /// <summary>Field number for the "device_attributes" field.</summary>
    public const int DeviceAttributesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_deviceAttributes_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> deviceAttributes_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    /// <summary>
    /// List of devices that are locally accessible to the worker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> DeviceAttributes {
      get { return deviceAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateContextResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateContextResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceAttributes_.Equals(other.deviceAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceAttributes_.WriteTo(output, _repeated_deviceAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceAttributes_.CalculateSize(_repeated_deviceAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateContextResponse other) {
      if (other == null) {
        return;
      }
      deviceAttributes_.Add(other.deviceAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            deviceAttributes_.AddEntriesFrom(input, _repeated_deviceAttributes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateContextRequest : pb::IMessage<UpdateContextRequest> {
    private static readonly pb::MessageParser<UpdateContextRequest> _parser = new pb::MessageParser<UpdateContextRequest>(() => new UpdateContextRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateContextRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateContextRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateContextRequest(UpdateContextRequest other) : this() {
      serverDef_ = other.serverDef_ != null ? other.serverDef_.Clone() : null;
      clusterDeviceAttributes_ = other.clusterDeviceAttributes_.Clone();
      contextId_ = other.contextId_;
      contextViewId_ = other.contextViewId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateContextRequest Clone() {
      return new UpdateContextRequest(this);
    }

    /// <summary>Field number for the "server_def" field.</summary>
    public const int ServerDefFieldNumber = 1;
    private global::Tensorflow.ServerDef serverDef_;
    /// <summary>
    /// Identifies the full cluster, and this particular worker's position within.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ServerDef ServerDef {
      get { return serverDef_; }
      set {
        serverDef_ = value;
      }
    }

    /// <summary>Field number for the "cluster_device_attributes" field.</summary>
    public const int ClusterDeviceAttributesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_clusterDeviceAttributes_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> clusterDeviceAttributes_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    /// <summary>
    /// Device attributes in the cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> ClusterDeviceAttributes {
      get { return clusterDeviceAttributes_; }
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 3;
    private ulong contextId_;
    /// <summary>
    /// The ID of the context to be updated. A context with the specified ID must
    /// already exist on the recepient server of this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextId {
      get { return contextId_; }
      set {
        contextId_ = value;
      }
    }

    /// <summary>Field number for the "context_view_id" field.</summary>
    public const int ContextViewIdFieldNumber = 4;
    private ulong contextViewId_;
    /// <summary>
    /// The view ID of the context, which should be contiguously incremented when
    /// updating the same context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextViewId {
      get { return contextViewId_; }
      set {
        contextViewId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateContextRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateContextRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerDef, other.ServerDef)) return false;
      if(!clusterDeviceAttributes_.Equals(other.clusterDeviceAttributes_)) return false;
      if (ContextId != other.ContextId) return false;
      if (ContextViewId != other.ContextViewId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serverDef_ != null) hash ^= ServerDef.GetHashCode();
      hash ^= clusterDeviceAttributes_.GetHashCode();
      if (ContextId != 0UL) hash ^= ContextId.GetHashCode();
      if (ContextViewId != 0UL) hash ^= ContextViewId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serverDef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerDef);
      }
      clusterDeviceAttributes_.WriteTo(output, _repeated_clusterDeviceAttributes_codec);
      if (ContextId != 0UL) {
        output.WriteRawTag(25);
        output.WriteFixed64(ContextId);
      }
      if (ContextViewId != 0UL) {
        output.WriteRawTag(33);
        output.WriteFixed64(ContextViewId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serverDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerDef);
      }
      size += clusterDeviceAttributes_.CalculateSize(_repeated_clusterDeviceAttributes_codec);
      if (ContextId != 0UL) {
        size += 1 + 8;
      }
      if (ContextViewId != 0UL) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateContextRequest other) {
      if (other == null) {
        return;
      }
      if (other.serverDef_ != null) {
        if (serverDef_ == null) {
          ServerDef = new global::Tensorflow.ServerDef();
        }
        ServerDef.MergeFrom(other.ServerDef);
      }
      clusterDeviceAttributes_.Add(other.clusterDeviceAttributes_);
      if (other.ContextId != 0UL) {
        ContextId = other.ContextId;
      }
      if (other.ContextViewId != 0UL) {
        ContextViewId = other.ContextViewId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (serverDef_ == null) {
              ServerDef = new global::Tensorflow.ServerDef();
            }
            input.ReadMessage(ServerDef);
            break;
          }
          case 18: {
            clusterDeviceAttributes_.AddEntriesFrom(input, _repeated_clusterDeviceAttributes_codec);
            break;
          }
          case 25: {
            ContextId = input.ReadFixed64();
            break;
          }
          case 33: {
            ContextViewId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateContextResponse : pb::IMessage<UpdateContextResponse> {
    private static readonly pb::MessageParser<UpdateContextResponse> _parser = new pb::MessageParser<UpdateContextResponse>(() => new UpdateContextResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateContextResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateContextResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateContextResponse(UpdateContextResponse other) : this() {
      deviceAttributes_ = other.deviceAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateContextResponse Clone() {
      return new UpdateContextResponse(this);
    }

    /// <summary>Field number for the "device_attributes" field.</summary>
    public const int DeviceAttributesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_deviceAttributes_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> deviceAttributes_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    /// <summary>
    /// List of devices that are locally accessible to the worker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> DeviceAttributes {
      get { return deviceAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateContextResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateContextResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceAttributes_.Equals(other.deviceAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceAttributes_.WriteTo(output, _repeated_deviceAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceAttributes_.CalculateSize(_repeated_deviceAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateContextResponse other) {
      if (other == null) {
        return;
      }
      deviceAttributes_.Add(other.deviceAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceAttributes_.AddEntriesFrom(input, _repeated_deviceAttributes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnqueueRequest : pb::IMessage<EnqueueRequest> {
    private static readonly pb::MessageParser<EnqueueRequest> _parser = new pb::MessageParser<EnqueueRequest>(() => new EnqueueRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnqueueRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueRequest(EnqueueRequest other) : this() {
      contextId_ = other.contextId_;
      queue_ = other.queue_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueRequest Clone() {
      return new EnqueueRequest(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private ulong contextId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextId {
      get { return contextId_; }
      set {
        contextId_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tensorflow.Eager.QueueItem> _repeated_queue_codec
        = pb::FieldCodec.ForMessage(26, global::Tensorflow.Eager.QueueItem.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Eager.QueueItem> queue_ = new pbc::RepeatedField<global::Tensorflow.Eager.QueueItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Eager.QueueItem> Queue {
      get { return queue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnqueueRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnqueueRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      if(!queue_.Equals(other.queue_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId != 0UL) hash ^= ContextId.GetHashCode();
      hash ^= queue_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(ContextId);
      }
      queue_.WriteTo(output, _repeated_queue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId != 0UL) {
        size += 1 + 8;
      }
      size += queue_.CalculateSize(_repeated_queue_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnqueueRequest other) {
      if (other == null) {
        return;
      }
      if (other.ContextId != 0UL) {
        ContextId = other.ContextId;
      }
      queue_.Add(other.queue_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ContextId = input.ReadFixed64();
            break;
          }
          case 26: {
            queue_.AddEntriesFrom(input, _repeated_queue_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnqueueResponse : pb::IMessage<EnqueueResponse> {
    private static readonly pb::MessageParser<EnqueueResponse> _parser = new pb::MessageParser<EnqueueResponse>(() => new EnqueueResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnqueueResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueResponse(EnqueueResponse other) : this() {
      queueResponse_ = other.queueResponse_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueResponse Clone() {
      return new EnqueueResponse(this);
    }

    /// <summary>Field number for the "queue_response" field.</summary>
    public const int QueueResponseFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.Eager.QueueResponse> _repeated_queueResponse_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.Eager.QueueResponse.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.Eager.QueueResponse> queueResponse_ = new pbc::RepeatedField<global::Tensorflow.Eager.QueueResponse>();
    /// <summary>
    /// A single operation response for every item in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.Eager.QueueResponse> QueueResponse {
      get { return queueResponse_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnqueueResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnqueueResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!queueResponse_.Equals(other.queueResponse_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= queueResponse_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      queueResponse_.WriteTo(output, _repeated_queueResponse_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += queueResponse_.CalculateSize(_repeated_queueResponse_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnqueueResponse other) {
      if (other == null) {
        return;
      }
      queueResponse_.Add(other.queueResponse_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            queueResponse_.AddEntriesFrom(input, _repeated_queueResponse_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WaitQueueDoneRequest : pb::IMessage<WaitQueueDoneRequest> {
    private static readonly pb::MessageParser<WaitQueueDoneRequest> _parser = new pb::MessageParser<WaitQueueDoneRequest>(() => new WaitQueueDoneRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaitQueueDoneRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitQueueDoneRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitQueueDoneRequest(WaitQueueDoneRequest other) : this() {
      contextId_ = other.contextId_;
      opId_ = other.opId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitQueueDoneRequest Clone() {
      return new WaitQueueDoneRequest(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private ulong contextId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextId {
      get { return contextId_; }
      set {
        contextId_ = value;
      }
    }

    /// <summary>Field number for the "op_id" field.</summary>
    public const int OpIdFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_opId_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> opId_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Ids to wait on. If empty, wait on everything currently pending.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> OpId {
      get { return opId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WaitQueueDoneRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WaitQueueDoneRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      if(!opId_.Equals(other.opId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId != 0UL) hash ^= ContextId.GetHashCode();
      hash ^= opId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(ContextId);
      }
      opId_.WriteTo(output, _repeated_opId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId != 0UL) {
        size += 1 + 8;
      }
      size += opId_.CalculateSize(_repeated_opId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WaitQueueDoneRequest other) {
      if (other == null) {
        return;
      }
      if (other.ContextId != 0UL) {
        ContextId = other.ContextId;
      }
      opId_.Add(other.opId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ContextId = input.ReadFixed64();
            break;
          }
          case 18:
          case 16: {
            opId_.AddEntriesFrom(input, _repeated_opId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO(nareshmodi): Consider adding NodeExecStats here to be able to
  /// propagate some stats.
  /// </summary>
  public sealed partial class WaitQueueDoneResponse : pb::IMessage<WaitQueueDoneResponse> {
    private static readonly pb::MessageParser<WaitQueueDoneResponse> _parser = new pb::MessageParser<WaitQueueDoneResponse>(() => new WaitQueueDoneResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaitQueueDoneResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitQueueDoneResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitQueueDoneResponse(WaitQueueDoneResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitQueueDoneResponse Clone() {
      return new WaitQueueDoneResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WaitQueueDoneResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WaitQueueDoneResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WaitQueueDoneResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class KeepAliveRequest : pb::IMessage<KeepAliveRequest> {
    private static readonly pb::MessageParser<KeepAliveRequest> _parser = new pb::MessageParser<KeepAliveRequest>(() => new KeepAliveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAliveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest(KeepAliveRequest other) : this() {
      contextId_ = other.contextId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest Clone() {
      return new KeepAliveRequest(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private ulong contextId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextId {
      get { return contextId_; }
      set {
        contextId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAliveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAliveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId != 0UL) hash ^= ContextId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(ContextId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId != 0UL) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAliveRequest other) {
      if (other == null) {
        return;
      }
      if (other.ContextId != 0UL) {
        ContextId = other.ContextId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ContextId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeepAliveResponse : pb::IMessage<KeepAliveResponse> {
    private static readonly pb::MessageParser<KeepAliveResponse> _parser = new pb::MessageParser<KeepAliveResponse>(() => new KeepAliveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAliveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveResponse(KeepAliveResponse other) : this() {
      contextViewId_ = other.contextViewId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveResponse Clone() {
      return new KeepAliveResponse(this);
    }

    /// <summary>Field number for the "context_view_id" field.</summary>
    public const int ContextViewIdFieldNumber = 1;
    private ulong contextViewId_;
    /// <summary>
    /// If the requested context_id is on the remote host, set the context view ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextViewId {
      get { return contextViewId_; }
      set {
        contextViewId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAliveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAliveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextViewId != other.ContextViewId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextViewId != 0UL) hash ^= ContextViewId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextViewId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(ContextViewId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextViewId != 0UL) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAliveResponse other) {
      if (other == null) {
        return;
      }
      if (other.ContextViewId != 0UL) {
        ContextViewId = other.ContextViewId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ContextViewId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseContextRequest : pb::IMessage<CloseContextRequest> {
    private static readonly pb::MessageParser<CloseContextRequest> _parser = new pb::MessageParser<CloseContextRequest>(() => new CloseContextRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseContextRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContextRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContextRequest(CloseContextRequest other) : this() {
      contextId_ = other.contextId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContextRequest Clone() {
      return new CloseContextRequest(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private ulong contextId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContextId {
      get { return contextId_; }
      set {
        contextId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseContextRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseContextRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId != 0UL) hash ^= ContextId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(ContextId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId != 0UL) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseContextRequest other) {
      if (other == null) {
        return;
      }
      if (other.ContextId != 0UL) {
        ContextId = other.ContextId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ContextId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseContextResponse : pb::IMessage<CloseContextResponse> {
    private static readonly pb::MessageParser<CloseContextResponse> _parser = new pb::MessageParser<CloseContextResponse>(() => new CloseContextResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseContextResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContextResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContextResponse(CloseContextResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseContextResponse Clone() {
      return new CloseContextResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseContextResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseContextResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseContextResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RegisterFunctionOp : pb::IMessage<RegisterFunctionOp> {
    private static readonly pb::MessageParser<RegisterFunctionOp> _parser = new pb::MessageParser<RegisterFunctionOp>(() => new RegisterFunctionOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterFunctionOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterFunctionOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterFunctionOp(RegisterFunctionOp other) : this() {
      functionDef_ = other.functionDef_ != null ? other.functionDef_.Clone() : null;
      isComponentFunction_ = other.isComponentFunction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterFunctionOp Clone() {
      return new RegisterFunctionOp(this);
    }

    /// <summary>Field number for the "function_def" field.</summary>
    public const int FunctionDefFieldNumber = 1;
    private global::Tensorflow.FunctionDef functionDef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.FunctionDef FunctionDef {
      get { return functionDef_; }
      set {
        functionDef_ = value;
      }
    }

    /// <summary>Field number for the "is_component_function" field.</summary>
    public const int IsComponentFunctionFieldNumber = 2;
    private bool isComponentFunction_;
    /// <summary>
    /// If true, it means that function_def is produced by graph partition during
    /// multi-device function instantiation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComponentFunction {
      get { return isComponentFunction_; }
      set {
        isComponentFunction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterFunctionOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterFunctionOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FunctionDef, other.FunctionDef)) return false;
      if (IsComponentFunction != other.IsComponentFunction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (functionDef_ != null) hash ^= FunctionDef.GetHashCode();
      if (IsComponentFunction != false) hash ^= IsComponentFunction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (functionDef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FunctionDef);
      }
      if (IsComponentFunction != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsComponentFunction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (functionDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionDef);
      }
      if (IsComponentFunction != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterFunctionOp other) {
      if (other == null) {
        return;
      }
      if (other.functionDef_ != null) {
        if (functionDef_ == null) {
          FunctionDef = new global::Tensorflow.FunctionDef();
        }
        FunctionDef.MergeFrom(other.FunctionDef);
      }
      if (other.IsComponentFunction != false) {
        IsComponentFunction = other.IsComponentFunction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (functionDef_ == null) {
              FunctionDef = new global::Tensorflow.FunctionDef();
            }
            input.ReadMessage(FunctionDef);
            break;
          }
          case 16: {
            IsComponentFunction = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cleanup the step state of a multi-device function (e.g. tensors buffered by
  /// a `Send` op but not picked up by its corresponding `Recv` op).
  /// </summary>
  public sealed partial class CleanupFunctionOp : pb::IMessage<CleanupFunctionOp> {
    private static readonly pb::MessageParser<CleanupFunctionOp> _parser = new pb::MessageParser<CleanupFunctionOp>(() => new CleanupFunctionOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupFunctionOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupFunctionOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupFunctionOp(CleanupFunctionOp other) : this() {
      stepId_ = other.stepId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupFunctionOp Clone() {
      return new CleanupFunctionOp(this);
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 1;
    private long stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupFunctionOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupFunctionOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepId != other.StepId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupFunctionOp other) {
      if (other == null) {
        return;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StepId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendTensorOp : pb::IMessage<SendTensorOp> {
    private static readonly pb::MessageParser<SendTensorOp> _parser = new pb::MessageParser<SendTensorOp>(() => new SendTensorOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTensorOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.Eager.EagerServiceReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTensorOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTensorOp(SendTensorOp other) : this() {
      opId_ = other.opId_;
      tensors_ = other.tensors_.Clone();
      deviceName_ = other.deviceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTensorOp Clone() {
      return new SendTensorOp(this);
    }

    /// <summary>Field number for the "op_id" field.</summary>
    public const int OpIdFieldNumber = 1;
    private long opId_;
    /// <summary>
    /// All remote tensors are identified by &lt;Op ID, Output num>. To mimic this
    /// situation when directly sending tensors, we include an "artificial" op ID
    /// (which would have corresponded to the _Recv op when not using SendTensor).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpId {
      get { return opId_; }
      set {
        opId_ = value;
      }
    }

    /// <summary>Field number for the "tensors" field.</summary>
    public const int TensorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.TensorProto> _repeated_tensors_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.TensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.TensorProto> tensors_ = new pbc::RepeatedField<global::Tensorflow.TensorProto>();
    /// <summary>
    /// The index within the repeated field is the output number that will help
    /// uniquely identify (along with the above op_id) the particular tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.TensorProto> Tensors {
      get { return tensors_; }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 3;
    private string deviceName_ = "";
    /// <summary>
    /// The device on which the tensors should be resident.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTensorOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTensorOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpId != other.OpId) return false;
      if(!tensors_.Equals(other.tensors_)) return false;
      if (DeviceName != other.DeviceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpId != 0L) hash ^= OpId.GetHashCode();
      hash ^= tensors_.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OpId);
      }
      tensors_.WriteTo(output, _repeated_tensors_codec);
      if (DeviceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpId);
      }
      size += tensors_.CalculateSize(_repeated_tensors_codec);
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTensorOp other) {
      if (other == null) {
        return;
      }
      if (other.OpId != 0L) {
        OpId = other.OpId;
      }
      tensors_.Add(other.tensors_);
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpId = input.ReadInt64();
            break;
          }
          case 18: {
            tensors_.AddEntriesFrom(input, _repeated_tensors_codec);
            break;
          }
          case 26: {
            DeviceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
