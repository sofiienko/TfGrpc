// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tensorflow/core/protobuf/replay_log.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/replay_log.proto</summary>
  public static partial class ReplayLogReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/replay_log.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReplayLogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cil0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvcmVwbGF5X2xvZy5wcm90bxIK",
            "dGVuc29yZmxvdxoldGVuc29yZmxvdy9jb3JlL3Byb3RvYnVmL21hc3Rlci5w",
            "cm90byJcChBOZXdSZXBsYXlTZXNzaW9uEjAKB2RldmljZXMYASABKAsyHy50",
            "ZW5zb3JmbG93Lkxpc3REZXZpY2VzUmVzcG9uc2USFgoOc2Vzc2lvbl9oYW5k",
            "bGUYAiABKAki6AoKCFJlcGxheU9wEhUKDXN0YXJ0X3RpbWVfdXMYHyABKAES",
            "EwoLZW5kX3RpbWVfdXMYICABKAESOgoOY3JlYXRlX3Nlc3Npb24YASABKAsy",
            "IC50ZW5zb3JmbG93LkNyZWF0ZVNlc3Npb25SZXF1ZXN0SAASOgoOZXh0ZW5k",
            "X3Nlc3Npb24YAiABKAsyIC50ZW5zb3JmbG93LkV4dGVuZFNlc3Npb25SZXF1",
            "ZXN0SAASPwoRcGFydGlhbF9ydW5fc2V0dXAYAyABKAsyIi50ZW5zb3JmbG93",
            "LlBhcnRpYWxSdW5TZXR1cFJlcXVlc3RIABIuCghydW5fc3RlcBgEIAEoCzIa",
            "LnRlbnNvcmZsb3cuUnVuU3RlcFJlcXVlc3RIABI4Cg1jbG9zZV9zZXNzaW9u",
            "GAUgASgLMh8udGVuc29yZmxvdy5DbG9zZVNlc3Npb25SZXF1ZXN0SAASNgoM",
            "bGlzdF9kZXZpY2VzGAYgASgLMh4udGVuc29yZmxvdy5MaXN0RGV2aWNlc1Jl",
            "cXVlc3RIABIxCg1yZXNldF9yZXF1ZXN0GAcgASgLMhgudGVuc29yZmxvdy5S",
            "ZXNldFJlcXVlc3RIABI4Cg1tYWtlX2NhbGxhYmxlGAggASgLMh8udGVuc29y",
            "Zmxvdy5NYWtlQ2FsbGFibGVSZXF1ZXN0SAASNgoMcnVuX2NhbGxhYmxlGAkg",
            "ASgLMh4udGVuc29yZmxvdy5SdW5DYWxsYWJsZVJlcXVlc3RIABI+ChByZWxl",
            "YXNlX2NhbGxhYmxlGAogASgLMiIudGVuc29yZmxvdy5SZWxlYXNlQ2FsbGFi",
            "bGVSZXF1ZXN0SAASOgoSbmV3X3JlcGxheV9zZXNzaW9uGAsgASgLMhwudGVu",
            "c29yZmxvdy5OZXdSZXBsYXlTZXNzaW9uSAASRAoXY3JlYXRlX3Nlc3Npb25f",
            "cmVzcG9uc2UYFSABKAsyIS50ZW5zb3JmbG93LkNyZWF0ZVNlc3Npb25SZXNw",
            "b25zZUgBEkQKF2V4dGVuZF9zZXNzaW9uX3Jlc3BvbnNlGBYgASgLMiEudGVu",
            "c29yZmxvdy5FeHRlbmRTZXNzaW9uUmVzcG9uc2VIARJJChpwYXJ0aWFsX3J1",
            "bl9zZXR1cF9yZXNwb25zZRgXIAEoCzIjLnRlbnNvcmZsb3cuUGFydGlhbFJ1",
            "blNldHVwUmVzcG9uc2VIARI4ChFydW5fc3RlcF9yZXNwb25zZRgYIAEoCzIb",
            "LnRlbnNvcmZsb3cuUnVuU3RlcFJlc3BvbnNlSAESQgoWY2xvc2Vfc2Vzc2lv",
            "bl9yZXNwb25zZRgZIAEoCzIgLnRlbnNvcmZsb3cuQ2xvc2VTZXNzaW9uUmVz",
            "cG9uc2VIARJAChVsaXN0X2RldmljZXNfcmVzcG9uc2UYGiABKAsyHy50ZW5z",
            "b3JmbG93Lkxpc3REZXZpY2VzUmVzcG9uc2VIARI7ChZyZXNldF9yZXF1ZXN0",
            "X3Jlc3BvbnNlGBsgASgLMhkudGVuc29yZmxvdy5SZXNldFJlc3BvbnNlSAES",
            "QgoWbWFrZV9jYWxsYWJsZV9yZXNwb25zZRgcIAEoCzIgLnRlbnNvcmZsb3cu",
            "TWFrZUNhbGxhYmxlUmVzcG9uc2VIARJAChVydW5fY2FsbGFibGVfcmVzcG9u",
            "c2UYHSABKAsyHy50ZW5zb3JmbG93LlJ1bkNhbGxhYmxlUmVzcG9uc2VIARJI",
            "ChlyZWxlYXNlX2NhbGxhYmxlX3Jlc3BvbnNlGB4gASgLMiMudGVuc29yZmxv",
            "dy5SZWxlYXNlQ2FsbGFibGVSZXNwb25zZUgBQgQKAm9wQgoKCHJlc3BvbnNl",
            "QgP4AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.MasterReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.NewReplaySession), global::Tensorflow.NewReplaySession.Parser, new[]{ "Devices", "SessionHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ReplayOp), global::Tensorflow.ReplayOp.Parser, new[]{ "StartTimeUs", "EndTimeUs", "CreateSession", "ExtendSession", "PartialRunSetup", "RunStep", "CloseSession", "ListDevices", "ResetRequest", "MakeCallable", "RunCallable", "ReleaseCallable", "NewReplaySession", "CreateSessionResponse", "ExtendSessionResponse", "PartialRunSetupResponse", "RunStepResponse", "CloseSessionResponse", "ListDevicesResponse", "ResetRequestResponse", "MakeCallableResponse", "RunCallableResponse", "ReleaseCallableResponse" }, new[]{ "Op", "Response" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Records the creation of a new replay session.  We record the device listing
  /// here to capture the state of the cluster.
  /// </summary>
  public sealed partial class NewReplaySession : pb::IMessage<NewReplaySession> {
    private static readonly pb::MessageParser<NewReplaySession> _parser = new pb::MessageParser<NewReplaySession>(() => new NewReplaySession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewReplaySession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.ReplayLogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewReplaySession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewReplaySession(NewReplaySession other) : this() {
      devices_ = other.devices_ != null ? other.devices_.Clone() : null;
      sessionHandle_ = other.sessionHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewReplaySession Clone() {
      return new NewReplaySession(this);
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 1;
    private global::Tensorflow.ListDevicesResponse devices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ListDevicesResponse Devices {
      get { return devices_; }
      set {
        devices_ = value;
      }
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 2;
    private string sessionHandle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewReplaySession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewReplaySession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Devices, other.Devices)) return false;
      if (SessionHandle != other.SessionHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (devices_ != null) hash ^= Devices.GetHashCode();
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (devices_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Devices);
      }
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (devices_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Devices);
      }
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewReplaySession other) {
      if (other == null) {
        return;
      }
      if (other.devices_ != null) {
        if (devices_ == null) {
          Devices = new global::Tensorflow.ListDevicesResponse();
        }
        Devices.MergeFrom(other.Devices);
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (devices_ == null) {
              Devices = new global::Tensorflow.ListDevicesResponse();
            }
            input.ReadMessage(Devices);
            break;
          }
          case 18: {
            SessionHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplayOp : pb::IMessage<ReplayOp> {
    private static readonly pb::MessageParser<ReplayOp> _parser = new pb::MessageParser<ReplayOp>(() => new ReplayOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplayOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.ReplayLogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayOp(ReplayOp other) : this() {
      startTimeUs_ = other.startTimeUs_;
      endTimeUs_ = other.endTimeUs_;
      switch (other.OpCase) {
        case OpOneofCase.CreateSession:
          CreateSession = other.CreateSession.Clone();
          break;
        case OpOneofCase.ExtendSession:
          ExtendSession = other.ExtendSession.Clone();
          break;
        case OpOneofCase.PartialRunSetup:
          PartialRunSetup = other.PartialRunSetup.Clone();
          break;
        case OpOneofCase.RunStep:
          RunStep = other.RunStep.Clone();
          break;
        case OpOneofCase.CloseSession:
          CloseSession = other.CloseSession.Clone();
          break;
        case OpOneofCase.ListDevices:
          ListDevices = other.ListDevices.Clone();
          break;
        case OpOneofCase.ResetRequest:
          ResetRequest = other.ResetRequest.Clone();
          break;
        case OpOneofCase.MakeCallable:
          MakeCallable = other.MakeCallable.Clone();
          break;
        case OpOneofCase.RunCallable:
          RunCallable = other.RunCallable.Clone();
          break;
        case OpOneofCase.ReleaseCallable:
          ReleaseCallable = other.ReleaseCallable.Clone();
          break;
        case OpOneofCase.NewReplaySession:
          NewReplaySession = other.NewReplaySession.Clone();
          break;
      }

      switch (other.ResponseCase) {
        case ResponseOneofCase.CreateSessionResponse:
          CreateSessionResponse = other.CreateSessionResponse.Clone();
          break;
        case ResponseOneofCase.ExtendSessionResponse:
          ExtendSessionResponse = other.ExtendSessionResponse.Clone();
          break;
        case ResponseOneofCase.PartialRunSetupResponse:
          PartialRunSetupResponse = other.PartialRunSetupResponse.Clone();
          break;
        case ResponseOneofCase.RunStepResponse:
          RunStepResponse = other.RunStepResponse.Clone();
          break;
        case ResponseOneofCase.CloseSessionResponse:
          CloseSessionResponse = other.CloseSessionResponse.Clone();
          break;
        case ResponseOneofCase.ListDevicesResponse:
          ListDevicesResponse = other.ListDevicesResponse.Clone();
          break;
        case ResponseOneofCase.ResetRequestResponse:
          ResetRequestResponse = other.ResetRequestResponse.Clone();
          break;
        case ResponseOneofCase.MakeCallableResponse:
          MakeCallableResponse = other.MakeCallableResponse.Clone();
          break;
        case ResponseOneofCase.RunCallableResponse:
          RunCallableResponse = other.RunCallableResponse.Clone();
          break;
        case ResponseOneofCase.ReleaseCallableResponse:
          ReleaseCallableResponse = other.ReleaseCallableResponse.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayOp Clone() {
      return new ReplayOp(this);
    }

    /// <summary>Field number for the "start_time_us" field.</summary>
    public const int StartTimeUsFieldNumber = 31;
    private double startTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartTimeUs {
      get { return startTimeUs_; }
      set {
        startTimeUs_ = value;
      }
    }

    /// <summary>Field number for the "end_time_us" field.</summary>
    public const int EndTimeUsFieldNumber = 32;
    private double endTimeUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EndTimeUs {
      get { return endTimeUs_; }
      set {
        endTimeUs_ = value;
      }
    }

    /// <summary>Field number for the "create_session" field.</summary>
    public const int CreateSessionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CreateSessionRequest CreateSession {
      get { return opCase_ == OpOneofCase.CreateSession ? (global::Tensorflow.CreateSessionRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.CreateSession;
      }
    }

    /// <summary>Field number for the "extend_session" field.</summary>
    public const int ExtendSessionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ExtendSessionRequest ExtendSession {
      get { return opCase_ == OpOneofCase.ExtendSession ? (global::Tensorflow.ExtendSessionRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.ExtendSession;
      }
    }

    /// <summary>Field number for the "partial_run_setup" field.</summary>
    public const int PartialRunSetupFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.PartialRunSetupRequest PartialRunSetup {
      get { return opCase_ == OpOneofCase.PartialRunSetup ? (global::Tensorflow.PartialRunSetupRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.PartialRunSetup;
      }
    }

    /// <summary>Field number for the "run_step" field.</summary>
    public const int RunStepFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.RunStepRequest RunStep {
      get { return opCase_ == OpOneofCase.RunStep ? (global::Tensorflow.RunStepRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.RunStep;
      }
    }

    /// <summary>Field number for the "close_session" field.</summary>
    public const int CloseSessionFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CloseSessionRequest CloseSession {
      get { return opCase_ == OpOneofCase.CloseSession ? (global::Tensorflow.CloseSessionRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.CloseSession;
      }
    }

    /// <summary>Field number for the "list_devices" field.</summary>
    public const int ListDevicesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ListDevicesRequest ListDevices {
      get { return opCase_ == OpOneofCase.ListDevices ? (global::Tensorflow.ListDevicesRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.ListDevices;
      }
    }

    /// <summary>Field number for the "reset_request" field.</summary>
    public const int ResetRequestFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ResetRequest ResetRequest {
      get { return opCase_ == OpOneofCase.ResetRequest ? (global::Tensorflow.ResetRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.ResetRequest;
      }
    }

    /// <summary>Field number for the "make_callable" field.</summary>
    public const int MakeCallableFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.MakeCallableRequest MakeCallable {
      get { return opCase_ == OpOneofCase.MakeCallable ? (global::Tensorflow.MakeCallableRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.MakeCallable;
      }
    }

    /// <summary>Field number for the "run_callable" field.</summary>
    public const int RunCallableFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.RunCallableRequest RunCallable {
      get { return opCase_ == OpOneofCase.RunCallable ? (global::Tensorflow.RunCallableRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.RunCallable;
      }
    }

    /// <summary>Field number for the "release_callable" field.</summary>
    public const int ReleaseCallableFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ReleaseCallableRequest ReleaseCallable {
      get { return opCase_ == OpOneofCase.ReleaseCallable ? (global::Tensorflow.ReleaseCallableRequest) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.ReleaseCallable;
      }
    }

    /// <summary>Field number for the "new_replay_session" field.</summary>
    public const int NewReplaySessionFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.NewReplaySession NewReplaySession {
      get { return opCase_ == OpOneofCase.NewReplaySession ? (global::Tensorflow.NewReplaySession) op_ : null; }
      set {
        op_ = value;
        opCase_ = value == null ? OpOneofCase.None : OpOneofCase.NewReplaySession;
      }
    }

    /// <summary>Field number for the "create_session_response" field.</summary>
    public const int CreateSessionResponseFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CreateSessionResponse CreateSessionResponse {
      get { return responseCase_ == ResponseOneofCase.CreateSessionResponse ? (global::Tensorflow.CreateSessionResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.CreateSessionResponse;
      }
    }

    /// <summary>Field number for the "extend_session_response" field.</summary>
    public const int ExtendSessionResponseFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ExtendSessionResponse ExtendSessionResponse {
      get { return responseCase_ == ResponseOneofCase.ExtendSessionResponse ? (global::Tensorflow.ExtendSessionResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ExtendSessionResponse;
      }
    }

    /// <summary>Field number for the "partial_run_setup_response" field.</summary>
    public const int PartialRunSetupResponseFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.PartialRunSetupResponse PartialRunSetupResponse {
      get { return responseCase_ == ResponseOneofCase.PartialRunSetupResponse ? (global::Tensorflow.PartialRunSetupResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.PartialRunSetupResponse;
      }
    }

    /// <summary>Field number for the "run_step_response" field.</summary>
    public const int RunStepResponseFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.RunStepResponse RunStepResponse {
      get { return responseCase_ == ResponseOneofCase.RunStepResponse ? (global::Tensorflow.RunStepResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.RunStepResponse;
      }
    }

    /// <summary>Field number for the "close_session_response" field.</summary>
    public const int CloseSessionResponseFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CloseSessionResponse CloseSessionResponse {
      get { return responseCase_ == ResponseOneofCase.CloseSessionResponse ? (global::Tensorflow.CloseSessionResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.CloseSessionResponse;
      }
    }

    /// <summary>Field number for the "list_devices_response" field.</summary>
    public const int ListDevicesResponseFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ListDevicesResponse ListDevicesResponse {
      get { return responseCase_ == ResponseOneofCase.ListDevicesResponse ? (global::Tensorflow.ListDevicesResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ListDevicesResponse;
      }
    }

    /// <summary>Field number for the "reset_request_response" field.</summary>
    public const int ResetRequestResponseFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ResetResponse ResetRequestResponse {
      get { return responseCase_ == ResponseOneofCase.ResetRequestResponse ? (global::Tensorflow.ResetResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ResetRequestResponse;
      }
    }

    /// <summary>Field number for the "make_callable_response" field.</summary>
    public const int MakeCallableResponseFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.MakeCallableResponse MakeCallableResponse {
      get { return responseCase_ == ResponseOneofCase.MakeCallableResponse ? (global::Tensorflow.MakeCallableResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.MakeCallableResponse;
      }
    }

    /// <summary>Field number for the "run_callable_response" field.</summary>
    public const int RunCallableResponseFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.RunCallableResponse RunCallableResponse {
      get { return responseCase_ == ResponseOneofCase.RunCallableResponse ? (global::Tensorflow.RunCallableResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.RunCallableResponse;
      }
    }

    /// <summary>Field number for the "release_callable_response" field.</summary>
    public const int ReleaseCallableResponseFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ReleaseCallableResponse ReleaseCallableResponse {
      get { return responseCase_ == ResponseOneofCase.ReleaseCallableResponse ? (global::Tensorflow.ReleaseCallableResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ReleaseCallableResponse;
      }
    }

    private object op_;
    /// <summary>Enum of possible cases for the "op" oneof.</summary>
    public enum OpOneofCase {
      None = 0,
      CreateSession = 1,
      ExtendSession = 2,
      PartialRunSetup = 3,
      RunStep = 4,
      CloseSession = 5,
      ListDevices = 6,
      ResetRequest = 7,
      MakeCallable = 8,
      RunCallable = 9,
      ReleaseCallable = 10,
      NewReplaySession = 11,
    }
    private OpOneofCase opCase_ = OpOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpOneofCase OpCase {
      get { return opCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOp() {
      opCase_ = OpOneofCase.None;
      op_ = null;
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      CreateSessionResponse = 21,
      ExtendSessionResponse = 22,
      PartialRunSetupResponse = 23,
      RunStepResponse = 24,
      CloseSessionResponse = 25,
      ListDevicesResponse = 26,
      ResetRequestResponse = 27,
      MakeCallableResponse = 28,
      RunCallableResponse = 29,
      ReleaseCallableResponse = 30,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplayOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplayOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartTimeUs, other.StartTimeUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EndTimeUs, other.EndTimeUs)) return false;
      if (!object.Equals(CreateSession, other.CreateSession)) return false;
      if (!object.Equals(ExtendSession, other.ExtendSession)) return false;
      if (!object.Equals(PartialRunSetup, other.PartialRunSetup)) return false;
      if (!object.Equals(RunStep, other.RunStep)) return false;
      if (!object.Equals(CloseSession, other.CloseSession)) return false;
      if (!object.Equals(ListDevices, other.ListDevices)) return false;
      if (!object.Equals(ResetRequest, other.ResetRequest)) return false;
      if (!object.Equals(MakeCallable, other.MakeCallable)) return false;
      if (!object.Equals(RunCallable, other.RunCallable)) return false;
      if (!object.Equals(ReleaseCallable, other.ReleaseCallable)) return false;
      if (!object.Equals(NewReplaySession, other.NewReplaySession)) return false;
      if (!object.Equals(CreateSessionResponse, other.CreateSessionResponse)) return false;
      if (!object.Equals(ExtendSessionResponse, other.ExtendSessionResponse)) return false;
      if (!object.Equals(PartialRunSetupResponse, other.PartialRunSetupResponse)) return false;
      if (!object.Equals(RunStepResponse, other.RunStepResponse)) return false;
      if (!object.Equals(CloseSessionResponse, other.CloseSessionResponse)) return false;
      if (!object.Equals(ListDevicesResponse, other.ListDevicesResponse)) return false;
      if (!object.Equals(ResetRequestResponse, other.ResetRequestResponse)) return false;
      if (!object.Equals(MakeCallableResponse, other.MakeCallableResponse)) return false;
      if (!object.Equals(RunCallableResponse, other.RunCallableResponse)) return false;
      if (!object.Equals(ReleaseCallableResponse, other.ReleaseCallableResponse)) return false;
      if (OpCase != other.OpCase) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTimeUs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartTimeUs);
      if (EndTimeUs != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EndTimeUs);
      if (opCase_ == OpOneofCase.CreateSession) hash ^= CreateSession.GetHashCode();
      if (opCase_ == OpOneofCase.ExtendSession) hash ^= ExtendSession.GetHashCode();
      if (opCase_ == OpOneofCase.PartialRunSetup) hash ^= PartialRunSetup.GetHashCode();
      if (opCase_ == OpOneofCase.RunStep) hash ^= RunStep.GetHashCode();
      if (opCase_ == OpOneofCase.CloseSession) hash ^= CloseSession.GetHashCode();
      if (opCase_ == OpOneofCase.ListDevices) hash ^= ListDevices.GetHashCode();
      if (opCase_ == OpOneofCase.ResetRequest) hash ^= ResetRequest.GetHashCode();
      if (opCase_ == OpOneofCase.MakeCallable) hash ^= MakeCallable.GetHashCode();
      if (opCase_ == OpOneofCase.RunCallable) hash ^= RunCallable.GetHashCode();
      if (opCase_ == OpOneofCase.ReleaseCallable) hash ^= ReleaseCallable.GetHashCode();
      if (opCase_ == OpOneofCase.NewReplaySession) hash ^= NewReplaySession.GetHashCode();
      if (responseCase_ == ResponseOneofCase.CreateSessionResponse) hash ^= CreateSessionResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ExtendSessionResponse) hash ^= ExtendSessionResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PartialRunSetupResponse) hash ^= PartialRunSetupResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.RunStepResponse) hash ^= RunStepResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.CloseSessionResponse) hash ^= CloseSessionResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ListDevicesResponse) hash ^= ListDevicesResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ResetRequestResponse) hash ^= ResetRequestResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.MakeCallableResponse) hash ^= MakeCallableResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.RunCallableResponse) hash ^= RunCallableResponse.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ReleaseCallableResponse) hash ^= ReleaseCallableResponse.GetHashCode();
      hash ^= (int) opCase_;
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (opCase_ == OpOneofCase.CreateSession) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateSession);
      }
      if (opCase_ == OpOneofCase.ExtendSession) {
        output.WriteRawTag(18);
        output.WriteMessage(ExtendSession);
      }
      if (opCase_ == OpOneofCase.PartialRunSetup) {
        output.WriteRawTag(26);
        output.WriteMessage(PartialRunSetup);
      }
      if (opCase_ == OpOneofCase.RunStep) {
        output.WriteRawTag(34);
        output.WriteMessage(RunStep);
      }
      if (opCase_ == OpOneofCase.CloseSession) {
        output.WriteRawTag(42);
        output.WriteMessage(CloseSession);
      }
      if (opCase_ == OpOneofCase.ListDevices) {
        output.WriteRawTag(50);
        output.WriteMessage(ListDevices);
      }
      if (opCase_ == OpOneofCase.ResetRequest) {
        output.WriteRawTag(58);
        output.WriteMessage(ResetRequest);
      }
      if (opCase_ == OpOneofCase.MakeCallable) {
        output.WriteRawTag(66);
        output.WriteMessage(MakeCallable);
      }
      if (opCase_ == OpOneofCase.RunCallable) {
        output.WriteRawTag(74);
        output.WriteMessage(RunCallable);
      }
      if (opCase_ == OpOneofCase.ReleaseCallable) {
        output.WriteRawTag(82);
        output.WriteMessage(ReleaseCallable);
      }
      if (opCase_ == OpOneofCase.NewReplaySession) {
        output.WriteRawTag(90);
        output.WriteMessage(NewReplaySession);
      }
      if (responseCase_ == ResponseOneofCase.CreateSessionResponse) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(CreateSessionResponse);
      }
      if (responseCase_ == ResponseOneofCase.ExtendSessionResponse) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(ExtendSessionResponse);
      }
      if (responseCase_ == ResponseOneofCase.PartialRunSetupResponse) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PartialRunSetupResponse);
      }
      if (responseCase_ == ResponseOneofCase.RunStepResponse) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(RunStepResponse);
      }
      if (responseCase_ == ResponseOneofCase.CloseSessionResponse) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(CloseSessionResponse);
      }
      if (responseCase_ == ResponseOneofCase.ListDevicesResponse) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ListDevicesResponse);
      }
      if (responseCase_ == ResponseOneofCase.ResetRequestResponse) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(ResetRequestResponse);
      }
      if (responseCase_ == ResponseOneofCase.MakeCallableResponse) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(MakeCallableResponse);
      }
      if (responseCase_ == ResponseOneofCase.RunCallableResponse) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(RunCallableResponse);
      }
      if (responseCase_ == ResponseOneofCase.ReleaseCallableResponse) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ReleaseCallableResponse);
      }
      if (StartTimeUs != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(StartTimeUs);
      }
      if (EndTimeUs != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(EndTimeUs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTimeUs != 0D) {
        size += 2 + 8;
      }
      if (EndTimeUs != 0D) {
        size += 2 + 8;
      }
      if (opCase_ == OpOneofCase.CreateSession) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateSession);
      }
      if (opCase_ == OpOneofCase.ExtendSession) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtendSession);
      }
      if (opCase_ == OpOneofCase.PartialRunSetup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartialRunSetup);
      }
      if (opCase_ == OpOneofCase.RunStep) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunStep);
      }
      if (opCase_ == OpOneofCase.CloseSession) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseSession);
      }
      if (opCase_ == OpOneofCase.ListDevices) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListDevices);
      }
      if (opCase_ == OpOneofCase.ResetRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResetRequest);
      }
      if (opCase_ == OpOneofCase.MakeCallable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MakeCallable);
      }
      if (opCase_ == OpOneofCase.RunCallable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunCallable);
      }
      if (opCase_ == OpOneofCase.ReleaseCallable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReleaseCallable);
      }
      if (opCase_ == OpOneofCase.NewReplaySession) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewReplaySession);
      }
      if (responseCase_ == ResponseOneofCase.CreateSessionResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreateSessionResponse);
      }
      if (responseCase_ == ResponseOneofCase.ExtendSessionResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExtendSessionResponse);
      }
      if (responseCase_ == ResponseOneofCase.PartialRunSetupResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PartialRunSetupResponse);
      }
      if (responseCase_ == ResponseOneofCase.RunStepResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RunStepResponse);
      }
      if (responseCase_ == ResponseOneofCase.CloseSessionResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CloseSessionResponse);
      }
      if (responseCase_ == ResponseOneofCase.ListDevicesResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ListDevicesResponse);
      }
      if (responseCase_ == ResponseOneofCase.ResetRequestResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ResetRequestResponse);
      }
      if (responseCase_ == ResponseOneofCase.MakeCallableResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MakeCallableResponse);
      }
      if (responseCase_ == ResponseOneofCase.RunCallableResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RunCallableResponse);
      }
      if (responseCase_ == ResponseOneofCase.ReleaseCallableResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReleaseCallableResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplayOp other) {
      if (other == null) {
        return;
      }
      if (other.StartTimeUs != 0D) {
        StartTimeUs = other.StartTimeUs;
      }
      if (other.EndTimeUs != 0D) {
        EndTimeUs = other.EndTimeUs;
      }
      switch (other.OpCase) {
        case OpOneofCase.CreateSession:
          if (CreateSession == null) {
            CreateSession = new global::Tensorflow.CreateSessionRequest();
          }
          CreateSession.MergeFrom(other.CreateSession);
          break;
        case OpOneofCase.ExtendSession:
          if (ExtendSession == null) {
            ExtendSession = new global::Tensorflow.ExtendSessionRequest();
          }
          ExtendSession.MergeFrom(other.ExtendSession);
          break;
        case OpOneofCase.PartialRunSetup:
          if (PartialRunSetup == null) {
            PartialRunSetup = new global::Tensorflow.PartialRunSetupRequest();
          }
          PartialRunSetup.MergeFrom(other.PartialRunSetup);
          break;
        case OpOneofCase.RunStep:
          if (RunStep == null) {
            RunStep = new global::Tensorflow.RunStepRequest();
          }
          RunStep.MergeFrom(other.RunStep);
          break;
        case OpOneofCase.CloseSession:
          if (CloseSession == null) {
            CloseSession = new global::Tensorflow.CloseSessionRequest();
          }
          CloseSession.MergeFrom(other.CloseSession);
          break;
        case OpOneofCase.ListDevices:
          if (ListDevices == null) {
            ListDevices = new global::Tensorflow.ListDevicesRequest();
          }
          ListDevices.MergeFrom(other.ListDevices);
          break;
        case OpOneofCase.ResetRequest:
          if (ResetRequest == null) {
            ResetRequest = new global::Tensorflow.ResetRequest();
          }
          ResetRequest.MergeFrom(other.ResetRequest);
          break;
        case OpOneofCase.MakeCallable:
          if (MakeCallable == null) {
            MakeCallable = new global::Tensorflow.MakeCallableRequest();
          }
          MakeCallable.MergeFrom(other.MakeCallable);
          break;
        case OpOneofCase.RunCallable:
          if (RunCallable == null) {
            RunCallable = new global::Tensorflow.RunCallableRequest();
          }
          RunCallable.MergeFrom(other.RunCallable);
          break;
        case OpOneofCase.ReleaseCallable:
          if (ReleaseCallable == null) {
            ReleaseCallable = new global::Tensorflow.ReleaseCallableRequest();
          }
          ReleaseCallable.MergeFrom(other.ReleaseCallable);
          break;
        case OpOneofCase.NewReplaySession:
          if (NewReplaySession == null) {
            NewReplaySession = new global::Tensorflow.NewReplaySession();
          }
          NewReplaySession.MergeFrom(other.NewReplaySession);
          break;
      }

      switch (other.ResponseCase) {
        case ResponseOneofCase.CreateSessionResponse:
          if (CreateSessionResponse == null) {
            CreateSessionResponse = new global::Tensorflow.CreateSessionResponse();
          }
          CreateSessionResponse.MergeFrom(other.CreateSessionResponse);
          break;
        case ResponseOneofCase.ExtendSessionResponse:
          if (ExtendSessionResponse == null) {
            ExtendSessionResponse = new global::Tensorflow.ExtendSessionResponse();
          }
          ExtendSessionResponse.MergeFrom(other.ExtendSessionResponse);
          break;
        case ResponseOneofCase.PartialRunSetupResponse:
          if (PartialRunSetupResponse == null) {
            PartialRunSetupResponse = new global::Tensorflow.PartialRunSetupResponse();
          }
          PartialRunSetupResponse.MergeFrom(other.PartialRunSetupResponse);
          break;
        case ResponseOneofCase.RunStepResponse:
          if (RunStepResponse == null) {
            RunStepResponse = new global::Tensorflow.RunStepResponse();
          }
          RunStepResponse.MergeFrom(other.RunStepResponse);
          break;
        case ResponseOneofCase.CloseSessionResponse:
          if (CloseSessionResponse == null) {
            CloseSessionResponse = new global::Tensorflow.CloseSessionResponse();
          }
          CloseSessionResponse.MergeFrom(other.CloseSessionResponse);
          break;
        case ResponseOneofCase.ListDevicesResponse:
          if (ListDevicesResponse == null) {
            ListDevicesResponse = new global::Tensorflow.ListDevicesResponse();
          }
          ListDevicesResponse.MergeFrom(other.ListDevicesResponse);
          break;
        case ResponseOneofCase.ResetRequestResponse:
          if (ResetRequestResponse == null) {
            ResetRequestResponse = new global::Tensorflow.ResetResponse();
          }
          ResetRequestResponse.MergeFrom(other.ResetRequestResponse);
          break;
        case ResponseOneofCase.MakeCallableResponse:
          if (MakeCallableResponse == null) {
            MakeCallableResponse = new global::Tensorflow.MakeCallableResponse();
          }
          MakeCallableResponse.MergeFrom(other.MakeCallableResponse);
          break;
        case ResponseOneofCase.RunCallableResponse:
          if (RunCallableResponse == null) {
            RunCallableResponse = new global::Tensorflow.RunCallableResponse();
          }
          RunCallableResponse.MergeFrom(other.RunCallableResponse);
          break;
        case ResponseOneofCase.ReleaseCallableResponse:
          if (ReleaseCallableResponse == null) {
            ReleaseCallableResponse = new global::Tensorflow.ReleaseCallableResponse();
          }
          ReleaseCallableResponse.MergeFrom(other.ReleaseCallableResponse);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Tensorflow.CreateSessionRequest subBuilder = new global::Tensorflow.CreateSessionRequest();
            if (opCase_ == OpOneofCase.CreateSession) {
              subBuilder.MergeFrom(CreateSession);
            }
            input.ReadMessage(subBuilder);
            CreateSession = subBuilder;
            break;
          }
          case 18: {
            global::Tensorflow.ExtendSessionRequest subBuilder = new global::Tensorflow.ExtendSessionRequest();
            if (opCase_ == OpOneofCase.ExtendSession) {
              subBuilder.MergeFrom(ExtendSession);
            }
            input.ReadMessage(subBuilder);
            ExtendSession = subBuilder;
            break;
          }
          case 26: {
            global::Tensorflow.PartialRunSetupRequest subBuilder = new global::Tensorflow.PartialRunSetupRequest();
            if (opCase_ == OpOneofCase.PartialRunSetup) {
              subBuilder.MergeFrom(PartialRunSetup);
            }
            input.ReadMessage(subBuilder);
            PartialRunSetup = subBuilder;
            break;
          }
          case 34: {
            global::Tensorflow.RunStepRequest subBuilder = new global::Tensorflow.RunStepRequest();
            if (opCase_ == OpOneofCase.RunStep) {
              subBuilder.MergeFrom(RunStep);
            }
            input.ReadMessage(subBuilder);
            RunStep = subBuilder;
            break;
          }
          case 42: {
            global::Tensorflow.CloseSessionRequest subBuilder = new global::Tensorflow.CloseSessionRequest();
            if (opCase_ == OpOneofCase.CloseSession) {
              subBuilder.MergeFrom(CloseSession);
            }
            input.ReadMessage(subBuilder);
            CloseSession = subBuilder;
            break;
          }
          case 50: {
            global::Tensorflow.ListDevicesRequest subBuilder = new global::Tensorflow.ListDevicesRequest();
            if (opCase_ == OpOneofCase.ListDevices) {
              subBuilder.MergeFrom(ListDevices);
            }
            input.ReadMessage(subBuilder);
            ListDevices = subBuilder;
            break;
          }
          case 58: {
            global::Tensorflow.ResetRequest subBuilder = new global::Tensorflow.ResetRequest();
            if (opCase_ == OpOneofCase.ResetRequest) {
              subBuilder.MergeFrom(ResetRequest);
            }
            input.ReadMessage(subBuilder);
            ResetRequest = subBuilder;
            break;
          }
          case 66: {
            global::Tensorflow.MakeCallableRequest subBuilder = new global::Tensorflow.MakeCallableRequest();
            if (opCase_ == OpOneofCase.MakeCallable) {
              subBuilder.MergeFrom(MakeCallable);
            }
            input.ReadMessage(subBuilder);
            MakeCallable = subBuilder;
            break;
          }
          case 74: {
            global::Tensorflow.RunCallableRequest subBuilder = new global::Tensorflow.RunCallableRequest();
            if (opCase_ == OpOneofCase.RunCallable) {
              subBuilder.MergeFrom(RunCallable);
            }
            input.ReadMessage(subBuilder);
            RunCallable = subBuilder;
            break;
          }
          case 82: {
            global::Tensorflow.ReleaseCallableRequest subBuilder = new global::Tensorflow.ReleaseCallableRequest();
            if (opCase_ == OpOneofCase.ReleaseCallable) {
              subBuilder.MergeFrom(ReleaseCallable);
            }
            input.ReadMessage(subBuilder);
            ReleaseCallable = subBuilder;
            break;
          }
          case 90: {
            global::Tensorflow.NewReplaySession subBuilder = new global::Tensorflow.NewReplaySession();
            if (opCase_ == OpOneofCase.NewReplaySession) {
              subBuilder.MergeFrom(NewReplaySession);
            }
            input.ReadMessage(subBuilder);
            NewReplaySession = subBuilder;
            break;
          }
          case 170: {
            global::Tensorflow.CreateSessionResponse subBuilder = new global::Tensorflow.CreateSessionResponse();
            if (responseCase_ == ResponseOneofCase.CreateSessionResponse) {
              subBuilder.MergeFrom(CreateSessionResponse);
            }
            input.ReadMessage(subBuilder);
            CreateSessionResponse = subBuilder;
            break;
          }
          case 178: {
            global::Tensorflow.ExtendSessionResponse subBuilder = new global::Tensorflow.ExtendSessionResponse();
            if (responseCase_ == ResponseOneofCase.ExtendSessionResponse) {
              subBuilder.MergeFrom(ExtendSessionResponse);
            }
            input.ReadMessage(subBuilder);
            ExtendSessionResponse = subBuilder;
            break;
          }
          case 186: {
            global::Tensorflow.PartialRunSetupResponse subBuilder = new global::Tensorflow.PartialRunSetupResponse();
            if (responseCase_ == ResponseOneofCase.PartialRunSetupResponse) {
              subBuilder.MergeFrom(PartialRunSetupResponse);
            }
            input.ReadMessage(subBuilder);
            PartialRunSetupResponse = subBuilder;
            break;
          }
          case 194: {
            global::Tensorflow.RunStepResponse subBuilder = new global::Tensorflow.RunStepResponse();
            if (responseCase_ == ResponseOneofCase.RunStepResponse) {
              subBuilder.MergeFrom(RunStepResponse);
            }
            input.ReadMessage(subBuilder);
            RunStepResponse = subBuilder;
            break;
          }
          case 202: {
            global::Tensorflow.CloseSessionResponse subBuilder = new global::Tensorflow.CloseSessionResponse();
            if (responseCase_ == ResponseOneofCase.CloseSessionResponse) {
              subBuilder.MergeFrom(CloseSessionResponse);
            }
            input.ReadMessage(subBuilder);
            CloseSessionResponse = subBuilder;
            break;
          }
          case 210: {
            global::Tensorflow.ListDevicesResponse subBuilder = new global::Tensorflow.ListDevicesResponse();
            if (responseCase_ == ResponseOneofCase.ListDevicesResponse) {
              subBuilder.MergeFrom(ListDevicesResponse);
            }
            input.ReadMessage(subBuilder);
            ListDevicesResponse = subBuilder;
            break;
          }
          case 218: {
            global::Tensorflow.ResetResponse subBuilder = new global::Tensorflow.ResetResponse();
            if (responseCase_ == ResponseOneofCase.ResetRequestResponse) {
              subBuilder.MergeFrom(ResetRequestResponse);
            }
            input.ReadMessage(subBuilder);
            ResetRequestResponse = subBuilder;
            break;
          }
          case 226: {
            global::Tensorflow.MakeCallableResponse subBuilder = new global::Tensorflow.MakeCallableResponse();
            if (responseCase_ == ResponseOneofCase.MakeCallableResponse) {
              subBuilder.MergeFrom(MakeCallableResponse);
            }
            input.ReadMessage(subBuilder);
            MakeCallableResponse = subBuilder;
            break;
          }
          case 234: {
            global::Tensorflow.RunCallableResponse subBuilder = new global::Tensorflow.RunCallableResponse();
            if (responseCase_ == ResponseOneofCase.RunCallableResponse) {
              subBuilder.MergeFrom(RunCallableResponse);
            }
            input.ReadMessage(subBuilder);
            RunCallableResponse = subBuilder;
            break;
          }
          case 242: {
            global::Tensorflow.ReleaseCallableResponse subBuilder = new global::Tensorflow.ReleaseCallableResponse();
            if (responseCase_ == ResponseOneofCase.ReleaseCallableResponse) {
              subBuilder.MergeFrom(ReleaseCallableResponse);
            }
            input.ReadMessage(subBuilder);
            ReleaseCallableResponse = subBuilder;
            break;
          }
          case 249: {
            StartTimeUs = input.ReadDouble();
            break;
          }
          case 257: {
            EndTimeUs = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
